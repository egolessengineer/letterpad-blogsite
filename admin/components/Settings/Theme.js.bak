import React, { Component } from "react";
import { ChromePicker } from "react-color";
import PropTypes from "prop-types";

class Item extends Component {
    static propTypes = {
        handleClick: PropTypes.func.isRequired,
        handleChange: PropTypes.func.isRequired,
        handleClose: PropTypes.func.isRequired,
        name: PropTypes.string.isRequired,
        item: PropTypes.object.isRequired
    };

    render() {
        let styles = {
            popover: {
                position: "absolute",
                zIndex: "2"
            }
        };
        return (
            <div className="theme-customizer">
                <div
                    className="swatch"
                    onClick={() => this.props.handleClick(this.props.name)}
                >
                    <div
                        style={{
                            width: "36px",
                            height: "14px",
                            borderRadius: "2px",
                            background: this.props.item.color
                        }}
                    />
                </div>
                {this.props.item.display ? (
                    <div style={styles.popover}>
                        <div
                            className="cover"
                            onClick={() =>
                                this.props.handleClose(this.props.name)
                            }
                        />
                        <ChromePicker
                            color={this.props.item.color}
                            onChange={color =>
                                this.props.handleChange(this.props.name, color)
                            }
                        />
                    </div>
                ) : null}
            </div>
        );
    }
}
export default class Theme extends Component {
    static propTypes = {
        data: PropTypes.array.isRequired
    };
    state = {
        theme_menu_bg: {
            display: false,
            color: "rgba(197, 187, 179, 0.69)"
        },
        theme_bg: {
            display: false,
            color: "rgba(197, 187, 179, 0.69)"
        },
        theme_header: {
            display: false,
            color: "rgba(197, 187, 179, 0.69)"
        }
    };

    componentDidMount() {
        const newState = { ...this.state };
        for (let i in newState) {
            newState[i].color = this.props.data[i].value;
        }
        this.setState(newState);
    }

    handleClick = item => {
        this.setState({
            [item]: { display: !this.state[item].display }
        });
    };
    handleClose = item => {
        this.setState({
            [item]: { display: false }
        });
    };
    handleChange = (item, color) => {
        color = `rgba(${color.rgb.r},${color.rgb.g},${color.rgb.b},${
            color.rgb.a
        })`;
        if (item == "theme_menu_bg") {
            document.querySelector(".sidebar").style.backgroundColor = color;
        } else if (item == "theme_bg") {
            document.querySelector("body").style.backgroundColor = color;
        }
        this.state[item].color = color;
        this.setState(this.state);
        this.updateOption(item, color);
    };
    updateOption = (option, value) => {
        this.props.updateOption(option, value);
    };
    render() {
        return (
            <div>
                <div className="form-group">
                    <label className="custom-label">Menu Background</label>
                    <Item
                        name="theme_menu_bg"
                        item={this.state.theme_menu_bg}
                        handleClick={this.handleClick}
                        handleClose={this.handleClose}
                        handleChange={this.handleChange}
                    />
                </div>
                <div className="form-group">
                    <label className="custom-label">Background</label>
                    <Item
                        name="theme_bg"
                        item={this.state.theme_bg}
                        handleClick={this.handleClick}
                        handleClose={this.handleClose}
                        handleChange={this.handleChange}
                    />
                </div>
                <div className="form-group">
                    <label className="custom-label">Header</label>
                    <Item
                        name="theme_header"
                        item={this.state.theme_header}
                        handleClick={this.handleClick}
                        handleClose={this.handleClose}
                        handleChange={this.handleChange}
                    />
                </div>
                <div className="form-group">
                    <label className="custom-label">Logo</label>
                    <input
                        defaultValue={this.props.data.theme_logo.value}
                        type="text"
                        className="form-control"
                        placeholder="Enter your instagram link.."
                        aria-invalid="true"
                        onBlur={e =>
                            this.updateOption("theme_logo", e.target.value)
                        }
                    />
                </div>
            </div>
        );
    }
}
