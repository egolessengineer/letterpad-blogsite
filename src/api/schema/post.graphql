scalar Date

enum PostStatusOptions {
  publish
  draft
  trash
}

enum PostSortBy {
  newest
  oldest
}

enum PostTypes {
  page
  post
}

enum MenuTypes {
  category
  page
}

input PostsFilters {
  tag: String
  category: String
  categorySlug: String
  tagSlug: String
  sortBy: PostSortBy
  status: PostStatusOptions
  author: String
  query: String
  type: PostTypes
  cursor: Int
  limit: Int
  page: Int
  featured: Boolean
}

type CoverImage {
  src: String!
  width: Int!
  height: Int!
}

input InputCoverImage {
  src: String!
  width: Int!
  height: Int!
}

input InputCreatePost {
  title: String
  html: String
  md: String
  authorId: Int
  excerpt: String
  cover_image: InputCoverImage
  type: String
  featured: Boolean
  status: PostStatusOptions
  slug: String
  tags: [TaxonomyInputType]
  categories: [TaxonomyInputType]
}

input InputUpdatePost {
  id: Int!
  title: String
  html: String
  md: String
  authorId: Int
  featured: Boolean
  excerpt: String
  cover_image: InputCoverImage
  publishedAt: Date
  type: String
  status: PostStatusOptions
  slug: String
  tags: [TaxonomyInputType]
  categories: [TaxonomyInputType]
}

input SearchFilters {
  query: String
  tag: String
  category: String
  cursor: Int
  featured: Boolean
  page: Int
  limit: String
}

input PostFilters {
  id: Int
  slug: String
}

type Post {
  # Primary key
  id: Int!
  # Title of the post
  title: String!
  # Html content of the post
  html: String!
  # Markdown content of the post
  md: String!
  # Author information of the post
  author: Author!
  # A breif summary of the post
  excerpt: String!
  # Convert image of the post
  cover_image: CoverImage!
  # Type of the post. Can be "page" or "post"
  type: PostTypes!
  # Status of the post
  status: PostStatusOptions!
  # Featured post
  featured: Boolean!
  # The uri of the post
  slug: String!
  # The creation date of the post
  createdAt: Date!
  # The published date of the post
  publishedAt: Date!
  # Last updated date of the post
  updatedAt: Date!
  # Reading time of the post in minutes
  reading_time: String!
  # Tags of the post
  tags: [Taxonomy!]!
  # Categories of the post
  categories: [Taxonomy!]!
}

type PostsNode {
  count: Int!
  rows: [Post!]!
}
type PostTaxonomyNode {
  count: Int
  rows: [Post]
}

type AdjacentPosts {
  previous: Post
  next: Post
}

input TaxonomyInputType {
  id: Int
  name: String
  slug: String
}

type Response {
  ok: Boolean!
  post: Post
  errors: [Error!]
}

type PostStatus {
  published: Int
  drafts: Int
}

type Stats {
  posts: PostStatus
  pages: PostStatus
  tags: Int
  categories: Int
}

type SearchResult {
  id: Int
  title: String
  excerpt: String
  publishedAt: Date
  slug: String
  featured: Boolean
}

type SearchOutput {
  ok: Boolean
  count: Int
  rows: [SearchResult]
}

type Query {
  # Used to query a single post
  post(filters: PostFilters): Post

  # Used to query a collection of posts
  posts(filters: PostsFilters): PostsNode!

  adjacentPosts(slug: String): AdjacentPosts

  search(filters: SearchFilters!): SearchOutput

  stats: Stats
}

type Mutation {
  createPost(data: InputCreatePost): Response!

  updatePost(data: InputUpdatePost): Response!

  deletePosts(ids: [Int!], deleteFromSystem: Boolean): Response!
}
