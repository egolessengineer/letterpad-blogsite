input Social {
  github: String
  facebook: String
  twitter: String
  instagram: String
}

type TypeSocial {
  github: String
  facebook: String
  twitter: String
  instagram: String
}

type Author {
  id: Int
  username: String
  email: String
  fname: String!
  lname: String!
  social: TypeSocial
  role: Role
  bio: String
  avatar: String
}

type LoginResponse {
  ok: Boolean!
  token: String
  data: Author
  errors: [Error!]
}

type ForgotPasswordResponse {
  ok: Boolean!
  msg: String
}

type AuthorResponse {
  ok: Boolean!
  errors: [Error!]
  data: Author
}

type CreateAuthorResponse {
  ok: Boolean!
  errors: [Error!]
}

input InputAuthor {
  id: Int!
  email: String
  fname: String
  lname: String
  bio: String
  social: Social
  password: String
  roleId: Int
  avatar: String
}

type Query {
  author(id: Int!, username: String): Author!
  authors: [Author!]!
  me: Author
  validateToken: CreateAuthorResponse
}

type Mutation {
  register(
    username: String!
    password: String!
    email: String!
  ): AuthorResponse!
  login(
    username: String
    email: String
    password: String!
    remember: Boolean
  ): LoginResponse!
  forgotPassword(email: String!): ForgotPasswordResponse!
  resetPassword(password: String!, token: String!): ForgotPasswordResponse!
  updateAuthor(author: InputAuthor!): AuthorResponse
  createAuthor(
    email: String!
    fname: String
    lname: String
    roleName: EnumRoles
  ): CreateAuthorResponse!
}
