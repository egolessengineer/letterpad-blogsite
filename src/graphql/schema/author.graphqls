type Social {
  twitter: String
  facebook: String
  github: String
  instagram: String
}

type Author {
  id: Int!
  email: String!
  name: String!
  social: Social
  bio: String!
  role: Role!
  permissions: [Permissions!]!
  avatar: String!
}

input LoginData {
  email: String!
  password: String!
}

type LoginResponse {
  status: Boolean!
  data: Author
}

input InputSocial {
  twitter: String
  facebook: String
  github: String
  instagram: String
}
input InputAuthor {
  id: Int!
  email: String
  name: String
  bio: String
  social: InputSocial
  password: String
  roleId: Int
  avatar: String
}

type AuthorResponse {
  ok: Boolean!
  errors: [Error!]
  data: Author
}

type AuthorNotFoundError {
  message: String!
}

union MeResponse = Author | AuthorNotFoundError

type Query {
  me: MeResponse
}

type Mutation {
  login(data: LoginData): LoginResponse
  updateAuthor(author: InputAuthor!): AuthorResponse
}
