{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Author } from \"./author\";\nimport { Tags } from \"./tags\";\nimport { DataTypes, Model } from \"sequelize\";\nimport restoreSequelizeAttributesOnClass from \"./_tooling\";\nimport { getReadableDate } from \"../../resolvers/helpers\";\nexport class Post extends Model {\n  // Note the null assertions!\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"author_id\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"excerpt\", void 0);\n\n    _defineProperty(this, \"html\", void 0);\n\n    _defineProperty(this, \"md\", void 0);\n\n    _defineProperty(this, \"md_draft\", void 0);\n\n    _defineProperty(this, \"cover_image\", void 0);\n\n    _defineProperty(this, \"cover_image_width\", void 0);\n\n    _defineProperty(this, \"cover_image_height\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"featured\", void 0);\n\n    _defineProperty(this, \"status\", void 0);\n\n    _defineProperty(this, \"slug\", void 0);\n\n    _defineProperty(this, \"reading_time\", void 0);\n\n    _defineProperty(this, \"publishedAt\", void 0);\n\n    _defineProperty(this, \"scheduledAt\", void 0);\n\n    _defineProperty(this, \"createdAt\", void 0);\n\n    _defineProperty(this, \"updatedAt\", void 0);\n\n    _defineProperty(this, \"getTags\", void 0);\n\n    _defineProperty(this, \"getAuthor\", void 0);\n\n    _defineProperty(this, \"setTags\", void 0);\n\n    _defineProperty(this, \"addTag\", void 0);\n\n    _defineProperty(this, \"hasTagById\", void 0);\n\n    _defineProperty(this, \"countTags\", void 0);\n\n    _defineProperty(this, \"createTag\", void 0);\n\n    restoreSequelizeAttributesOnClass(new.target, this, [\"setTags\", \"getTags\", \"addTag\", \"hasTagById\", \"countTags\", \"createTag\", \"getAuthor\"]);\n  }\n\n}\n\n_defineProperty(Post, \"associations\", void 0);\n\nexport default function initPost(sequelize) {\n  Post.init({\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    title: {\n      type: DataTypes.STRING,\n      defaultValue: \"\"\n    },\n    html: {\n      type: DataTypes.TEXT\n    },\n    md: {\n      type: DataTypes.TEXT\n    },\n    md_draft: {\n      type: DataTypes.TEXT,\n      defaultValue: \"\"\n    },\n    excerpt: {\n      type: DataTypes.STRING(400),\n      defaultValue: \"\",\n      allowNull: true\n    },\n    cover_image: {\n      type: DataTypes.STRING,\n      defaultValue: \"\",\n\n      get() {\n        if (this.cover_image && this.cover_image.startsWith(\"/\")) {\n          this.cover_image = process.env.ROOT_URL + this.cover_image;\n        }\n\n        return {\n          src: this.cover_image,\n          width: this.cover_image_width,\n          height: this.cover_image_height\n        };\n      }\n\n    },\n    cover_image_width: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0\n    },\n    cover_image_height: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0\n    },\n    type: {\n      type: DataTypes.STRING,\n      defaultValue: \"\"\n    },\n    featured: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: false\n    },\n    status: {\n      type: DataTypes.STRING,\n      defaultValue: \"draft\"\n    },\n    slug: {\n      type: DataTypes.STRING,\n      defaultValue: \"\",\n\n      get() {\n        return \"/\" + this.type + \"/\" + this.slug;\n      }\n\n    },\n    reading_time: {\n      type: DataTypes.STRING,\n      defaultValue: \"\"\n    },\n    publishedAt: {\n      type: DataTypes.DATE,\n      allowNull: true,\n\n      get() {\n        return getReadableDate(this.publishedAt);\n      }\n\n    },\n    scheduledAt: {\n      type: DataTypes.DATE,\n      allowNull: true,\n\n      get() {\n        return this.scheduledAt ? getReadableDate(this.scheduledAt) : \"\";\n      }\n\n    },\n    updatedAt: {\n      type: DataTypes.DATE,\n\n      get() {\n        return getReadableDate(this.updatedAt);\n      }\n\n    },\n    createdAt: {\n      type: DataTypes.DATE,\n\n      get() {\n        return getReadableDate(this.createdAt);\n      }\n\n    }\n  }, {\n    tableName: \"posts\",\n    sequelize // passing the `sequelize` instance is required\n\n  });\n  return Post;\n}\nexport const postTags = {\n  name: \"postTags\",\n  fk: \"post_id\"\n};\nexport function associatePost() {\n  Post.belongsToMany(Tags, {\n    through: postTags.name,\n    foreignKey: postTags.fk\n  }); // Post.hasMany(Tags);\n\n  Post.belongsTo(Author, {\n    foreignKey: \"author_id\"\n  });\n  return Post;\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/db/models/post.ts"],"names":["Author","Tags","DataTypes","Model","restoreSequelizeAttributesOnClass","getReadableDate","Post","constructor","args","new","target","initPost","sequelize","init","id","type","INTEGER","autoIncrement","primaryKey","title","STRING","defaultValue","html","TEXT","md","md_draft","excerpt","allowNull","cover_image","get","startsWith","process","env","ROOT_URL","src","width","cover_image_width","height","cover_image_height","featured","BOOLEAN","status","slug","reading_time","publishedAt","DATE","scheduledAt","updatedAt","createdAt","tableName","postTags","name","fk","associatePost","belongsToMany","through","foreignKey","belongsTo"],"mappings":"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","sourcesContent":["import { Author } from \"./author\";\nimport { Tags } from \"./tags\";\nimport {\n  Association,\n  BelongsToManySetAssociationsMixin,\n  DataTypes,\n  HasManyAddAssociationMixin,\n  HasManyCountAssociationsMixin,\n  HasManyCreateAssociationMixin,\n  HasManyGetAssociationsMixin,\n  HasManyHasAssociationMixin,\n  Model,\n  Optional,\n  BelongsToGetAssociationMixin,\n} from \"sequelize\";\nimport { PostStatusOptions, PostTypes } from \"../../type-defs.graphqls\";\nimport restoreSequelizeAttributesOnClass from \"./_tooling\";\nimport { getReadableDate } from \"../../resolvers/helpers\";\nimport { TagsNode } from \"@/__generated__/type-defs.graphqls\";\n\nexport interface PostAttributes {\n  id: number;\n  author_id: number;\n  title: string;\n  excerpt: string;\n  html: string;\n  md: string;\n  md_draft: string;\n  cover_image: string;\n  cover_image_width: number;\n  cover_image_height: number;\n  type: PostTypes;\n  featured: boolean;\n  status: PostStatusOptions;\n  slug: string;\n  reading_time: string;\n  publishedAt: Date;\n  scheduledAt?: Date;\n  updatedAt: Date;\n  createdAt: Date;\n  tags?: TagsNode[\"rows\"];\n}\n\nexport interface PostCreationAttributes extends Optional<PostAttributes, \"id\"> {\n  // setTags: BelongsToManySetAssociationsMixin<Tags, number>;\n}\n\nexport class Post extends Model {\n  public id!: number;\n  public author_id!: number;\n  public title!: string;\n  public excerpt!: string;\n  public html!: string;\n  public md!: string;\n  public md_draft!: string;\n  public cover_image!: string;\n  public cover_image_width!: number;\n  public cover_image_height!: number;\n  public type!: PostTypes;\n  public featured!: boolean;\n  public status!: PostStatusOptions;\n  public slug!: string;\n  public reading_time!: string;\n  public publishedAt!: Date;\n  public scheduledAt!: Date;\n\n  public readonly createdAt!: Date;\n  public readonly updatedAt!: Date;\n\n  public getTags!: HasManyGetAssociationsMixin<Tags>; // Note the null assertions!\n  public getAuthor!: BelongsToGetAssociationMixin<Author>;\n  public setTags!: BelongsToManySetAssociationsMixin<Tags, Tags[\"id\"]>;\n  public addTag!: HasManyAddAssociationMixin<Tags, Tags[\"id\"]>;\n  public hasTagById!: HasManyHasAssociationMixin<Tags, Tags[\"id\"]>;\n  public countTags!: HasManyCountAssociationsMixin;\n  public createTag!: HasManyCreateAssociationMixin<Tags>;\n\n  public static associations: {\n    tags: Association<Post, Tags>;\n  };\n\n  constructor(...args) {\n    super(...args);\n    restoreSequelizeAttributesOnClass(new.target, this, [\n      \"setTags\",\n      \"getTags\",\n      \"addTag\",\n      \"hasTagById\",\n      \"countTags\",\n      \"createTag\",\n      \"getAuthor\",\n    ]);\n  }\n}\n\nexport default function initPost(sequelize) {\n  Post.init(\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      title: {\n        type: DataTypes.STRING,\n        defaultValue: \"\",\n      },\n      html: {\n        type: DataTypes.TEXT,\n      },\n      md: {\n        type: DataTypes.TEXT,\n      },\n      md_draft: {\n        type: DataTypes.TEXT,\n        defaultValue: \"\",\n      },\n      excerpt: {\n        type: DataTypes.STRING(400),\n        defaultValue: \"\",\n        allowNull: true,\n      },\n      cover_image: {\n        type: DataTypes.STRING,\n        defaultValue: \"\",\n        get() {\n          if (this.cover_image && this.cover_image.startsWith(\"/\")) {\n            this.cover_image = process.env.ROOT_URL + this.cover_image;\n          }\n          return {\n            src: this.cover_image,\n            width: this.cover_image_width,\n            height: this.cover_image_height,\n          };\n        },\n      },\n      cover_image_width: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      cover_image_height: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      type: {\n        type: DataTypes.STRING,\n        defaultValue: \"\",\n      },\n      featured: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      status: {\n        type: DataTypes.STRING,\n        defaultValue: \"draft\",\n      },\n      slug: {\n        type: DataTypes.STRING,\n        defaultValue: \"\",\n        get() {\n          return \"/\" + this.type + \"/\" + this.slug;\n        },\n      },\n      reading_time: {\n        type: DataTypes.STRING,\n        defaultValue: \"\",\n      },\n      publishedAt: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        get() {\n          return getReadableDate(this.publishedAt);\n        },\n      },\n      scheduledAt: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        get() {\n          return this.scheduledAt ? getReadableDate(this.scheduledAt) : \"\";\n        },\n      },\n      updatedAt: {\n        type: DataTypes.DATE,\n        get() {\n          return getReadableDate(this.updatedAt);\n        },\n      },\n      createdAt: {\n        type: DataTypes.DATE,\n        get() {\n          return getReadableDate(this.createdAt);\n        },\n      },\n    },\n    {\n      tableName: \"posts\",\n      sequelize, // passing the `sequelize` instance is required\n    },\n  );\n\n  return Post;\n}\n\nexport const postTags = {\n  name: \"postTags\",\n  fk: \"post_id\",\n};\n\nexport function associatePost() {\n  Post.belongsToMany(Tags, {\n    through: postTags.name,\n    foreignKey: postTags.fk,\n  });\n  // Post.hasMany(Tags);\n  Post.belongsTo(Author, {\n    foreignKey: \"author_id\",\n  });\n  return Post;\n}\n"]},"metadata":{},"sourceType":"module"}