{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/layouts/ThemeSwitcher.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Switch } from \"antd\";\nimport nextConfig from \"next.config\";\nimport { useEffect, useState } from \"react\";\n\nconst ThemeSwitcher = () => {\n  const {\n    0: theme,\n    1: setTheme\n  } = useState(localStorage.theme || \"light\");\n  useEffect(() => {\n    if (localStorage.theme) {\n      setTheme(localStorage.theme);\n    }\n\n    setTimeout(() => {\n      switchTheme(localStorage.theme || theme);\n    }, 0);\n  }, []);\n\n  const switchTheme = color => {\n    ThemeSwitcher.switch(color);\n    setTheme(color);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      position: \"absolute\",\n      bottom: \"0px\",\n      padding: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(Switch, {\n    checkedChildren: \"\\uD83D\\uDD06\",\n    unCheckedChildren: \"\\u263D\",\n    checked: theme === \"dark\",\n    size: \"small\",\n    onChange: checked => switchTheme(checked ? \"dark\" : \"light\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }));\n};\n\nThemeSwitcher.switch = color => {\n  const $theme = document.querySelector(\"#theme\");\n\n  if (color === \"dark\") {\n    $theme === null || $theme === void 0 ? void 0 : $theme.setAttribute(\"href\", `${nextConfig.basePath}/css/antd.dark.css`);\n  } else {\n    $theme === null || $theme === void 0 ? void 0 : $theme.setAttribute(\"href\", `${nextConfig.basePath}/css/antd.css`);\n  }\n\n  localStorage.theme = color;\n};\n\nexport default ThemeSwitcher;","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/layouts/ThemeSwitcher.tsx"],"names":["Switch","nextConfig","useEffect","useState","ThemeSwitcher","theme","setTheme","localStorage","setTimeout","switchTheme","color","switch","position","bottom","padding","checked","$theme","document","querySelector","setAttribute","basePath"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,MAAvB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBH,QAAQ,CAACI,YAAY,CAACF,KAAb,IAAsB,OAAvB,CAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,YAAY,CAACF,KAAjB,EAAwB;AACtBC,MAAAA,QAAQ,CAACC,YAAY,CAACF,KAAd,CAAR;AACD;;AACDG,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,WAAW,CAACF,YAAY,CAACF,KAAb,IAAsBA,KAAvB,CAAX;AACD,KAFS,EAEP,CAFO,CAAV;AAGD,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMI,WAAW,GAAIC,KAAD,IAAmB;AACrCN,IAAAA,aAAa,CAACO,MAAd,CAAqBD,KAArB;AACAJ,IAAAA,QAAQ,CAACI,KAAD,CAAR;AACD,GAHD;;AAKA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,MAAM,EAAE,KAAhC;AAAuCC,MAAAA,OAAO,EAAE;AAAhD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,eAAe,EAAC,cADlB;AAEE,IAAA,iBAAiB,EAAC,QAFpB;AAGE,IAAA,OAAO,EAAET,KAAK,KAAK,MAHrB;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,QAAQ,EAAEU,OAAO,IAAIN,WAAW,CAACM,OAAO,GAAG,MAAH,GAAY,OAApB,CALlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAWD,CA5BD;;AA8BAX,aAAa,CAACO,MAAd,GAAuBD,KAAK,IAAI;AAC9B,QAAMM,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;;AACA,MAAIR,KAAK,KAAK,MAAd,EAAsB;AACpBM,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,YAAR,CAAqB,MAArB,EAA8B,GAAElB,UAAU,CAACmB,QAAS,oBAApD;AACD,GAFD,MAEO;AACLJ,IAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,YAAR,CAAqB,MAArB,EAA8B,GAAElB,UAAU,CAACmB,QAAS,eAApD;AACD;;AACDb,EAAAA,YAAY,CAACF,KAAb,GAAqBK,KAArB;AACD,CARD;;AASA,eAAeN,aAAf","sourcesContent":["import { Switch } from \"antd\";\nimport nextConfig from \"next.config\";\nimport { useEffect, useState } from \"react\";\n\nconst ThemeSwitcher = () => {\n  const [theme, setTheme] = useState(localStorage.theme || \"light\");\n\n  useEffect(() => {\n    if (localStorage.theme) {\n      setTheme(localStorage.theme);\n    }\n    setTimeout(() => {\n      switchTheme(localStorage.theme || theme);\n    }, 0);\n  }, []);\n\n  const switchTheme = (color: string) => {\n    ThemeSwitcher.switch(color);\n    setTheme(color);\n  };\n\n  return (\n    <div style={{ position: \"absolute\", bottom: \"0px\", padding: \"20px\" }}>\n      <Switch\n        checkedChildren=\"ðŸ”†\"\n        unCheckedChildren=\"â˜½\"\n        checked={theme === \"dark\"}\n        size=\"small\"\n        onChange={checked => switchTheme(checked ? \"dark\" : \"light\")}\n      />\n    </div>\n  );\n};\n\nThemeSwitcher.switch = color => {\n  const $theme = document.querySelector(\"#theme\");\n  if (color === \"dark\") {\n    $theme?.setAttribute(\"href\", `${nextConfig.basePath}/css/antd.dark.css`);\n  } else {\n    $theme?.setAttribute(\"href\", `${nextConfig.basePath}/css/antd.css`);\n  }\n  localStorage.theme = color;\n};\nexport default ThemeSwitcher;\n"]},"metadata":{},"sourceType":"module"}