{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getSession } from \"next-auth/client\";\nimport { useMemo } from \"react\";\nimport nextConfig from \"../../next.config\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nlet apolloClient;\n\nfunction createIsomorphLink(context = {}) {\n  if (true) {\n    const {\n      SchemaLink\n    } = require(\"@apollo/client/link/schema\");\n\n    const {\n      schema\n    } = require(\"./schema\");\n\n    return new SchemaLink({\n      schema,\n      context\n    });\n  } else {\n    const {\n      HttpLink\n    } = require(\"@apollo/client\");\n\n    const basePath = nextConfig.basePath;\n    return new HttpLink({\n      uri: basePath + \"/api/graphql\",\n      credentials: \"same-origin\"\n    });\n  }\n}\n\nfunction createApolloClient(context) {\n  return new ApolloClient({\n    ssrMode: true,\n    link: createIsomorphLink(context),\n    cache: new InMemoryCache()\n  });\n}\n\nexport async function initializeApollo(initialState = null, // Pages with Next.js data fetching methods, like `getStaticProps`, can send\n// a custom context which will be used by `SchemaLink` to server render pages\ncontext) {\n  var _apolloClient2;\n\n  let session;\n\n  if (true) {\n    if (!context) {\n      console.error(\"`initializeApollo` has been called without setting a context\");\n    }\n\n    const isBuildRunning = process.env.NEXT_PHASE === \"phase-production-build\";\n    if (!isBuildRunning) session = await getSession(context);\n  }\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(_objectSpread(_objectSpread({}, context), {}, {\n    session\n  })); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  return useMemo(() => initializeApollo(initialState), [initialState]);\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/apollo.ts"],"names":["getSession","useMemo","nextConfig","ApolloClient","InMemoryCache","apolloClient","createIsomorphLink","context","SchemaLink","require","schema","HttpLink","basePath","uri","credentials","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","session","console","error","isBuildRunning","process","env","NEXT_PHASE","_apolloClient","restore","useApollo"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAGA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,gBAJP;AAOA,IAAIC,YAAJ;;AAUA,SAASC,kBAAT,CAA4BC,OAAwB,GAAG,EAAvD,EAA2D;AACzD,YAAmC;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,4BAAD,CAA9B;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaD,OAAO,CAAC,UAAD,CAA1B;;AACA,WAAO,IAAID,UAAJ,CAAe;AAAEE,MAAAA,MAAF;AAAUH,MAAAA;AAAV,KAAf,CAAP;AACD,GAJD,MAIO;AACL,UAAM;AAAEI,MAAAA;AAAF,QAAeF,OAAO,CAAC,gBAAD,CAA5B;;AAEA,UAAMG,QAAQ,GAAGV,UAAU,CAACU,QAA5B;AACA,WAAO,IAAID,QAAJ,CAAa;AAClBE,MAAAA,GAAG,EAAED,QAAQ,GAAG,cADE;AAElBE,MAAAA,WAAW,EAAE;AAFK,KAAb,CAAP;AAID;AACF;;AAED,SAASC,kBAAT,CAA4BR,OAA5B,EAAuD;AACrD,SAAO,IAAIJ,YAAJ,CAAiB;AACtBa,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAEX,kBAAkB,CAACC,OAAD,CAFF;AAGtBW,IAAAA,KAAK,EAAE,IAAId,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,eAAee,gBAAf,CACLC,YAAiB,GAAG,IADf,EAEL;AACA;AACAb,OAJK,EAKL;AAAA;;AACA,MAAIc,OAAJ;;AACA,YAAmC;AACjC,QAAI,CAACd,OAAL,EAAc;AACZe,MAAAA,OAAO,CAACC,KAAR,CACE,8DADF;AAGD;;AACD,UAAMC,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,KAA2B,wBAAlD;AACA,QAAI,CAACH,cAAL,EAAqBH,OAAO,GAAG,MAAMrB,UAAU,CAACO,OAAD,CAA1B;AACtB;;AACD,QAAMqB,aAAa,qBACjBvB,YADiB,2DACDU,kBAAkB,iCAAMR,OAAN;AAAec,IAAAA;AAAf,KADpC,CAXA,CAcA;AACA;;;AACA,MAAID,YAAJ,EAAkB;AAChBQ,IAAAA,aAAa,CAACV,KAAd,CAAoBW,OAApB,CAA4BT,YAA5B;AACD,GAlBD,CAmBA;;;AACA,YAAmC,OAAOQ,aAAP,CApBnC,CAqBA;;AACA,MAAI,CAACvB,YAAL,EAAmBA,YAAY,GAAGuB,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBV,YAAnB,EAAsC;AAC3C,SAAOnB,OAAO,CAAC,MAAMkB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAAd;AACD","sourcesContent":["import { getSession } from \"next-auth/client\";\nimport { SessionData } from \"./types\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { useMemo } from \"react\";\nimport nextConfig from \"../../next.config\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"@apollo/client\";\nimport models from \"./db/models\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | undefined;\n\nexport type ResolverContext = {\n  req?: IncomingMessage;\n  res?: ServerResponse;\n  models?: typeof models;\n  session?: { user: SessionData };\n  author_id?: number;\n};\n\nfunction createIsomorphLink(context: ResolverContext = {}) {\n  if (typeof window === \"undefined\") {\n    const { SchemaLink } = require(\"@apollo/client/link/schema\");\n    const { schema } = require(\"./schema\");\n    return new SchemaLink({ schema, context });\n  } else {\n    const { HttpLink } = require(\"@apollo/client\");\n\n    const basePath = nextConfig.basePath;\n    return new HttpLink({\n      uri: basePath + \"/api/graphql\",\n      credentials: \"same-origin\",\n    });\n  }\n}\n\nfunction createApolloClient(context?: ResolverContext) {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: createIsomorphLink(context),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport async function initializeApollo(\n  initialState: any = null,\n  // Pages with Next.js data fetching methods, like `getStaticProps`, can send\n  // a custom context which will be used by `SchemaLink` to server render pages\n  context?: ResolverContext,\n) {\n  let session;\n  if (typeof window === \"undefined\") {\n    if (!context) {\n      console.error(\n        \"`initializeApollo` has been called without setting a context\",\n      );\n    }\n    const isBuildRunning = process.env.NEXT_PHASE === \"phase-production-build\";\n    if (!isBuildRunning) session = await getSession(context);\n  }\n  const _apolloClient =\n    apolloClient ?? createApolloClient({ ...context, session });\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState: any) {\n  return useMemo(() => initializeApollo(initialState), [initialState]);\n}\n"]},"metadata":{},"sourceType":"module"}