{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/ediitable-table/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Input, Form } from \"antd\";\nvar EditableContext = /*#__PURE__*/React.createContext(null);\nexport var EditableRow = function EditableRow(_ref) {\n  _s();\n\n  var index = _ref.index,\n      props = _objectWithoutProperties(_ref, [\"index\"]);\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  return __jsx(Form, {\n    form: form,\n    component: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(EditableContext.Provider, {\n    value: form,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, __jsx(\"tr\", _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }))));\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\nexport var EditableCell = function EditableCell(_ref2) {\n  _s2();\n\n  var title = _ref2.title,\n      editable = _ref2.editable,\n      required = _ref2.required,\n      children = _ref2.children,\n      dataIndex = _ref2.dataIndex,\n      record = _ref2.record,\n      handleSave = _ref2.handleSave,\n      restProps = _objectWithoutProperties(_ref2, [\"title\", \"editable\", \"required\", \"children\", \"dataIndex\", \"record\", \"handleSave\"]);\n\n  var _useState = useState(false),\n      editing = _useState[0],\n      setEditing = _useState[1];\n\n  var inputRef = useRef(null);\n  var form = useContext(EditableContext);\n  useEffect(function () {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  var toggleEdit = function toggleEdit() {\n    setEditing(!editing);\n    form.setFieldsValue(_defineProperty({}, dataIndex, record[dataIndex]));\n  };\n\n  var save = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var values;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return form.validateFields();\n\n            case 3:\n              values = _context.sent;\n              toggleEdit();\n              handleSave(_objectSpread(_objectSpread({}, record), values));\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(\"Save failed:\", _context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function save() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var childNode = children;\n\n  if (editable) {\n    childNode = editing ? __jsx(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: required,\n        message: \"\".concat(title, \" is required.\")\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, __jsx(Input, {\n      ref: inputRef,\n      onPressEnter: save,\n      onBlur: save,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    })) : __jsx(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n  return __jsx(\"td\", _extends({}, restProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }), childNode);\n};\n\n_s2(EditableCell, \"e4rtLwpAlgS80pELb3uhUXMhcfI=\");\n\n_c2 = EditableCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/ediitable-table/index.tsx"],"names":["React","useContext","useState","useEffect","useRef","Input","Form","EditableContext","createContext","EditableRow","index","props","useForm","form","EditableCell","title","editable","required","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","validateFields","values","console","log","childNode","margin","message","paddingRight"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Input, Form } from \"antd\";\nimport { FormInstance } from \"antd/lib/form\";\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\ninterface Item {\n  key: string;\n  name: string;\n  desc: string;\n  posts: number;\n}\n\ninterface EditableRowProps {\n  index: number;\n}\n\nexport const EditableRow: React.FC<EditableRowProps> = ({\n  index,\n  ...props\n}) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\ninterface EditableCellProps {\n  title: React.ReactNode;\n  editable: boolean;\n  required: boolean;\n  children: React.ReactNode;\n  dataIndex: keyof Item;\n  record: Item;\n  handleSave: (record: Item) => void;\n}\n\nexport const EditableCell: React.FC<EditableCellProps> = ({\n  title,\n  editable,\n  required,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef<Input>(null);\n  const form = useContext(EditableContext)!;\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current!.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={[\n          {\n            required: required,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingRight: 24 }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n"]},"metadata":{},"sourceType":"module"}