{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Subjects } from \"./../../mail/index\";\nimport Cryptr from \"cryptr\";\nimport jwt from \"jsonwebtoken\";\nimport { PostStatusOptions, PostTypes } from \"@/__generated__/type-defs.graphqls\";\nimport models from \"../db/models\";\nimport bcrypt from \"bcryptjs\";\nimport { settingsData } from \"../db/models/setting\";\nimport { validateCaptcha } from \"./helpers\";\nimport generatePost from \"../db/seed/contentGenerator\";\nimport sendMail from \"src/mail\";\nimport templates from \"src/mail/templates\";\nimport siteConfig from \"config/site.config\";\nimport { seed } from \"../db/seed/seed\";\nimport { getDateTime } from \"../../../shared/utils\";\nimport { ROLES } from \"../types\";\nconst cryptr = new Cryptr(process.env.SECRET_KEY);\nconst Author = {\n  role: async ({\n    id\n  }) => {\n    const author = await models.Author.findOne({\n      where: {\n        id\n      }\n    });\n    if (!author) return;\n\n    try {\n      const role = await author.getRole();\n      return role.name;\n    } catch (e) {\n      throw new Error(e);\n    }\n  },\n  permissions: async ({\n    id\n  }) => {\n    const author = await models.Author.findOne({\n      where: {\n        id\n      }\n    });\n    if (!author) return;\n\n    try {\n      const role = await author.getRole();\n      const permissions = await role.getPermissions();\n      return permissions.map(p => p.name);\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n};\nconst Query = {\n  async me(_parent, _args, {\n    session\n  }, _info) {\n    if (!(session !== null && session !== void 0 && session.user.id)) {\n      return {\n        __typename: \"AuthorNotFoundError\",\n        message: \"Invalid Session\"\n      };\n    }\n\n    const author = await models.Author.findOne({\n      where: {\n        id: session.user.id\n      }\n    });\n\n    if (!author) {\n      return {\n        __typename: \"AuthorNotFoundError\",\n        message: \"\"\n      };\n    }\n\n    if (author.avatar && author.avatar.startsWith(\"/\")) {\n      author.avatar = new URL(author.avatar, process.env.ROOT_URL).href;\n    }\n\n    const a = author.get();\n    return _objectSpread(_objectSpread({}, a), {}, {\n      __typename: \"Author\"\n    });\n  }\n\n};\nconst Mutation = {\n  async createAuthor(_, args) {\n    var _args$data, _args$data2;\n\n    if (args.data.token) {\n      const response = await validateCaptcha(process.env.RECAPTCHA_KEY, args.data.token);\n\n      if (!response) {\n        return {\n          __typename: \"CreateAuthorError\",\n          message: \"We cannot allow you at the moment.\"\n        };\n      }\n    }\n\n    const dbSeeded = await isDatabaseSeeded();\n\n    if (!dbSeeded) {\n      await seed(models, false);\n      await createAuthor({\n        email: \"admin@xxx.com\",\n        username: \"admin\",\n        rolename: ROLES.ADMIN,\n        site_title: \"\",\n        verified: true,\n        password: \"admin\",\n        name: \"Admin\"\n      });\n    }\n\n    let author = await models.Author.findOne({\n      where: {\n        email: (_args$data = args.data) === null || _args$data === void 0 ? void 0 : _args$data.email\n      }\n    });\n\n    if (author) {\n      return {\n        __typename: \"CreateAuthorError\",\n        message: \"Author already exist\"\n      };\n    }\n\n    author = await models.Author.findOne({\n      where: {\n        username: (_args$data2 = args.data) === null || _args$data2 === void 0 ? void 0 : _args$data2.username\n      }\n    });\n\n    if (author) {\n      return {\n        __typename: \"CreateAuthorError\",\n        message: \"Username already exist\"\n      };\n    }\n\n    const newAuthor = await createAuthor({\n      email: args.data.email,\n      username: args.data.username,\n      site_title: args.data.site_title || \"\",\n      password: args.data.password,\n      name: args.data.name\n    });\n\n    if (newAuthor) {\n      const {\n        post,\n        page\n      } = getWelcomePostAndPage();\n      const newPost = await newAuthor.createPost(post);\n      const newTag = await newAuthor.createTag({\n        name: siteConfig.first_post_tag,\n        slug: siteConfig.first_post_tag\n      });\n      await newPost.addTag(newTag);\n      await newAuthor.createPost(page);\n      await sendMail({\n        to: newAuthor.email,\n        subject: Subjects.VERIFY_EMAIL,\n        html: templates.verifyEmail({\n          name: newAuthor.name,\n          verifyToken: cryptr.encrypt(newAuthor.email)\n        })\n      });\n      const a = newAuthor.get();\n      return _objectSpread(_objectSpread({}, a), {}, {\n        __typename: \"Author\"\n      });\n    }\n\n    return {\n      __typename: \"CreateAuthorError\",\n      message: \"Something went wrong and we dont know what.\"\n    };\n  },\n\n  async login(_parent, args, _context, _info) {\n    var _args$data3;\n\n    const author = await models.Author.findOne({\n      where: {\n        email: (_args$data3 = args.data) === null || _args$data3 === void 0 ? void 0 : _args$data3.email\n      }\n    });\n\n    if (author) {\n      var _args$data4;\n\n      if (!(author !== null && author !== void 0 && author.verified)) {\n        return {\n          __typename: \"LoginError\",\n          message: \"Your email id is not verified yet.\"\n        };\n      }\n\n      const authenticated = await bcrypt.compare(((_args$data4 = args.data) === null || _args$data4 === void 0 ? void 0 : _args$data4.password) || \"\", author.password);\n      if (!authenticated) return {\n        __typename: \"LoginError\",\n        message: \"Incorrect credentials\"\n      };\n\n      try {\n        return _objectSpread({\n          __typename: \"Author\"\n        }, author);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    return {\n      __typename: \"LoginError\",\n      message: \"Incorrect email id\"\n    };\n  },\n\n  async updateAuthor(_root, args, {\n    session\n  }) {\n    if ((session === null || session === void 0 ? void 0 : session.user.id) !== args.author.id) {\n      return {\n        ok: true,\n        errors: [{\n          message: \"No session\",\n          path: \"updateAuthor resolver\"\n        }]\n      };\n    }\n\n    try {\n      const dataToUpdate = _objectSpread({}, args.author);\n\n      if (args.author.password) {\n        dataToUpdate.password = await bcrypt.hash(args.author.password, 12);\n      }\n\n      await models.Author.update(dataToUpdate, {\n        where: {\n          id: args.author.id\n        }\n      });\n      return {\n        ok: true,\n        errors: []\n      };\n    } catch (e) {\n      return {\n        ok: false,\n        errors: e //utils.parseErrors(e),\n\n      };\n    }\n  },\n\n  async forgotPassword(_root, args) {\n    try {\n      const email = args.email;\n      const token = jwt.sign({\n        email\n      }, process.env.SECRET_KEY, {\n        expiresIn: 10 * 60 * 1000\n      });\n      const author = await models.Author.findOne({\n        where: {\n          email\n        }\n      });\n\n      if (!author) {\n        throw new Error(\"Email does not exist\");\n      }\n\n      await sendMail({\n        to: author.email,\n        subject: Subjects.FORGOT_PASSWORD,\n        html: templates.forgotPasswordEmail({\n          name: author.name,\n          token: token\n        })\n      });\n      return {\n        ok: true,\n        msg: \"Check your email to recover your password\"\n      };\n    } catch (e) {\n      return {\n        ok: false,\n        msg: \"Something unexpected happened\"\n      };\n    }\n  },\n\n  async resetPassword(_root, args) {\n    try {\n      const token = args.token;\n      const isValidToken = jwt.verify(token, process.env.SECRET_KEY);\n\n      if (!isValidToken) {\n        throw new Error(\"Token is not valid\");\n      }\n\n      const authorEmail = jwt.decode(token);\n      const author = await models.Author.findOne({\n        where: {\n          email: authorEmail\n        }\n      });\n\n      if (!author) {\n        throw new Error(\"Invalid token for changing password\");\n      }\n\n      const newPassword = await bcrypt.hash(args.password, 12);\n      await models.Author.update({\n        password: newPassword\n      }, {\n        where: {\n          id: author.id\n        }\n      });\n      return {\n        ok: true,\n        msg: \"Password changed successfully\"\n      };\n    } catch (e) {\n      return {\n        ok: false,\n        msg: e.message\n      };\n    }\n  }\n\n};\nexport default {\n  Mutation,\n  Author,\n  Query\n};\n\nfunction getWelcomePostAndPage() {\n  const post_cover = \"https://images.unsplash.com/photo-1516035054744-d474c5209db5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80\";\n  let {\n    md,\n    html\n  } = generatePost(PostTypes.Post);\n  let title = \"Welcome to Letterpad\";\n  const post = {\n    title: \"Welcome to Letterpad\",\n    md: md,\n    html: html,\n    excerpt: \"You can use this space to write a small description about the topic. This will be helpful in SEO.\",\n    cover_image: post_cover,\n    cover_image_width: 1500,\n    cover_image_height: 900,\n    type: PostTypes.Post,\n    status: PostStatusOptions.Published,\n    slug: title.toLocaleLowerCase().replace(/ /g, \"-\"),\n    createdAt: getDateTime(),\n    publishedAt: getDateTime(),\n    reading_time: \"5 mins\"\n  };\n  const pageContent = generatePost(PostTypes.Page);\n  title = \"Letterpad Typography\";\n  const page = {\n    title,\n    type: PostTypes.Page,\n    md: pageContent.md,\n    html: pageContent.html,\n    status: PostStatusOptions.Published,\n    excerpt: \"You can use this space to write a small description about this page. This will be helpful in SEO.\",\n    slug: title.toLocaleLowerCase().replace(/ /g, \"-\"),\n    cover_image: \"https://images.unsplash.com/photo-1505682634904-d7c8d95cdc50?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80\",\n    cover_image_width: 1482,\n    cover_image_height: 900,\n    createdAt: getDateTime(),\n    publishedAt: getDateTime(),\n    md_draft: \"\"\n  };\n  return {\n    page,\n    post\n  };\n}\n\nasync function isDatabaseSeeded() {\n  try {\n    await models.sequelize.query(\"SELECT * FROM 'authors'\");\n    return true;\n  } catch (e) {\n    if (e.name === \"SequelizeDatabaseError\") {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nexport async function createAuthor({\n  email,\n  name,\n  username,\n  rolename = ROLES.AUTHOR,\n  verified = false,\n  password,\n  site_title,\n  bio = \"\",\n  avatar = \"\",\n  social = {\n    twitter: \"\",\n    facebook: \"\",\n    github: \"\",\n    instagram: \"\"\n  }\n}) {\n  const role = await models.Role.findOne({\n    where: {\n      name: rolename\n    }\n  });\n  const author = await models.Author.create({\n    name,\n    bio,\n    username,\n    verified,\n    email,\n    password: bcrypt.hashSync(password, 12),\n    avatar,\n    social: social\n  });\n\n  if (author && role) {\n    author.setRole(role);\n    const setting = await models.Setting.create(_objectSpread(_objectSpread({}, settingsData), {}, {\n      site_url: `https://${username}.letterpad.app`,\n      site_title,\n      client_token: jwt.sign({\n        id: author.id\n      }, process.env.SECRET_KEY, {\n        algorithm: \"HS256\"\n      })\n    }));\n    author.setSetting(setting);\n  }\n\n  return author;\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/resolvers/author.ts"],"names":["Subjects","Cryptr","jwt","PostStatusOptions","PostTypes","models","bcrypt","settingsData","validateCaptcha","generatePost","sendMail","templates","siteConfig","seed","getDateTime","ROLES","cryptr","process","env","SECRET_KEY","Author","role","id","author","findOne","where","getRole","name","e","Error","permissions","getPermissions","map","p","Query","me","_parent","_args","session","_info","user","__typename","message","avatar","startsWith","URL","ROOT_URL","href","a","get","Mutation","createAuthor","_","args","data","token","response","RECAPTCHA_KEY","dbSeeded","isDatabaseSeeded","email","username","rolename","ADMIN","site_title","verified","password","newAuthor","post","page","getWelcomePostAndPage","newPost","createPost","newTag","createTag","first_post_tag","slug","addTag","to","subject","VERIFY_EMAIL","html","verifyEmail","verifyToken","encrypt","login","_context","authenticated","compare","console","log","updateAuthor","_root","ok","errors","path","dataToUpdate","hash","update","forgotPassword","sign","expiresIn","FORGOT_PASSWORD","forgotPasswordEmail","msg","resetPassword","isValidToken","verify","authorEmail","decode","newPassword","post_cover","md","Post","title","excerpt","cover_image","cover_image_width","cover_image_height","type","status","Published","toLocaleLowerCase","replace","createdAt","publishedAt","reading_time","pageContent","Page","md_draft","sequelize","query","AUTHOR","bio","social","twitter","facebook","github","instagram","Role","create","hashSync","setRole","setting","Setting","site_url","client_token","algorithm","setSetting"],"mappings":"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","sourcesContent":["import { Subjects } from \"./../../mail/index\";\nimport Cryptr from \"cryptr\";\nimport jwt from \"jsonwebtoken\";\nimport {\n  MutationResolvers,\n  InputAuthor,\n  PostStatusOptions,\n  PostTypes,\n  QueryResolvers,\n  Social,\n  Author as AuthorType,\n} from \"@/__generated__/type-defs.graphqls\";\nimport { ResolverContext } from \"../apollo\";\nimport models from \"../db/models\";\nimport bcrypt from \"bcryptjs\";\nimport { settingsData } from \"../db/models/setting\";\nimport { validateCaptcha } from \"./helpers\";\nimport generatePost from \"../db/seed/contentGenerator\";\nimport sendMail from \"src/mail\";\nimport templates from \"src/mail/templates\";\nimport siteConfig from \"config/site.config\";\nimport { seed } from \"../db/seed/seed\";\nimport { getDateTime } from \"../../../shared/utils\";\nimport { ROLES } from \"../types\";\n\nconst cryptr = new Cryptr(process.env.SECRET_KEY);\n\ninterface InputAuthorForDb extends Omit<InputAuthor, \"social\"> {\n  social: string;\n}\n\nconst Author = {\n  role: async ({ id }) => {\n    const author = await models.Author.findOne({ where: { id } });\n    if (!author) return;\n    try {\n      const role = await author.getRole();\n      return role.name;\n    } catch (e) {\n      throw new Error(e);\n    }\n  },\n  permissions: async ({ id }) => {\n    const author = await models.Author.findOne({ where: { id } });\n    if (!author) return;\n\n    try {\n      const role = await author.getRole();\n      const permissions = await role.getPermissions();\n      return permissions.map(p => p.name);\n    } catch (e) {\n      throw new Error(e);\n    }\n  },\n};\n\nconst Query: QueryResolvers<ResolverContext> = {\n  async me(_parent, _args, { session }, _info) {\n    if (!session?.user.id) {\n      return { __typename: \"AuthorNotFoundError\", message: \"Invalid Session\" };\n    }\n\n    const author = await models.Author.findOne({\n      where: {\n        id: session.user.id,\n      },\n    });\n    if (!author) {\n      return { __typename: \"AuthorNotFoundError\", message: \"\" };\n    }\n\n    if (author.avatar && author.avatar.startsWith(\"/\")) {\n      author.avatar = new URL(author.avatar, process.env.ROOT_URL).href;\n    }\n    const a = author.get() as unknown as AuthorType;\n    return { ...a, __typename: \"Author\" };\n  },\n};\n\nconst Mutation: MutationResolvers<ResolverContext> = {\n  async createAuthor(_, args) {\n    if (args.data.token) {\n      const response = await validateCaptcha(\n        process.env.RECAPTCHA_KEY,\n        args.data.token,\n      );\n\n      if (!response) {\n        return {\n          __typename: \"CreateAuthorError\",\n          message: \"We cannot allow you at the moment.\",\n        };\n      }\n    }\n\n    const dbSeeded = await isDatabaseSeeded();\n    if (!dbSeeded) {\n      await seed(models, false);\n      await createAuthor({\n        email: \"admin@xxx.com\",\n        username: \"admin\",\n        rolename: ROLES.ADMIN,\n        site_title: \"\",\n        verified: true,\n        password: \"admin\",\n        name: \"Admin\",\n      });\n    }\n\n    let author = await models.Author.findOne({\n      where: { email: args.data?.email },\n    });\n\n    if (author) {\n      return {\n        __typename: \"CreateAuthorError\",\n        message: \"Author already exist\",\n      };\n    }\n\n    author = await models.Author.findOne({\n      where: { username: args.data?.username },\n    });\n\n    if (author) {\n      return {\n        __typename: \"CreateAuthorError\",\n        message: \"Username already exist\",\n      };\n    }\n\n    const newAuthor = await createAuthor({\n      email: args.data.email,\n      username: args.data.username,\n      site_title: args.data.site_title || \"\",\n      password: args.data.password,\n      name: args.data.name,\n    });\n\n    if (newAuthor) {\n      const { post, page } = getWelcomePostAndPage();\n      const newPost = await newAuthor.createPost(post);\n      const newTag = await newAuthor.createTag({\n        name: siteConfig.first_post_tag,\n        slug: siteConfig.first_post_tag,\n      });\n      await newPost.addTag(newTag);\n      await newAuthor.createPost(page);\n\n      await sendMail({\n        to: newAuthor.email,\n        subject: Subjects.VERIFY_EMAIL,\n        html: templates.verifyEmail({\n          name: newAuthor.name,\n          verifyToken: cryptr.encrypt(newAuthor.email),\n        }),\n      });\n      const a = newAuthor.get() as unknown as AuthorType;\n      return { ...a, __typename: \"Author\" };\n    }\n    return {\n      __typename: \"CreateAuthorError\",\n      message: \"Something went wrong and we dont know what.\",\n    };\n  },\n  async login(_parent, args, _context, _info) {\n    const author = await models.Author.findOne({\n      where: { email: args.data?.email },\n    });\n\n    if (author) {\n      if (!author?.verified) {\n        return {\n          __typename: \"LoginError\",\n          message: \"Your email id is not verified yet.\",\n        };\n      }\n      const authenticated = await bcrypt.compare(\n        args.data?.password || \"\",\n        author.password,\n      );\n      if (!authenticated)\n        return {\n          __typename: \"LoginError\",\n          message: \"Incorrect credentials\",\n        };\n      try {\n        return {\n          __typename: \"Author\",\n          ...author,\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    return {\n      __typename: \"LoginError\",\n      message: \"Incorrect email id\",\n    };\n  },\n  async updateAuthor(_root, args, { session }) {\n    if (session?.user.id !== args.author.id) {\n      return {\n        ok: true,\n        errors: [{ message: \"No session\", path: \"updateAuthor resolver\" }],\n      };\n    }\n    try {\n      const dataToUpdate = { ...args.author } as InputAuthorForDb;\n\n      if (args.author.password) {\n        dataToUpdate.password = await bcrypt.hash(args.author.password, 12);\n      }\n\n      await models.Author.update(dataToUpdate as any, {\n        where: { id: args.author.id },\n      });\n\n      return {\n        ok: true,\n        errors: [],\n      };\n    } catch (e) {\n      return {\n        ok: false,\n        errors: e, //utils.parseErrors(e),\n      };\n    }\n  },\n  async forgotPassword(_root, args) {\n    try {\n      const email = args.email;\n      const token = jwt.sign({ email }, process.env.SECRET_KEY, {\n        expiresIn: 10 * 60 * 1000,\n      });\n      const author = await models.Author.findOne({\n        where: { email },\n      });\n      if (!author) {\n        throw new Error(\"Email does not exist\");\n      }\n\n      await sendMail({\n        to: author.email,\n        subject: Subjects.FORGOT_PASSWORD,\n        html: templates.forgotPasswordEmail({\n          name: author.name,\n          token: token,\n        }),\n      });\n\n      return {\n        ok: true,\n        msg: \"Check your email to recover your password\",\n      };\n    } catch (e) {\n      return {\n        ok: false,\n        msg: \"Something unexpected happened\",\n      };\n    }\n  },\n  async resetPassword(_root, args) {\n    try {\n      const token = args.token;\n      const isValidToken = jwt.verify(token, process.env.SECRET_KEY);\n      if (!isValidToken) {\n        throw new Error(\"Token is not valid\");\n      }\n\n      const authorEmail = jwt.decode(token);\n\n      const author = await models.Author.findOne({\n        where: { email: authorEmail },\n      });\n\n      if (!author) {\n        throw new Error(\"Invalid token for changing password\");\n      }\n      const newPassword = await bcrypt.hash(args.password, 12);\n\n      await models.Author.update(\n        { password: newPassword },\n        { where: { id: author.id } },\n      );\n\n      return {\n        ok: true,\n        msg: \"Password changed successfully\",\n      };\n    } catch (e) {\n      return {\n        ok: false,\n        msg: e.message,\n      };\n    }\n  },\n};\n\nexport default { Mutation, Author, Query };\n\nfunction getWelcomePostAndPage() {\n  const post_cover =\n    \"https://images.unsplash.com/photo-1516035054744-d474c5209db5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80\";\n\n  let { md, html } = generatePost(PostTypes.Post);\n  let title = \"Welcome to Letterpad\";\n\n  const post = {\n    title: \"Welcome to Letterpad\",\n    md: md,\n    html: html,\n    excerpt:\n      \"You can use this space to write a small description about the topic. This will be helpful in SEO.\",\n    cover_image: post_cover,\n    cover_image_width: 1500,\n    cover_image_height: 900,\n    type: PostTypes.Post,\n    status: PostStatusOptions.Published,\n    slug: title.toLocaleLowerCase().replace(/ /g, \"-\"),\n    createdAt: getDateTime(),\n    publishedAt: getDateTime(),\n    reading_time: \"5 mins\",\n  };\n\n  const pageContent = generatePost(PostTypes.Page);\n  title = \"Letterpad Typography\";\n\n  const page = {\n    title,\n    type: PostTypes.Page,\n    md: pageContent.md,\n    html: pageContent.html,\n    status: PostStatusOptions.Published,\n    excerpt:\n      \"You can use this space to write a small description about this page. This will be helpful in SEO.\",\n    slug: title.toLocaleLowerCase().replace(/ /g, \"-\"),\n    cover_image:\n      \"https://images.unsplash.com/photo-1505682634904-d7c8d95cdc50?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80\",\n    cover_image_width: 1482,\n    cover_image_height: 900,\n    createdAt: getDateTime(),\n    publishedAt: getDateTime(),\n    md_draft: \"\",\n  };\n\n  return { page, post };\n}\n\nasync function isDatabaseSeeded(): Promise<boolean> {\n  try {\n    await models.sequelize.query(\"SELECT * FROM 'authors'\");\n    return true;\n  } catch (e) {\n    if (e.name === \"SequelizeDatabaseError\") {\n      return false;\n    }\n  }\n  return false;\n}\n\ninterface ICreateAuthor {\n  email: string;\n  name: string;\n  username: string;\n  rolename?: ROLES;\n  verified?: boolean;\n  password: string;\n  site_title: string;\n  bio?: string;\n  avatar?: string;\n  social?: Social;\n}\n\nexport async function createAuthor({\n  email,\n  name,\n  username,\n  rolename = ROLES.AUTHOR,\n  verified = false,\n  password,\n  site_title,\n  bio = \"\",\n  avatar = \"\",\n  social = {\n    twitter: \"\",\n    facebook: \"\",\n    github: \"\",\n    instagram: \"\",\n  },\n}: ICreateAuthor) {\n  const role = await models.Role.findOne({ where: { name: rolename } });\n  const author = await models.Author.create({\n    name,\n    bio,\n    username,\n    verified,\n    email,\n    password: bcrypt.hashSync(password, 12),\n    avatar,\n    social: social,\n  });\n  if (author && role) {\n    author.setRole(role);\n    const setting = await models.Setting.create({\n      ...settingsData,\n      site_url: `https://${username}.letterpad.app`,\n      site_title,\n      client_token: jwt.sign(\n        {\n          id: author.id,\n        },\n        process.env.SECRET_KEY,\n        {\n          algorithm: \"HS256\",\n        },\n      ),\n    });\n    author.setSetting(setting);\n  }\n  return author;\n}\n"]},"metadata":{},"sourceType":"module"}