{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getSession } from \"next-auth/client\";\nimport { useMemo } from \"react\";\nimport nextConfig from \"../../next.config\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nvar apolloClient;\n\nfunction createIsomorphLink() {\n  var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (false) {\n    var _require = require(\"@apollo/client/link/schema\"),\n        SchemaLink = _require.SchemaLink;\n\n    var _require2 = require(\"./schema\"),\n        schema = _require2.schema;\n\n    return new SchemaLink({\n      schema: schema,\n      context: context\n    });\n  } else {\n    var _require3 = require(\"@apollo/client\"),\n        HttpLink = _require3.HttpLink;\n\n    var basePath = nextConfig.basePath;\n    return new HttpLink({\n      uri: basePath + \"/api/graphql\",\n      credentials: \"same-origin\"\n    });\n  }\n}\n\nfunction createApolloClient(context) {\n  return new ApolloClient({\n    ssrMode: false,\n    link: createIsomorphLink(context),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo() {\n  return _initializeApollo.apply(this, arguments);\n}\n\nfunction _initializeApollo() {\n  _initializeApollo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _apolloClient2;\n\n    var initialState,\n        context,\n        session,\n        isBuildRunning,\n        _apolloClient,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            initialState = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;\n            // Pages with Next.js data fetching methods, like `getStaticProps`, can send\n            // a custom context which will be used by `SchemaLink` to server render pages\n            context = _args.length > 1 ? _args[1] : undefined;\n\n            if (!false) {\n              _context.next = 9;\n              break;\n            }\n\n            if (!context) {\n              console.error(\"`initializeApollo` has been called without setting a context\");\n            }\n\n            isBuildRunning = process.env.NEXT_PHASE === \"phase-production-build\";\n\n            if (isBuildRunning) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 8;\n            return getSession(context);\n\n          case 8:\n            session = _context.sent;\n\n          case 9:\n            _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(_objectSpread(_objectSpread({}, context), {}, {\n              session: session\n            })); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n            // get hydrated here\n\n            if (initialState) {\n              _apolloClient.cache.restore(initialState);\n            } // For SSG and SSR always create a new Apollo Client\n\n\n            if (!false) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _apolloClient);\n\n          case 13:\n            // Create the Apollo Client once in the client\n            if (!apolloClient) apolloClient = _apolloClient;\n            return _context.abrupt(\"return\", _apolloClient);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initializeApollo.apply(this, arguments);\n}\n\nexport function useApollo(initialState) {\n  _s();\n\n  return useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n}\n\n_s(useApollo, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/apollo.ts"],"names":["getSession","useMemo","nextConfig","ApolloClient","InMemoryCache","apolloClient","createIsomorphLink","context","require","SchemaLink","schema","HttpLink","basePath","uri","credentials","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","console","error","isBuildRunning","process","env","NEXT_PHASE","session","_apolloClient","restore","useApollo"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAGA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,gBAJP;AAOA,IAAIC,YAAJ;;AAUA,SAASC,kBAAT,GAA2D;AAAA,MAA/BC,OAA+B,uEAAJ,EAAI;;AACzD,aAAmC;AAAA,mBACVC,OAAO,CAAC,4BAAD,CADG;AAAA,QACzBC,UADyB,YACzBA,UADyB;;AAAA,oBAEdD,OAAO,CAAC,UAAD,CAFO;AAAA,QAEzBE,MAFyB,aAEzBA,MAFyB;;AAGjC,WAAO,IAAID,UAAJ,CAAe;AAAEC,MAAAA,MAAM,EAANA,MAAF;AAAUH,MAAAA,OAAO,EAAPA;AAAV,KAAf,CAAP;AACD,GAJD,MAIO;AAAA,oBACgBC,OAAO,CAAC,gBAAD,CADvB;AAAA,QACGG,QADH,aACGA,QADH;;AAGL,QAAMC,QAAQ,GAAGV,UAAU,CAACU,QAA5B;AACA,WAAO,IAAID,QAAJ,CAAa;AAClBE,MAAAA,GAAG,EAAED,QAAQ,GAAG,cADE;AAElBE,MAAAA,WAAW,EAAE;AAFK,KAAb,CAAP;AAID;AACF;;AAED,SAASC,kBAAT,CAA4BR,OAA5B,EAAuD;AACrD,SAAO,IAAIJ,YAAJ,CAAiB;AACtBa,IAAAA,OAAO,OADe;AAEtBC,IAAAA,IAAI,EAAEX,kBAAkB,CAACC,OAAD,CAFF;AAGtBW,IAAAA,KAAK,EAAE,IAAId,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,gBAAsBe,gBAAtB;AAAA;AAAA;;;+EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLC,YAAAA,YADK,2DACe,IADf;AAEL;AACA;AACAb,YAAAA,OAJK;;AAAA;AAAA;AAAA;AAAA;;AAQH,gBAAI,CAACA,OAAL,EAAc;AACZc,cAAAA,OAAO,CAACC,KAAR,CACE,8DADF;AAGD;;AACKC,YAAAA,cAbH,GAaoBC,OAAO,CAACC,GAAR,CAAYC,UAAZ,KAA2B,wBAb/C;;AAAA,gBAcEH,cAdF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAckCvB,UAAU,CAACO,OAAD,CAd5C;;AAAA;AAckBoB,YAAAA,OAdlB;;AAAA;AAgBCC,YAAAA,aAhBD,qBAiBHvB,YAjBG,2DAiBaU,kBAAkB,iCAAMR,OAAN;AAAeoB,cAAAA,OAAO,EAAPA;AAAf,eAjB/B,EAmBL;AACA;;AACA,gBAAIP,YAAJ,EAAkB;AAChBQ,cAAAA,aAAa,CAACV,KAAd,CAAoBW,OAApB,CAA4BT,YAA5B;AACD,aAvBI,CAwBL;;;AAxBK;AAAA;AAAA;AAAA;;AAAA,6CAyBqCQ,aAzBrC;;AAAA;AA0BL;AACA,gBAAI,CAACvB,YAAL,EAAmBA,YAAY,GAAGuB,aAAf;AA3Bd,6CA6BEA,aA7BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgCP,OAAO,SAASE,SAAT,CAAmBV,YAAnB,EAAsC;AAAA;;AAC3C,SAAOnB,OAAO,CAAC;AAAA,WAAMkB,gBAAgB,CAACC,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAAd;AACD;;GAFeU,S","sourcesContent":["import { getSession } from \"next-auth/client\";\nimport { SessionData } from \"./types\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { useMemo } from \"react\";\nimport nextConfig from \"../../next.config\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"@apollo/client\";\nimport models from \"./db/models\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | undefined;\n\nexport type ResolverContext = {\n  req?: IncomingMessage;\n  res?: ServerResponse;\n  models?: typeof models;\n  session?: { user: SessionData };\n  author_id?: number;\n};\n\nfunction createIsomorphLink(context: ResolverContext = {}) {\n  if (typeof window === \"undefined\") {\n    const { SchemaLink } = require(\"@apollo/client/link/schema\");\n    const { schema } = require(\"./schema\");\n    return new SchemaLink({ schema, context });\n  } else {\n    const { HttpLink } = require(\"@apollo/client\");\n\n    const basePath = nextConfig.basePath;\n    return new HttpLink({\n      uri: basePath + \"/api/graphql\",\n      credentials: \"same-origin\",\n    });\n  }\n}\n\nfunction createApolloClient(context?: ResolverContext) {\n  return new ApolloClient({\n    ssrMode: typeof window === \"undefined\",\n    link: createIsomorphLink(context),\n    cache: new InMemoryCache(),\n  });\n}\n\nexport async function initializeApollo(\n  initialState: any = null,\n  // Pages with Next.js data fetching methods, like `getStaticProps`, can send\n  // a custom context which will be used by `SchemaLink` to server render pages\n  context?: ResolverContext,\n) {\n  let session;\n  if (typeof window === \"undefined\") {\n    if (!context) {\n      console.error(\n        \"`initializeApollo` has been called without setting a context\",\n      );\n    }\n    const isBuildRunning = process.env.NEXT_PHASE === \"phase-production-build\";\n    if (!isBuildRunning) session = await getSession(context);\n  }\n  const _apolloClient =\n    apolloClient ?? createApolloClient({ ...context, session });\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === \"undefined\") return _apolloClient;\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient;\n\n  return _apolloClient;\n}\n\nexport function useApollo(initialState: any) {\n  return useMemo(() => initializeApollo(initialState), [initialState]);\n}\n"]},"metadata":{},"sourceType":"module"}