{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/file-explorer/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Modal from \"antd/lib/modal/Modal\";\nimport { MediaProvider } from \"../../pages/post/[postId]\";\nimport Internal from \"./providers/Internal\";\nimport Unsplash from \"./providers/Unsplash\";\nimport { Button } from \"antd\";\nimport MediaItem from \"./MediaItem\";\nimport { useRef, useState } from \"react\";\nimport { uploadFile } from \"shared/upload\";\n\nconst FileExplorer = ({\n  isVisible,\n  handleCancel,\n  multi = true,\n  onInsert\n}) => {\n  const {\n    0: mediaProvider,\n    1: setMediaProvider\n  } = useState(MediaProvider.Letterpad);\n  const hiddenInputRef = useRef(null);\n  const isUnsplash = mediaProvider === MediaProvider.Unsplash;\n  const isInternal = mediaProvider === MediaProvider.Letterpad;\n  const toggleProvider = isUnsplash ? MediaProvider.Letterpad : MediaProvider.Unsplash;\n  const {\n    0: selectedUrls,\n    1: setSelection\n  } = useState({});\n\n  const closeWindow = () => {\n    setSelection({});\n    handleCancel();\n  };\n\n  const insertMedia = async () => {\n    // get only the urls in an array\n    try {\n      await onInsert(selectedUrls);\n    } catch (e) {// notify.show(\"Something unexpected happened.\", \"error\");\n    }\n\n    setTimeout(closeWindow, 0);\n  };\n\n  const onMediaSelected = media => {\n    let urls = _objectSpread({}, selectedUrls);\n\n    if (urls[`${media.url}`]) {\n      delete urls[`${media.url}`];\n    } else {\n      urls[`${media.url}`] = {\n        src: media.url,\n        width: media.width || 0,\n        height: media.height || 0,\n        alt: media.description\n      };\n    }\n\n    if (!multi) {\n      urls[`${media.url}`] = {\n        src: media.url,\n        width: media.width || 0,\n        height: media.height || 0,\n        alt: media.description\n      };\n    }\n\n    setSelection(urls);\n  };\n\n  const renderer = media => {\n    return media.map(item => __jsx(MediaItem, {\n      key: item.id,\n      media: item,\n      isSelected: !!selectedUrls[item.url],\n      onMediaSelected: onMediaSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  const hasSelectedImages = Object.keys(selectedUrls).length > 0;\n  if (!isVisible) return null;\n  return __jsx(Modal, {\n    centered: true,\n    width: \"60vw\",\n    title: \"Media\",\n    visible: isVisible,\n    onCancel: closeWindow,\n    footer: [__jsx(Button, {\n      key: \"back\",\n      onClick: closeWindow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"Cancel\"), hasSelectedImages ? __jsx(Button, {\n      key: \"insert\",\n      onClick: insertMedia,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, \"Insert\") : null, isInternal ? __jsx(Button, {\n      key: \"upload\",\n      onClick: () => {\n        var _hiddenInputRef$curre;\n\n        (_hiddenInputRef$curre = hiddenInputRef.current) === null || _hiddenInputRef$curre === void 0 ? void 0 : _hiddenInputRef$curre.click();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, \"Browse\") : null, __jsx(Button, {\n      type: \"primary\",\n      onClick: () => {\n        setSelection({});\n        setMediaProvider(toggleProvider);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, isUnsplash ? \"My Media\" : \"Search Online\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, isInternal && __jsx(Internal, {\n    renderer: renderer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 22\n    }\n  }), isUnsplash && __jsx(Unsplash, {\n    renderer: renderer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 22\n    }\n  }), __jsx(\"input\", {\n    type: \"file\",\n    ref: hiddenInputRef,\n    style: {\n      display: \"none\"\n    },\n    onChange: async e => {\n      if (!e.target.files) return;\n      const [result] = await uploadFile({\n        files: e.target.files,\n        type: \"cover_image\"\n      });\n\n      let urls = _objectSpread({}, selectedUrls);\n\n      urls[`${result.src}`] = _objectSpread(_objectSpread({}, result), {}, {\n        alt: \"\"\n      });\n      onInsert(urls);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FileExplorer;","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/file-explorer/index.tsx"],"names":["Modal","MediaProvider","Internal","Unsplash","Button","MediaItem","useRef","useState","uploadFile","FileExplorer","isVisible","handleCancel","multi","onInsert","mediaProvider","setMediaProvider","Letterpad","hiddenInputRef","isUnsplash","isInternal","toggleProvider","selectedUrls","setSelection","closeWindow","insertMedia","e","setTimeout","onMediaSelected","media","urls","url","src","width","height","alt","description","renderer","map","item","id","hasSelectedImages","Object","keys","length","current","click","display","target","files","result","type"],"mappings":"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","sourcesContent":["import Modal from \"antd/lib/modal/Modal\";\nimport { MediaProvider } from \"../../pages/post/[postId]\";\nimport Internal from \"./providers/Internal\";\nimport Unsplash from \"./providers/Unsplash\";\nimport { Image, Media } from \"@/__generated__/type-defs.graphqls\";\nimport { Button } from \"antd\";\nimport MediaItem from \"./MediaItem\";\nimport { useRef, useState } from \"react\";\nimport { uploadFile } from \"shared/upload\";\n\ntype ImageInput = {\n  [urls: string]: Image & { alt: string };\n};\n\ninterface IProps {\n  isVisible: boolean;\n  handleCancel: () => void;\n  multi?: boolean;\n  onInsert: (images: ImageInput) => Promise<unknown[]>;\n  onImageFile?: (image: File[]) => Promise<string[]>;\n}\nconst FileExplorer = ({\n  isVisible,\n  handleCancel,\n  multi = true,\n  onInsert,\n}: IProps) => {\n  const [mediaProvider, setMediaProvider] = useState<MediaProvider>(\n    MediaProvider.Letterpad,\n  );\n  const hiddenInputRef = useRef<HTMLInputElement>(null);\n  const isUnsplash = mediaProvider === MediaProvider.Unsplash;\n  const isInternal = mediaProvider === MediaProvider.Letterpad;\n\n  const toggleProvider = isUnsplash\n    ? MediaProvider.Letterpad\n    : MediaProvider.Unsplash;\n\n  const [selectedUrls, setSelection] = useState<ImageInput>({});\n\n  const closeWindow = () => {\n    setSelection({});\n    handleCancel();\n  };\n\n  const insertMedia = async () => {\n    // get only the urls in an array\n    try {\n      await onInsert(selectedUrls);\n    } catch (e) {\n      // notify.show(\"Something unexpected happened.\", \"error\");\n    }\n    setTimeout(closeWindow, 0);\n  };\n\n  const onMediaSelected = (media: Media) => {\n    let urls = { ...selectedUrls };\n    if (urls[`${media.url}`]) {\n      delete urls[`${media.url}`];\n    } else {\n      urls[`${media.url}`] = {\n        src: media.url,\n        width: media.width || 0,\n        height: media.height || 0,\n        alt: media.description,\n      };\n    }\n    if (!multi) {\n      urls[`${media.url}`] = {\n        src: media.url,\n        width: media.width || 0,\n        height: media.height || 0,\n        alt: media.description,\n      };\n    }\n    setSelection(urls);\n  };\n\n  const renderer = (media: Media[]) => {\n    return media.map(item => (\n      <MediaItem\n        key={item.id}\n        media={item}\n        isSelected={!!selectedUrls[item.url]}\n        onMediaSelected={onMediaSelected}\n      />\n    ));\n  };\n  const hasSelectedImages = Object.keys(selectedUrls).length > 0;\n  if (!isVisible) return null;\n  return (\n    <Modal\n      centered\n      width=\"60vw\"\n      title=\"Media\"\n      visible={isVisible}\n      onCancel={closeWindow}\n      footer={[\n        <Button key=\"back\" onClick={closeWindow}>\n          Cancel\n        </Button>,\n        hasSelectedImages ? (\n          <Button key=\"insert\" onClick={insertMedia}>\n            Insert\n          </Button>\n        ) : null,\n        isInternal ? (\n          <Button\n            key=\"upload\"\n            onClick={() => {\n              hiddenInputRef.current?.click();\n            }}\n          >\n            Browse\n          </Button>\n        ) : null,\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            setSelection({});\n            setMediaProvider(toggleProvider);\n          }}\n        >\n          {isUnsplash ? \"My Media\" : \"Search Online\"}\n        </Button>,\n      ]}\n    >\n      {isInternal && <Internal renderer={renderer} />}\n      {isUnsplash && <Unsplash renderer={renderer} />}\n      <input\n        type=\"file\"\n        ref={hiddenInputRef}\n        style={{ display: \"none\" }}\n        onChange={async e => {\n          if (!e.target.files) return;\n          const [result] = await uploadFile({\n            files: e.target.files,\n            type: \"cover_image\",\n          });\n          let urls = { ...selectedUrls };\n          urls[`${result.src}`] = { ...result, alt: \"\" };\n          onInsert(urls);\n        }}\n      />\n    </Modal>\n  );\n};\n\nexport default FileExplorer;\n"]},"metadata":{},"sourceType":"module"}