{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { setResponsiveImages } from \"./../utils/imageAttributs\";\nimport { Op } from \"sequelize\";\nimport { Permissions, PostStatusOptions, SortBy, PostTypes } from \"@/__generated__/type-defs.graphqls\";\nimport { decrypt } from \"../utils/crypto\";\nimport models from \"../db/models\";\nimport logger from \"../../../shared/logger\";\nimport debug from \"debug\";\nimport { getHtmlFromMarkdown } from \"letterpad-editor/dist/mdToHtml\";\nimport { addGalleryWrapper } from \"../utils/addGalleryWrappr\";\nconst Post = {\n  author: async ({\n    id\n  }) => {\n    const post = await models.Post.findOne({\n      where: {\n        id: id\n      }\n    });\n\n    if (post) {\n      const author = await post.getAuthor();\n      return author.get();\n    }\n\n    return {};\n  },\n  tags: async ({\n    id\n  }) => {\n    const post = await models.Post.findOne({\n      where: {\n        id: id\n      }\n    });\n\n    if (post) {\n      const tags = await post.getTags();\n      return tags.map(tag => tag.get());\n    }\n  },\n  html: async ({\n    html\n  }) => {\n    return addGalleryWrapper(setResponsiveImages(html));\n  }\n};\nconst Query = {\n  /**\n   * Query to take care of multiple post in one page.\n   * Used for Search and Admin posts and pages list.\n   */\n  async posts(_parent, args, {\n    session,\n    author_id\n  }, _info) {\n    debug(\"letterpad:post:update\")(\"Reached posts query\");\n    let authorId = (session === null || session === void 0 ? void 0 : session.user.id) || author_id;\n\n    if (!authorId) {\n      return {\n        __typename: \"PostError\",\n        message: \"Author Id not found\"\n      };\n    }\n\n    const query = {\n      conditions: {\n        order: [[\"publishedAt\", SortBy.Desc]],\n        include: [],\n        sortBy: \"DESC\",\n        where: {\n          id: 0,\n          featured: false,\n          status: {\n            [Op.ne]: PostStatusOptions.Trashed\n          },\n          type: PostTypes.Post,\n          author_id: authorId\n        },\n        limit: 20,\n        offset: 0\n      }\n    };\n\n    try {\n      var _args$filters, _args$filters2, _args$filters3, _args$filters4, _args$filters5, _args$filters6, _args$filters7, _args$filters8, _args$filters9, _args$filters10, _args$filters11;\n\n      // id\n      if (args !== null && args !== void 0 && (_args$filters = args.filters) !== null && _args$filters !== void 0 && _args$filters.id) {\n        query.conditions.where.id = args.filters.id;\n      } else {\n        delete query.conditions.where.id;\n      } // pagination\n\n\n      if (args !== null && args !== void 0 && (_args$filters2 = args.filters) !== null && _args$filters2 !== void 0 && _args$filters2.cursor) {\n        query.conditions.where.id = {\n          [Op.gt]: args.filters.cursor\n        };\n      }\n\n      if (args !== null && args !== void 0 && (_args$filters3 = args.filters) !== null && _args$filters3 !== void 0 && _args$filters3.page) {\n        query.conditions.offset = (args.filters.page - 1) * query.conditions.limit;\n      } else {\n        delete query.conditions.offset;\n      }\n\n      if (args !== null && args !== void 0 && (_args$filters4 = args.filters) !== null && _args$filters4 !== void 0 && _args$filters4.limit) {\n        query.conditions.limit = args.filters.limit;\n      } // resolve status type and filter\n\n\n      if (args !== null && args !== void 0 && (_args$filters5 = args.filters) !== null && _args$filters5 !== void 0 && _args$filters5.featured) {\n        query.conditions.where.featured = args.filters.featured;\n      } else {\n        delete query.conditions.where.featured;\n      } // resolve type\n\n\n      if (args !== null && args !== void 0 && (_args$filters6 = args.filters) !== null && _args$filters6 !== void 0 && _args$filters6.type) {\n        query.conditions.where.type = args.filters.type;\n      } // resolve status\n\n\n      if (args !== null && args !== void 0 && (_args$filters7 = args.filters) !== null && _args$filters7 !== void 0 && _args$filters7.status) {\n        query.conditions.where.status = {\n          [Op.eq]: args.filters.status\n        };\n      }\n\n      if (!(session !== null && session !== void 0 && session.user.id)) {\n        query.conditions.where.status = {\n          [Op.eq]: PostStatusOptions.Published\n        };\n      } // sort\n\n\n      if (args !== null && args !== void 0 && (_args$filters8 = args.filters) !== null && _args$filters8 !== void 0 && _args$filters8.sortBy) {\n        query.conditions.order = [[\"publishedAt\", args.filters.sortBy]];\n      }\n\n      if (session !== null && session !== void 0 && session.user.id && args !== null && args !== void 0 && (_args$filters9 = args.filters) !== null && _args$filters9 !== void 0 && _args$filters9.sortBy) {\n        query.conditions.order = [[\"updatedAt\", args.filters.sortBy]];\n      } // resolve menu filter\n\n\n      if (args !== null && args !== void 0 && (_args$filters10 = args.filters) !== null && _args$filters10 !== void 0 && _args$filters10.tagSlug) {\n        let {\n          tagSlug\n        } = args.filters;\n\n        if (tagSlug === \"/\") {\n          // get the first menu item.\n          const author = await models.Author.findOne({\n            where: {\n              id: authorId\n            }\n          });\n          const setting = await (author === null || author === void 0 ? void 0 : author.getSetting());\n\n          if (setting) {\n            tagSlug = setting.menu[0].slug;\n          }\n        }\n\n        const taxTag = await models.Tags.findOne({\n          where: {\n            slug: tagSlug.split(\"/\").pop(),\n            author_id: authorId\n          }\n        });\n\n        if (taxTag) {\n          const posts = await taxTag.getPosts(query.conditions);\n          return {\n            __typename: \"PostsNode\",\n            rows: posts.map(p => p.get()),\n            count: await taxTag.countPosts(query.conditions)\n          };\n        }\n\n        return {\n          __typename: \"PostsNode\",\n          rows: [],\n          count: 0\n        };\n      } // resolve tag filter\n\n\n      if (args !== null && args !== void 0 && (_args$filters11 = args.filters) !== null && _args$filters11 !== void 0 && _args$filters11.tag) {\n        const tag = await models.Tags.findOne({\n          where: {\n            name: args.filters.tag,\n            author_id\n          }\n        });\n\n        if (tag) {\n          const posts = await tag.getPosts(query.conditions);\n          return {\n            rows: posts.map(p => p.get()),\n            count: await tag.countPosts(query.conditions)\n          };\n        } else {\n          return {\n            __typename: \"PostsNode\",\n            rows: [],\n            count: 0\n          };\n        }\n      }\n\n      const posts = await models.Post.findAll(query.conditions);\n      const count = await models.Post.count(query.conditions);\n      debug(\"letterpad:post:update\")(query.conditions);\n      return {\n        __typename: \"PostsNode\",\n        rows: posts.map(post => post.get()),\n        count\n      };\n    } catch (e) {\n      debug(\"letterpad:post:update\")(e);\n      return {\n        __typename: \"PostError\",\n        message: e.message\n      };\n    }\n  },\n\n  async post(_parent, args, {\n    session,\n    author_id\n  }, _info) {\n    const error = {\n      __typename: \"PostError\",\n      message: \"\"\n    };\n    if (!args.filters) return _objectSpread(_objectSpread({}, error), {}, {\n      message: \"Missing arguments\"\n    });\n    const authorId = (session === null || session === void 0 ? void 0 : session.user.id) || author_id;\n\n    if (!authorId) {\n      return _objectSpread(_objectSpread({}, error), {}, {\n        message: \"No author found for this post.\"\n      });\n    }\n\n    const _args$filters12 = args.filters,\n          {\n      previewHash\n    } = _args$filters12,\n          filters = _objectWithoutProperties(_args$filters12, [\"previewHash\"]);\n\n    const conditions = {\n      where: _objectSpread(_objectSpread({}, filters), {}, {\n        author_id: authorId\n      })\n    };\n\n    if (session !== null && session !== void 0 && session.user.permissions) {\n      //  Author should not see others posts from admin panel\n      if (session.user.permissions.includes(Permissions.ManageOwnPosts)) {\n        conditions.where.author_id = session.user.id;\n      }\n    }\n\n    if (!(session !== null && session !== void 0 && session.user.id)) {\n      conditions.where.status = PostStatusOptions.Published;\n    }\n\n    if (args.filters.id) {\n      conditions.where.id = args.filters.id;\n    }\n\n    if (args.filters.slug) {\n      conditions.where.slug = args.filters.slug.split(\"/\").pop();\n    }\n\n    if (previewHash) {\n      conditions.where.id = Number(decrypt(previewHash));\n      delete conditions.where.status;\n    }\n\n    const post = await models.Post.findOne(conditions);\n\n    if (post) {\n      const html = previewHash ? getHtmlFromMarkdown(post.md_draft || post.md) : post.html;\n      return _objectSpread(_objectSpread({}, post.get()), {}, {\n        html,\n        __typename: \"Post\"\n      });\n    }\n\n    return _objectSpread(_objectSpread({}, error), {}, {\n      message: \"Post not found\"\n    });\n  },\n\n  async stats(_, _args, {\n    session\n  }) {\n    logger.debug(\"Reached resolver: stats\");\n    const result = {\n      posts: {\n        published: 0,\n        drafts: 0\n      },\n      pages: {\n        published: 0,\n        drafts: 0\n      },\n      tags: 0,\n      media: 0\n    };\n    const author_id = session === null || session === void 0 ? void 0 : session.user.id;\n\n    if (!author_id) {\n      return {\n        __typename: \"StatsError\",\n        message: \"Couldnt find author in session\"\n      };\n    }\n\n    const author = await models.Author.findOne({\n      where: {\n        id: author_id\n      }\n    });\n\n    if (!author) {\n      return {\n        __typename: \"StatsError\",\n        message: \"Couldnt find author\"\n      };\n    }\n\n    result.posts.published = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Published,\n        type: PostTypes.Post\n      }\n    });\n    result.posts.drafts = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Draft,\n        type: PostTypes.Post\n      }\n    });\n    result.pages.published = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Published,\n        type: PostTypes.Page\n      }\n    });\n    result.pages.drafts = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Draft,\n        type: PostTypes.Page\n      }\n    });\n    result.tags = await author.countTags();\n    result.media = await author.countMedia();\n    return _objectSpread({\n      __typename: \"Stats\"\n    }, result);\n  }\n\n};\nexport default {\n  Query,\n  Post\n};","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/resolvers/post.query.ts"],"names":["setResponsiveImages","Op","Permissions","PostStatusOptions","SortBy","PostTypes","decrypt","models","logger","debug","getHtmlFromMarkdown","addGalleryWrapper","Post","author","id","post","findOne","where","getAuthor","get","tags","getTags","map","tag","html","Query","posts","_parent","args","session","author_id","_info","authorId","user","__typename","message","query","conditions","order","Desc","include","sortBy","featured","status","ne","Trashed","type","limit","offset","filters","cursor","gt","page","eq","Published","tagSlug","Author","setting","getSetting","menu","slug","taxTag","Tags","split","pop","getPosts","rows","p","count","countPosts","name","findAll","e","error","previewHash","permissions","includes","ManageOwnPosts","Number","md_draft","md","stats","_","_args","result","published","drafts","pages","media","Draft","Page","countTags","countMedia"],"mappings":"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","sourcesContent":["import { setResponsiveImages } from \"./../utils/imageAttributs\";\nimport { PostAttributes } from \"../db/models/post\";\nimport { Op, Order } from \"sequelize\";\nimport {\n  Permissions,\n  PostFilters,\n  PostStatusOptions,\n  SortBy,\n  PostTypes,\n} from \"@/__generated__/type-defs.graphqls\";\nimport { QueryResolvers } from \"../type-defs.graphqls\";\nimport { ResolverContext } from \"../apollo\";\nimport { decrypt } from \"../utils/crypto\";\nimport models from \"../db/models\";\nimport logger from \"../../../shared/logger\";\nimport debug from \"debug\";\nimport { getHtmlFromMarkdown } from \"letterpad-editor/dist/mdToHtml\";\nimport { addGalleryWrapper } from \"../utils/addGalleryWrappr\";\n\ninterface IPostCondition {\n  conditions: {\n    order: Order;\n    include: any;\n    where: {\n      id?: number | {};\n      featured?: boolean;\n      status: { [Op.ne]: PostStatusOptions.Trashed };\n      type?: PostTypes;\n      author_id?: number;\n    };\n    limit: number;\n    offset?: number;\n    sortBy: \"ASC\" | \"DESC\";\n  };\n}\n\nconst Post = {\n  author: async ({ id }: PostAttributes) => {\n    const post = await models.Post.findOne({ where: { id: id } });\n    if (post) {\n      const author = await post.getAuthor();\n      return author.get();\n    }\n    return {};\n  },\n  tags: async ({ id }: PostAttributes) => {\n    const post = await models.Post.findOne({ where: { id: id } });\n    if (post) {\n      const tags = await post.getTags();\n      return tags.map(tag => tag.get());\n    }\n  },\n  html: async ({ html }) => {\n    return addGalleryWrapper(setResponsiveImages(html));\n  },\n};\n\nconst Query: QueryResolvers<ResolverContext> = {\n  /**\n   * Query to take care of multiple post in one page.\n   * Used for Search and Admin posts and pages list.\n   */\n  async posts(_parent, args, { session, author_id }, _info) {\n    debug(\"letterpad:post:update\")(\"Reached posts query\");\n    let authorId = session?.user.id || author_id;\n    if (!authorId) {\n      return { __typename: \"PostError\", message: \"Author Id not found\" };\n    }\n    const query: IPostCondition = {\n      conditions: {\n        order: [[\"publishedAt\", SortBy.Desc]],\n        include: [],\n        sortBy: \"DESC\",\n        where: {\n          id: 0,\n          featured: false,\n          status: { [Op.ne]: PostStatusOptions.Trashed },\n          type: PostTypes.Post,\n          author_id: authorId,\n        },\n        limit: 20,\n        offset: 0,\n      },\n    };\n    try {\n      // id\n      if (args?.filters?.id) {\n        query.conditions.where.id = args.filters.id;\n      } else {\n        delete query.conditions.where.id;\n      }\n\n      // pagination\n      if (args?.filters?.cursor) {\n        query.conditions.where.id = { [Op.gt]: args.filters.cursor };\n      }\n\n      if (args?.filters?.page) {\n        query.conditions.offset =\n          (args.filters.page - 1) * query.conditions.limit;\n      } else {\n        delete query.conditions.offset;\n      }\n\n      if (args?.filters?.limit) {\n        query.conditions.limit = args.filters.limit;\n      }\n\n      // resolve status type and filter\n      if (args?.filters?.featured) {\n        query.conditions.where.featured = args.filters.featured;\n      } else {\n        delete query.conditions.where.featured;\n      }\n\n      // resolve type\n      if (args?.filters?.type) {\n        query.conditions.where.type = args.filters.type;\n      }\n\n      // resolve status\n      if (args?.filters?.status) {\n        query.conditions.where.status = { [Op.eq]: args.filters.status } as any;\n      }\n\n      if (!session?.user.id) {\n        query.conditions.where.status = {\n          [Op.eq]: PostStatusOptions.Published,\n        } as any;\n      }\n\n      // sort\n      if (args?.filters?.sortBy) {\n        query.conditions.order = [[\"publishedAt\", args.filters.sortBy]];\n      }\n\n      if (session?.user.id && args?.filters?.sortBy) {\n        query.conditions.order = [[\"updatedAt\", args.filters.sortBy]];\n      }\n\n      // resolve menu filter\n      if (args?.filters?.tagSlug) {\n        let { tagSlug } = args.filters;\n        if (tagSlug === \"/\") {\n          // get the first menu item.\n          const author = await models.Author.findOne({\n            where: { id: authorId },\n          });\n          const setting = await author?.getSetting();\n\n          if (setting) {\n            tagSlug = setting.menu[0].slug;\n          }\n        }\n\n        const taxTag = await models.Tags.findOne({\n          where: {\n            slug: tagSlug.split(\"/\").pop() as string,\n            author_id: authorId,\n          },\n        });\n\n        if (taxTag) {\n          const posts = await taxTag.getPosts(query.conditions);\n          return {\n            __typename: \"PostsNode\",\n            rows: posts.map(p => p.get()),\n            count: await taxTag.countPosts(query.conditions),\n          };\n        }\n        return {\n          __typename: \"PostsNode\",\n          rows: [],\n          count: 0,\n        };\n      }\n\n      // resolve tag filter\n      if (args?.filters?.tag) {\n        const tag = await models.Tags.findOne({\n          where: { name: args.filters.tag, author_id },\n        });\n        if (tag) {\n          const posts = await tag.getPosts(query.conditions);\n          return {\n            rows: posts.map(p => p.get()),\n            count: await tag.countPosts(query.conditions),\n          };\n        } else {\n          return {\n            __typename: \"PostsNode\",\n            rows: [],\n            count: 0,\n          };\n        }\n      }\n\n      const posts = await models.Post.findAll(query.conditions);\n      const count = await models.Post.count(query.conditions);\n      debug(\"letterpad:post:update\")(query.conditions);\n\n      return {\n        __typename: \"PostsNode\",\n        rows: posts.map(post => post.get()),\n        count,\n      };\n    } catch (e) {\n      debug(\"letterpad:post:update\")(e);\n      return { __typename: \"PostError\", message: e.message };\n    }\n  },\n\n  async post(_parent, args, { session, author_id }, _info) {\n    const error = { __typename: \"PostError\", message: \"\" };\n    if (!args.filters) return { ...error, message: \"Missing arguments\" };\n\n    const authorId = session?.user.id || author_id;\n\n    if (!authorId) {\n      return { ...error, message: \"No author found for this post.\" };\n    }\n    const { previewHash, ...filters } = args.filters;\n    const conditions = {\n      where: { ...filters, author_id: authorId } as PostFilters & {\n        author_id?: number;\n      },\n    };\n    if (session?.user.permissions) {\n      //  Author should not see others posts from admin panel\n      if (session.user.permissions.includes(Permissions.ManageOwnPosts)) {\n        conditions.where.author_id = session.user.id;\n      }\n    }\n\n    if (!session?.user.id) {\n      conditions.where.status = PostStatusOptions.Published;\n    }\n\n    if (args.filters.id) {\n      conditions.where.id = args.filters.id;\n    }\n\n    if (args.filters.slug) {\n      conditions.where.slug = args.filters.slug.split(\"/\").pop();\n    }\n\n    if (previewHash) {\n      conditions.where.id = Number(decrypt(previewHash));\n      delete conditions.where.status;\n    }\n    const post = await models.Post.findOne(conditions);\n    if (post) {\n      const html = previewHash\n        ? getHtmlFromMarkdown(post.md_draft || post.md)\n        : post.html;\n\n      return { ...post.get(), html, __typename: \"Post\" };\n    }\n    return { ...error, message: \"Post not found\" };\n  },\n\n  async stats(_, _args, { session }) {\n    logger.debug(\"Reached resolver: stats\");\n    const result = {\n      posts: { published: 0, drafts: 0 },\n      pages: { published: 0, drafts: 0 },\n      tags: 0,\n      media: 0,\n    };\n    const author_id = session?.user.id;\n\n    if (!author_id) {\n      return {\n        __typename: \"StatsError\",\n        message: \"Couldnt find author in session\",\n      };\n    }\n\n    const author = await models.Author.findOne({ where: { id: author_id } });\n\n    if (!author) {\n      return {\n        __typename: \"StatsError\",\n        message: \"Couldnt find author\",\n      };\n    }\n\n    result.posts.published = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Published,\n        type: PostTypes.Post,\n      },\n    });\n\n    result.posts.drafts = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Draft,\n        type: PostTypes.Post,\n      },\n    });\n\n    result.pages.published = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Published,\n        type: PostTypes.Page,\n      },\n    });\n\n    result.pages.drafts = await author.countPosts({\n      where: {\n        status: PostStatusOptions.Draft,\n        type: PostTypes.Page,\n      },\n    });\n\n    result.tags = await author.countTags();\n\n    result.media = await author.countMedia();\n\n    return {\n      __typename: \"Stats\",\n      ...result,\n    };\n  },\n};\n\nexport default { Query, Post };\n"]},"metadata":{},"sourceType":"module"}