{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Role } from \"./role\";\nimport { Post } from \"./post\";\nimport { Model, DataTypes } from \"sequelize\";\nimport restoreSequelizeAttributesOnClass from \"./_tooling\";\nimport { Media } from \"./media\";\nimport { Setting } from \"./setting\";\nimport { Tags } from \"./tags\"; // These are all the attributes in the User model\n\nexport class Author extends Model {\n  // timestamps!\n  // Since TS cannot determine model association at compile time\n  // we have to declare them here purely virtually\n  // these will not exist until `Model.init` was called.\n  // Note the null assertions!\n  // Note the null assertions!\n  // You can also pre-declare possible inclusions, these will only be populated if you\n  // actively include a relation.\n  // Note this is optional since it's only populated when explicitly requested in code\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"email\", void 0);\n\n    _defineProperty(this, \"bio\", void 0);\n\n    _defineProperty(this, \"password\", void 0);\n\n    _defineProperty(this, \"avatar\", void 0);\n\n    _defineProperty(this, \"username\", void 0);\n\n    _defineProperty(this, \"verified\", void 0);\n\n    _defineProperty(this, \"social\", void 0);\n\n    _defineProperty(this, \"role\", void 0);\n\n    _defineProperty(this, \"permissions\", void 0);\n\n    _defineProperty(this, \"role_id\", void 0);\n\n    _defineProperty(this, \"setting_id\", void 0);\n\n    _defineProperty(this, \"createdAt\", void 0);\n\n    _defineProperty(this, \"updatedAt\", void 0);\n\n    _defineProperty(this, \"addPost\", void 0);\n\n    _defineProperty(this, \"createPost\", void 0);\n\n    _defineProperty(this, \"countPosts\", void 0);\n\n    _defineProperty(this, \"getPosts\", void 0);\n\n    _defineProperty(this, \"hasPost\", void 0);\n\n    _defineProperty(this, \"addMedia\", void 0);\n\n    _defineProperty(this, \"countMedia\", void 0);\n\n    _defineProperty(this, \"createMedia\", void 0);\n\n    _defineProperty(this, \"setMedia\", void 0);\n\n    _defineProperty(this, \"getMedia\", void 0);\n\n    _defineProperty(this, \"countTags\", void 0);\n\n    _defineProperty(this, \"createTag\", void 0);\n\n    _defineProperty(this, \"getTags\", void 0);\n\n    _defineProperty(this, \"hasTag\", void 0);\n\n    _defineProperty(this, \"setRole\", void 0);\n\n    _defineProperty(this, \"getRole\", void 0);\n\n    _defineProperty(this, \"createSetting\", void 0);\n\n    _defineProperty(this, \"getSetting\", void 0);\n\n    _defineProperty(this, \"setSetting\", void 0);\n\n    _defineProperty(this, \"posts\", void 0);\n\n    restoreSequelizeAttributesOnClass(new.target, this, [\"getPosts\", \"addPost\", \"hasPost\", \"countPosts\", \"countTags\", \"countMedia\", \"createMedia\", \"getMedia\", \"addMedia\", \"createPost\", \"setRole\", \"getRole\", \"setSetting\", \"getSetting\", \"createTag\", \"getTags\", \"hasTag\", \"createSetting\"]);\n  }\n\n}\n\n_defineProperty(Author, \"associations\", void 0);\n\nexport default function initAuthor(sequelize) {\n  Author.init({\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    name: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    username: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    email: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    password: {\n      type: new DataTypes.STRING(128),\n      allowNull: false\n    },\n    bio: {\n      type: new DataTypes.STRING(128),\n      allowNull: true\n    },\n    avatar: {\n      type: new DataTypes.STRING(256),\n      allowNull: true\n    },\n    social: {\n      type: DataTypes.JSON,\n      allowNull: true,\n      defaultValue: {}\n    },\n    verified: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: false\n    }\n  }, {\n    tableName: \"authors\",\n    sequelize // passing the `sequelize` instance is required\n\n  });\n  return Author;\n}\nexport function associateAuthor() {\n  Author.hasMany(Post, {\n    sourceKey: \"id\",\n    foreignKey: \"author_id\"\n  });\n  Author.belongsTo(Role, {\n    as: \"role\",\n    foreignKey: \"role_id\"\n  });\n  Author.belongsTo(Setting, {\n    as: \"setting\",\n    foreignKey: \"setting_id\"\n  });\n  Author.hasMany(Media, {\n    sourceKey: \"id\",\n    foreignKey: \"author_id\"\n  });\n  Author.hasMany(Tags, {\n    sourceKey: \"id\",\n    foreignKey: \"author_id\"\n  });\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/db/models/author.ts"],"names":["Role","Post","Model","DataTypes","restoreSequelizeAttributesOnClass","Media","Setting","Tags","Author","constructor","args","new","target","initAuthor","sequelize","init","id","type","INTEGER","autoIncrement","primaryKey","name","STRING","allowNull","username","email","password","bio","avatar","social","JSON","defaultValue","verified","BOOLEAN","tableName","associateAuthor","hasMany","sourceKey","foreignKey","belongsTo","as"],"mappings":"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","sourcesContent":["import { Role } from \"./role\";\nimport { Post } from \"./post\";\nimport {\n  Sequelize,\n  Model,\n  DataTypes,\n  HasManyGetAssociationsMixin,\n  HasManyAddAssociationMixin,\n  HasManyHasAssociationMixin,\n  Association,\n  HasManyCountAssociationsMixin,\n  HasManyCreateAssociationMixin,\n  Optional,\n  HasOneGetAssociationMixin,\n  HasOneSetAssociationMixin,\n} from \"sequelize\";\nimport restoreSequelizeAttributesOnClass from \"./_tooling\";\n\nimport { Media } from \"./media\";\nimport {\n  Role as QraphqlRole,\n  Permissions as GraqhqlPermissions,\n  Social,\n} from \"@/__generated__/type-defs.graphqls\";\nimport { Setting } from \"./setting\";\nimport { Tags } from \"./tags\";\n\n// These are all the attributes in the User model\nexport interface AuthorAttributes {\n  id: number;\n  name: string;\n  email: string;\n  bio: string;\n  password: string;\n  avatar: string;\n  social: Social;\n  verified: boolean;\n  username: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n  role_id?: number;\n  setting_id?: number;\n}\n\ninterface AuthorCreationAttributes extends Optional<AuthorAttributes, \"id\"> {}\n\nexport class Author\n  extends Model<AuthorAttributes, AuthorCreationAttributes>\n  implements AuthorAttributes\n{\n  public id!: number;\n  public name!: string;\n  public email!: string;\n  public bio!: string;\n  public password!: string;\n  public avatar!: string;\n  public username!: string;\n  public verified!: boolean;\n  public social!: Social;\n  public role!: QraphqlRole;\n  public permissions!: GraqhqlPermissions[];\n  public role_id!: number;\n  public setting_id!: number;\n\n  // timestamps!\n  public readonly createdAt!: Date;\n  public readonly updatedAt!: Date;\n\n  // Since TS cannot determine model association at compile time\n  // we have to declare them here purely virtually\n  // these will not exist until `Model.init` was called.\n  public addPost!: HasManyAddAssociationMixin<Post, number>;\n  public createPost!: HasManyCreateAssociationMixin<Post>;\n  public countPosts!: HasManyCountAssociationsMixin;\n  public getPosts!: HasManyGetAssociationsMixin<Post>; // Note the null assertions!\n  public hasPost!: HasManyHasAssociationMixin<Post, number>;\n\n  public addMedia!: HasManyAddAssociationMixin<Media, number>;\n  public countMedia!: HasManyCountAssociationsMixin;\n  public createMedia!: HasManyCreateAssociationMixin<Media>;\n  public setMedia!: HasOneSetAssociationMixin<Media, number>;\n  public getMedia!: HasManyGetAssociationsMixin<Media>; // Note the null assertions!\n\n  public countTags!: HasManyCountAssociationsMixin;\n  public createTag!: HasManyCreateAssociationMixin<Tags>;\n  public getTags!: HasManyGetAssociationsMixin<Tags>;\n  public hasTag!: HasManyHasAssociationMixin<Tags, number>;\n\n  public setRole!: HasOneSetAssociationMixin<Role, number>;\n  public getRole!: HasOneGetAssociationMixin<Role>;\n\n  public createSetting!: HasManyCreateAssociationMixin<Setting>;\n  public getSetting!: HasOneGetAssociationMixin<Setting>;\n  public setSetting!: HasOneSetAssociationMixin<Setting, number>;\n\n  // You can also pre-declare possible inclusions, these will only be populated if you\n  // actively include a relation.\n  public readonly posts?: Post[]; // Note this is optional since it's only populated when explicitly requested in code\n\n  public static associations: {\n    posts: Association<Author, Post>;\n  };\n\n  constructor(...args) {\n    super(...args);\n    restoreSequelizeAttributesOnClass(new.target, this, [\n      \"getPosts\",\n      \"addPost\",\n      \"hasPost\",\n      \"countPosts\",\n      \"countTags\",\n      \"countMedia\",\n      \"createMedia\",\n      \"getMedia\",\n      \"addMedia\",\n      \"createPost\",\n      \"setRole\",\n      \"getRole\",\n      \"setSetting\",\n      \"getSetting\",\n      \"createTag\",\n      \"getTags\",\n      \"hasTag\",\n      \"createSetting\",\n    ]);\n  }\n}\nexport default function initAuthor(sequelize: Sequelize) {\n  Author.init(\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      name: {\n        type: new DataTypes.STRING(128),\n        allowNull: false,\n      },\n      username: {\n        type: new DataTypes.STRING(128),\n        allowNull: false,\n      },\n      email: {\n        type: new DataTypes.STRING(128),\n        allowNull: false,\n      },\n      password: {\n        type: new DataTypes.STRING(128),\n        allowNull: false,\n      },\n      bio: {\n        type: new DataTypes.STRING(128),\n        allowNull: true,\n      },\n      avatar: {\n        type: new DataTypes.STRING(256),\n        allowNull: true,\n      },\n      social: {\n        type: DataTypes.JSON,\n        allowNull: true,\n        defaultValue: {},\n      },\n      verified: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n    },\n    {\n      tableName: \"authors\",\n      sequelize, // passing the `sequelize` instance is required\n    },\n  );\n\n  return Author;\n}\n\nexport function associateAuthor(): void {\n  Author.hasMany(Post, {\n    sourceKey: \"id\",\n    foreignKey: \"author_id\",\n  });\n\n  Author.belongsTo(Role, { as: \"role\", foreignKey: \"role_id\" });\n  Author.belongsTo(Setting, { as: \"setting\", foreignKey: \"setting_id\" });\n\n  Author.hasMany(Media, { sourceKey: \"id\", foreignKey: \"author_id\" });\n  Author.hasMany(Tags, { sourceKey: \"id\", foreignKey: \"author_id\" });\n}\n"]},"metadata":{},"sourceType":"module"}