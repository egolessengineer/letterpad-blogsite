{"ast":null,"code":"import { initializeApollo } from \"@/graphql/apollo\";\nimport { SettingsDocument } from \"@/__generated__/queries/queries.graphql\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nexport const getReadableDate = timestamp => {\n  return new Date(timestamp).toLocaleString(\"en-us\", {\n    month: \"long\",\n    year: \"numeric\",\n    day: \"numeric\"\n  });\n};\nexport const getDateTime = d => {\n  const m = d ? new Date(d) : new Date();\n  const dateString = m.getUTCFullYear() + \"-\" + (\"0\" + (m.getUTCMonth() + 1)).slice(-2) + \"-\" + (\"0\" + m.getUTCDate()).slice(-2) + \" \" + (\"0\" + m.getUTCHours()).slice(-2) + \":\" + (\"0\" + m.getUTCMinutes()).slice(-2) + \":\" + (\"0\" + m.getUTCSeconds()).slice(-2);\n  return dateString;\n};\nexport function debounce(func, timeout) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    return new Promise(resolve => {\n      timer = setTimeout(() => resolve(func(...args)), timeout);\n    });\n  };\n}\nexport function getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n}\nexport async function getSettings() {\n  const client = await initializeApollo();\n  return client.query({\n    query: SettingsDocument\n  });\n}\nexport function initPageProgress() {\n  NProgress.configure({\n    showSpinner: true\n  });\n  Router.events.on(\"routeChangeStart\", _url => {\n    NProgress.start();\n  });\n  Router.events.on(\"routeChangeComplete\", () => NProgress.done());\n  Router.events.on(\"routeChangeError\", () => NProgress.done());\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/shared/utils.ts"],"names":["initializeApollo","SettingsDocument","Router","NProgress","getReadableDate","timestamp","Date","toLocaleString","month","year","day","getDateTime","d","m","dateString","getUTCFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","debounce","func","timeout","timer","args","clearTimeout","Promise","resolve","setTimeout","getBase64","file","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","getSettings","client","query","initPageProgress","configure","showSpinner","events","on","_url","start","done"],"mappings":"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","sourcesContent":["import { initializeApollo } from \"@/graphql/apollo\";\nimport {\n  SettingsDocument,\n  SettingsQuery,\n  SettingsQueryVariables,\n} from \"@/__generated__/queries/queries.graphql\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\n\nexport const getReadableDate = (timestamp: Date) => {\n  return new Date(timestamp).toLocaleString(\"en-us\", {\n    month: \"long\",\n    year: \"numeric\",\n    day: \"numeric\",\n  });\n};\n\nexport const getDateTime = (d?: Date) => {\n  const m = d ? new Date(d) : new Date();\n\n  const dateString =\n    m.getUTCFullYear() +\n    \"-\" +\n    (\"0\" + (m.getUTCMonth() + 1)).slice(-2) +\n    \"-\" +\n    (\"0\" + m.getUTCDate()).slice(-2) +\n    \" \" +\n    (\"0\" + m.getUTCHours()).slice(-2) +\n    \":\" +\n    (\"0\" + m.getUTCMinutes()).slice(-2) +\n    \":\" +\n    (\"0\" + m.getUTCSeconds()).slice(-2);\n\n  return dateString;\n};\n\nexport function debounce<Params extends any[]>(\n  func: (...args: Params) => any,\n  timeout: number,\n): (...args: Params) => Promise<any> {\n  let timer: NodeJS.Timeout;\n\n  return (...args: Params) => {\n    clearTimeout(timer);\n    return new Promise(resolve => {\n      timer = setTimeout(() => resolve(func(...args)), timeout);\n    });\n  };\n}\n\nexport function getBase64(file: File) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nexport async function getSettings() {\n  const client = await initializeApollo();\n  return client.query<SettingsQuery, SettingsQueryVariables>({\n    query: SettingsDocument,\n  });\n}\n\nexport function initPageProgress() {\n  NProgress.configure({ showSpinner: true });\n  Router.events.on(\"routeChangeStart\", _url => {\n    NProgress.start();\n  });\n  Router.events.on(\"routeChangeComplete\", () => NProgress.done());\n  Router.events.on(\"routeChangeError\", () => NProgress.done());\n}\n"]},"metadata":{},"sourceType":"module"}