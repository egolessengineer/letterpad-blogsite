{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Unsplash.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScrollList from \"../InfiniteScrollList\";\nimport { Input } from \"antd\";\nimport nextConfig from \"next.config\";\n\nvar Unsplash = function Unsplash(_ref) {\n  _s();\n\n  var renderer = _ref.renderer;\n  var url = (nextConfig.basePath + \"/api/unsplash\").replace(\"//api\", \"\");\n\n  var _useState = useState(\"\"),\n      query = _useState[0],\n      setQuery = _useState[1];\n\n  var _useState2 = useState(1),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  var _useState3 = useState([]),\n      data = _useState3[0],\n      setData = _useState3[1];\n\n  var _useState4 = useState(0),\n      totalCount = _useState4[0],\n      setTotalCount = _useState4[1];\n\n  var fetchUnsplashMedia = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var endpoint, _yield$fetch$then, rows, count, images;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // unsplash.com/page/1/query/forest\n              endpoint = url + \"?page=\" + page + \"&query=\" + query;\n              _context.next = 3;\n              return fetch(endpoint).then(function (data) {\n                return data.json();\n              });\n\n            case 3:\n              _yield$fetch$then = _context.sent;\n              rows = _yield$fetch$then.rows;\n              count = _yield$fetch$then.count;\n              images = {\n                rows: rows.map(function (item) {\n                  return {\n                    id: item.id,\n                    url: item.urls.regular,\n                    description: \"Unsplash - \".concat(item.user.name, \" | \").concat(item.links.html),\n                    createdAt: item.created_at,\n                    width: item.width,\n                    height: item.height\n                  };\n                }),\n                count: count\n              };\n              setData([].concat(_toConsumableArray(data), _toConsumableArray(images.rows)));\n              setTotalCount(images.count);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchUnsplashMedia() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchUnsplashMedia();\n  }, [query, page]);\n\n  var onKeyUp = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var search;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              search = e.target.value.trim();\n\n              if (search.length > 0) {\n                if (e.keyCode === 13) {\n                  setQuery(search);\n                  setData([]);\n                }\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onKeyUp(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var loadMore = function loadMore() {\n    var nextPage = page + 1;\n    setPage(nextPage);\n  };\n\n  var jsxElements = renderer(data);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(Input, {\n    \"data-testid\": \"input-unsplash\",\n    onKeyUp: onKeyUp,\n    placeholder: \"Search free high resolution photos from Unsplash\",\n    autoFocus: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), __jsx(InfiniteScrollList, {\n    data: jsxElements,\n    count: totalCount,\n    loadMore: loadMore,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Unsplash, \"RcloiXZPQrj+aSLfSAFtj2eO7Fw=\");\n\n_c = Unsplash;\nexport default Unsplash;\n\nvar _c;\n\n$RefreshReg$(_c, \"Unsplash\");","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Unsplash.tsx"],"names":["React","useEffect","useState","InfiniteScrollList","Input","nextConfig","Unsplash","renderer","url","basePath","replace","query","setQuery","page","setPage","data","setData","totalCount","setTotalCount","fetchUnsplashMedia","endpoint","fetch","then","json","rows","count","images","map","item","id","urls","regular","description","user","name","links","html","createdAt","created_at","width","height","onKeyUp","e","search","target","value","trim","length","keyCode","loadMore","nextPage","jsxElements"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport InfiniteScrollList from \"../InfiniteScrollList\";\nimport { Media } from \"@/__generated__/type-defs.graphqls\";\nimport { Input } from \"antd\";\nimport nextConfig from \"next.config\";\n\ninterface IProps {\n  renderer: (items: Media[]) => JSX.Element[];\n}\nconst Unsplash: React.FC<IProps> = ({ renderer }) => {\n  const url = (nextConfig.basePath + \"/api/unsplash\").replace(\"//api\", \"\");\n  const [query, setQuery] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState<Media[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const fetchUnsplashMedia = async () => {\n    // unsplash.com/page/1/query/forest\n    const endpoint = url + \"?page=\" + page + \"&query=\" + query;\n\n    const { rows, count }: { rows: any; count: number } = await fetch(\n      endpoint,\n    ).then(data => {\n      return data.json();\n    });\n\n    const images = {\n      rows: rows.map(item => {\n        return {\n          id: item.id,\n          url: item.urls.regular,\n          description: `Unsplash - ${item.user.name} | ${item.links.html}`,\n          createdAt: item.created_at,\n          width: item.width,\n          height: item.height,\n        };\n      }),\n      count,\n    };\n\n    setData([...data, ...images.rows]);\n\n    setTotalCount(images.count);\n  };\n\n  useEffect(() => {\n    fetchUnsplashMedia();\n  }, [query, page]);\n\n  const onKeyUp = async e => {\n    const search = e.target.value.trim();\n    if (search.length > 0) {\n      if (e.keyCode === 13) {\n        setQuery(search);\n        setData([]);\n      }\n    }\n  };\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage);\n  };\n\n  const jsxElements = renderer(data);\n  return (\n    <div>\n      <Input\n        data-testid=\"input-unsplash\"\n        onKeyUp={onKeyUp}\n        placeholder=\"Search free high resolution photos from Unsplash\"\n        autoFocus\n      />\n      <InfiniteScrollList\n        data={jsxElements}\n        count={totalCount}\n        loadMore={loadMore}\n      />\n    </div>\n  );\n};\n\nexport default Unsplash;\n"]},"metadata":{},"sourceType":"module"}