{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/pages/posts.tsx\",\n    _s = $RefreshSig$();\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { PostsDocument, PostTypes } from \"@/__generated__/queries/queries.graphql\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport { Button, Layout, PageHeader, Table } from \"antd\";\nimport Filters from \"@/components/filters\";\nvar Content = Layout.Content;\nimport CustomLayout from \"@/components/layouts/Layout\";\nimport { useRouter } from \"next/router\";\nimport withAuthCheck from \"../hoc/withAuth\";\nimport { useEffect, useState } from \"react\";\nimport ErrorMessage from \"@/components/ErrorMessage\";\nimport Head from \"next/head\";\nimport { postsStyles } from \"@/components/posts.css\";\nimport { postsColumns } from \"@/components/posts\";\nimport { fetchTags } from \"./tags\";\n\nfunction Posts() {\n  _s();\n\n  var router = useRouter();\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState({}),\n      filters = _useState2[0],\n      setFilters = _useState2[1];\n\n  var _useState3 = useState([]),\n      allTags = _useState3[0],\n      setAllTags = _useState3[1];\n\n  var _useState4 = useState({\n    count: 0,\n    rows: []\n  }),\n      postsNode = _useState4[0],\n      setPostsNode = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      error = _useState5[0],\n      setError = _useState5[1];\n\n  useEffect(function () {\n    fetchPosts(filters);\n    fetchTags().then(function (response) {\n      if (!response.props.error) {\n        var uniqueData = _toConsumableArray(response.props.data.reduce(function (map, obj) {\n          return map.set(obj.slug, obj);\n        }, new Map()).values());\n\n        setAllTags(uniqueData.map(function (tag) {\n          return {\n            slug: tag.slug,\n            name: tag.name\n          };\n        }));\n      }\n    });\n  }, [JSON.stringify(filters)]);\n\n  var fetchPosts = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var args,\n          posts,\n          rows,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              args = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return fetchPostsFromAPI(args);\n\n            case 3:\n              posts = _context.sent;\n              setLoading(false);\n\n              if (posts.__typename === \"PostsNode\") {\n                rows = posts.rows.map(function (post) {\n                  return _objectSpread(_objectSpread({}, post), {}, {\n                    key: post.id\n                  });\n                });\n                setPostsNode(_objectSpread(_objectSpread({}, posts), {}, {\n                  rows: rows\n                }));\n              }\n\n              if (posts.__typename === \"PostError\") {\n                setError(posts.message);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchPosts() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (error) return __jsx(ErrorMessage, {\n    description: error,\n    title: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  });\n  var source = postsNode.__typename === \"PostsNode\" ? postsNode.rows : [];\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Posts\")), __jsx(PageHeader, {\n    className: \"site-page-header\",\n    title: \"Posts\",\n    extra: [__jsx(Button, {\n      key: \"1\",\n      type: \"primary\",\n      onClick: function onClick() {\n        return router.push(\"/api/create?type=\".concat(PostTypes.Post));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"New Post\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: 16,\n      minHeight: \"77vh\"\n    },\n    className: \"jsx-\".concat(postsStyles.__hash) + \" \" + \"site-layout-background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(Filters, {\n    onStatusChange: function onStatusChange(status) {\n      return setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n        status: status\n      }));\n    },\n    onOrderChange: function onOrderChange(sortBy) {\n      return setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n        sortBy: sortBy\n      }));\n    },\n    onTagChange: function onTagChange(tagSlug) {\n      return setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n        tagSlug: tagSlug\n      }));\n    },\n    allTags: allTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), __jsx(Table, {\n    columns: postsColumns,\n    dataSource: source,\n    loading: loading,\n    onRow: function onRow(row) {\n      return {\n        onClick: function onClick() {\n          return router.push(\"/post/\" + row.id);\n        }\n      };\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  })), __jsx(_JSXStyle, {\n    id: postsStyles.__hash,\n    __self: this,\n    __source: void 0\n  }, postsStyles)));\n}\n\n_s(Posts, \"ikkvJi7P5oJ+WVVTOI0WDWksOH8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Posts;\nvar PostsWithAuth = withAuthCheck(Posts);\n_c2 = PostsWithAuth;\nPostsWithAuth.layout = CustomLayout;\nexport default PostsWithAuth;\n\nfunction fetchPostsFromAPI(_x) {\n  return _fetchPostsFromAPI.apply(this, arguments);\n}\n\nfunction _fetchPostsFromAPI() {\n  _fetchPostsFromAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filters) {\n    var apolloClient, post;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return initializeApollo();\n\n          case 2:\n            apolloClient = _context2.sent;\n            _context2.next = 5;\n            return apolloClient.query({\n              query: PostsDocument,\n              variables: {\n                filters: _objectSpread({\n                  type: PostTypes.Post\n                }, filters)\n              },\n              fetchPolicy: \"network-only\"\n            });\n\n          case 5:\n            post = _context2.sent;\n            return _context2.abrupt(\"return\", post.data.posts);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchPostsFromAPI.apply(this, arguments);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"PostsWithAuth\");","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/pages/posts.tsx"],"names":["PostsDocument","PostTypes","initializeApollo","Button","Layout","PageHeader","Table","Filters","Content","CustomLayout","useRouter","withAuthCheck","useEffect","useState","ErrorMessage","Head","postsStyles","postsColumns","fetchTags","Posts","router","loading","setLoading","filters","setFilters","allTags","setAllTags","count","rows","postsNode","setPostsNode","error","setError","fetchPosts","then","response","props","uniqueData","data","reduce","map","obj","set","slug","Map","values","tag","name","JSON","stringify","args","fetchPostsFromAPI","posts","__typename","post","key","id","message","source","push","Post","padding","minHeight","status","sortBy","tagSlug","row","onClick","PostsWithAuth","layout","apolloClient","query","variables","type","fetchPolicy"],"mappings":"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","sourcesContent":["import {\n  PostsFilters,\n  PostsDocument,\n  PostsQuery,\n  PostsQueryVariables,\n  PostTypes,\n} from \"@/__generated__/queries/queries.graphql\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport { Button, Layout, PageHeader, Table } from \"antd\";\nimport Filters from \"@/components/filters\";\nconst { Content } = Layout;\nimport CustomLayout from \"@/components/layouts/Layout\";\nimport { useRouter } from \"next/router\";\nimport withAuthCheck from \"../hoc/withAuth\";\nimport { useEffect, useState } from \"react\";\nimport ErrorMessage from \"@/components/ErrorMessage\";\nimport Head from \"next/head\";\nimport { postsStyles } from \"@/components/posts.css\";\nimport { postsColumns } from \"@/components/posts\";\nimport { fetchTags } from \"./tags\";\n\nfunction Posts() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState<PostsFilters>({});\n  const [allTags, setAllTags] = useState<{ slug: string; name: string }[]>([]);\n  const [postsNode, setPostsNode] = useState<PostsQuery[\"posts\"]>({\n    count: 0,\n    rows: [],\n  });\n\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    fetchPosts(filters);\n    fetchTags().then(response => {\n      if (!response.props.error) {\n        const uniqueData = [\n          ...response.props.data\n            .reduce((map, obj) => map.set(obj.slug, obj), new Map())\n            .values(),\n        ];\n        setAllTags(\n          uniqueData.map(tag => ({\n            slug: tag.slug,\n            name: tag.name,\n          })),\n        );\n      }\n    });\n  }, [JSON.stringify(filters)]);\n\n  const fetchPosts = async (args = {}) => {\n    const posts = await fetchPostsFromAPI(args);\n    setLoading(false);\n    if (posts.__typename === \"PostsNode\") {\n      const rows = posts.rows.map(post => {\n        return {\n          ...post,\n          key: post.id,\n        };\n      });\n      setPostsNode({ ...posts, rows });\n    }\n\n    if (posts.__typename === \"PostError\") {\n      setError(posts.message);\n    }\n  };\n\n  if (error) return <ErrorMessage description={error} title=\"Error\" />;\n  const source = postsNode.__typename === \"PostsNode\" ? postsNode.rows : [];\n\n  return (\n    <>\n      <Head>\n        <title>Posts</title>\n      </Head>\n      <PageHeader\n        className=\"site-page-header\"\n        title=\"Posts\"\n        extra={[\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => router.push(`/api/create?type=${PostTypes.Post}`)}\n          >\n            New Post\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Content>\n        <div\n          className=\"site-layout-background\"\n          style={{ padding: 16, minHeight: \"77vh\" }}\n        >\n          <Filters\n            onStatusChange={status => setFilters({ ...filters, status })}\n            onOrderChange={sortBy => setFilters({ ...filters, sortBy })}\n            onTagChange={tagSlug => setFilters({ ...filters, tagSlug })}\n            allTags={allTags}\n          />\n          <Table\n            columns={postsColumns}\n            dataSource={source}\n            loading={loading}\n            onRow={row => ({\n              onClick: () => router.push(\"/post/\" + row.id),\n            })}\n          />\n        </div>\n        <style jsx>{postsStyles}</style>\n      </Content>\n    </>\n  );\n}\n\nconst PostsWithAuth = withAuthCheck(Posts);\nPostsWithAuth.layout = CustomLayout;\nexport default PostsWithAuth;\n\nasync function fetchPostsFromAPI(filters: PostsFilters) {\n  const apolloClient = await initializeApollo();\n\n  const post = await apolloClient.query<PostsQuery, PostsQueryVariables>({\n    query: PostsDocument,\n    variables: {\n      filters: {\n        type: PostTypes.Post,\n        ...filters,\n      },\n    },\n    fetchPolicy: \"network-only\",\n  });\n  return post.data.posts;\n}\n"]},"metadata":{},"sourceType":"module"}