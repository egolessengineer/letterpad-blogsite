{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Unsplash.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScrollList from \"../InfiniteScrollList\";\nimport { Input } from \"antd\";\nimport nextConfig from \"next.config\";\n\nconst Unsplash = ({\n  renderer\n}) => {\n  const url = (nextConfig.basePath + \"/api/unsplash\").replace(\"//api\", \"\");\n  const {\n    0: query,\n    1: setQuery\n  } = useState(\"\");\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: totalCount,\n    1: setTotalCount\n  } = useState(0);\n\n  const fetchUnsplashMedia = async () => {\n    // unsplash.com/page/1/query/forest\n    const endpoint = url + \"?page=\" + page + \"&query=\" + query;\n    const {\n      rows,\n      count\n    } = await fetch(endpoint).then(data => {\n      return data.json();\n    });\n    const images = {\n      rows: rows.map(item => {\n        return {\n          id: item.id,\n          url: item.urls.regular,\n          description: `Unsplash - ${item.user.name} | ${item.links.html}`,\n          createdAt: item.created_at,\n          width: item.width,\n          height: item.height\n        };\n      }),\n      count\n    };\n    setData([...data, ...images.rows]);\n    setTotalCount(images.count);\n  };\n\n  useEffect(() => {\n    fetchUnsplashMedia();\n  }, [query, page]);\n\n  const onKeyUp = async e => {\n    const search = e.target.value.trim();\n\n    if (search.length > 0) {\n      if (e.keyCode === 13) {\n        setQuery(search);\n        setData([]);\n      }\n    }\n  };\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage);\n  };\n\n  const jsxElements = renderer(data);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(Input, {\n    \"data-testid\": \"input-unsplash\",\n    onKeyUp: onKeyUp,\n    placeholder: \"Search free high resolution photos from Unsplash\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), __jsx(InfiniteScrollList, {\n    data: jsxElements,\n    count: totalCount,\n    loadMore: loadMore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Unsplash;","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Unsplash.tsx"],"names":["React","useEffect","useState","InfiniteScrollList","Input","nextConfig","Unsplash","renderer","url","basePath","replace","query","setQuery","page","setPage","data","setData","totalCount","setTotalCount","fetchUnsplashMedia","endpoint","rows","count","fetch","then","json","images","map","item","id","urls","regular","description","user","name","links","html","createdAt","created_at","width","height","onKeyUp","e","search","target","value","trim","length","keyCode","loadMore","nextPage","jsxElements"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport InfiniteScrollList from \"../InfiniteScrollList\";\nimport { Media } from \"@/__generated__/type-defs.graphqls\";\nimport { Input } from \"antd\";\nimport nextConfig from \"next.config\";\n\ninterface IProps {\n  renderer: (items: Media[]) => JSX.Element[];\n}\nconst Unsplash: React.FC<IProps> = ({ renderer }) => {\n  const url = (nextConfig.basePath + \"/api/unsplash\").replace(\"//api\", \"\");\n  const [query, setQuery] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState<Media[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const fetchUnsplashMedia = async () => {\n    // unsplash.com/page/1/query/forest\n    const endpoint = url + \"?page=\" + page + \"&query=\" + query;\n\n    const { rows, count }: { rows: any; count: number } = await fetch(\n      endpoint,\n    ).then(data => {\n      return data.json();\n    });\n\n    const images = {\n      rows: rows.map(item => {\n        return {\n          id: item.id,\n          url: item.urls.regular,\n          description: `Unsplash - ${item.user.name} | ${item.links.html}`,\n          createdAt: item.created_at,\n          width: item.width,\n          height: item.height,\n        };\n      }),\n      count,\n    };\n\n    setData([...data, ...images.rows]);\n\n    setTotalCount(images.count);\n  };\n\n  useEffect(() => {\n    fetchUnsplashMedia();\n  }, [query, page]);\n\n  const onKeyUp = async e => {\n    const search = e.target.value.trim();\n    if (search.length > 0) {\n      if (e.keyCode === 13) {\n        setQuery(search);\n        setData([]);\n      }\n    }\n  };\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage);\n  };\n\n  const jsxElements = renderer(data);\n  return (\n    <div>\n      <Input\n        data-testid=\"input-unsplash\"\n        onKeyUp={onKeyUp}\n        placeholder=\"Search free high resolution photos from Unsplash\"\n        autoFocus\n      />\n      <InfiniteScrollList\n        data={jsxElements}\n        count={totalCount}\n        loadMore={loadMore}\n      />\n    </div>\n  );\n};\n\nexport default Unsplash;\n"]},"metadata":{},"sourceType":"module"}