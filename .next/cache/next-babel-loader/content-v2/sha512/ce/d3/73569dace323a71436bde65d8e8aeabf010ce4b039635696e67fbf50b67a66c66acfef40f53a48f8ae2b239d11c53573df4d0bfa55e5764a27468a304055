{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport https from \"https\";\nimport cheerio from \"cheerio\";\nimport sizeOf from \"image-size\";\nimport logger from \"../../../shared/logger\";\n\nfunction toSlug(str) {\n  return str.toLowerCase().replace(/[^\\w\\s\\-]/g, \" \").split(\" \").filter(function (substr) {\n    return substr.length > 0;\n  }).join(\"-\");\n}\n\nexport async function slugify(PostModel, slug) {\n  slug = toSlug(slug);\n  const result = await PostModel.findOne({\n    where: {\n      slug: slug\n    }\n  });\n\n  if (result === null) {\n    return slug;\n  }\n\n  let count = 1;\n  slug += \"-\";\n\n  async function recursiveFindUniqueSlug() {\n    const result = await PostModel.findOne({\n      where: {\n        slug: slug + count\n      }\n    });\n\n    if (result === null) {\n      return slug + count;\n    }\n\n    count++;\n    return recursiveFindUniqueSlug();\n  }\n\n  return recursiveFindUniqueSlug();\n}\nexport const getReadableDate = timestamp => {\n  return new Date(timestamp).toLocaleString(\"en-us\", {\n    month: \"long\",\n    year: \"numeric\",\n    day: \"numeric\"\n  });\n};\nexport async function getImageDimensions(url) {\n  const actionToTry = () => new Promise((resolve, reject) => https.get(new URL(url), function (response) {\n    const chunks = [];\n    response.on(\"data\", function (chunk) {\n      chunks.push(chunk);\n    }).on(\"end\", async function () {\n      const buffer = Buffer.concat(chunks);\n      return resolve(sizeOf(buffer));\n    }).on(\"error\", function (err) {\n      return reject(err);\n    });\n  }));\n\n  const response = actionToTry();\n  return response;\n}\nexport const setImageWidthAndHeightInHtml = async html => {\n  const $ = cheerio.load(html, {\n    xmlMode: true\n  });\n  logger.debug(\"Setting image width and height inside html\");\n  const $bodyImages = $(\"img\");\n\n  for (let i = 0; i < $bodyImages.length; i++) {\n    const el = $bodyImages[i];\n    const $el = $(el);\n    $el.attr(\"loading\", \"lazy\");\n    let src = $el.attr(\"src\");\n    if (!src) return;\n    if (!src.startsWith(\"http\")) return;\n    logger.debug(\"Getting dimensions of \", src);\n    const size = await getImageDimensions(src); // src = src.replace(\"http://\", \"https://\");\n\n    $el.attr(\"height\", size.height.toString());\n    $el.attr(\"width\", size.width.toString());\n    logger.info(\"Image width x height\", _objectSpread({}, size));\n  }\n\n  return $.html();\n};\nexport async function validateCaptcha(serverKey, clientToken) {\n  const response = await fetch(`https://www.google.com/recaptcha/api/siteverify?secret=${serverKey}&response=${clientToken}`).then(res => res.json());\n\n  if (response.success) {\n    return true;\n  }\n\n  console.log(response);\n  return false;\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/resolvers/helpers.ts"],"names":["https","cheerio","sizeOf","logger","toSlug","str","toLowerCase","replace","split","filter","substr","length","join","slugify","PostModel","slug","result","findOne","where","count","recursiveFindUniqueSlug","getReadableDate","timestamp","Date","toLocaleString","month","year","day","getImageDimensions","url","actionToTry","Promise","resolve","reject","get","URL","response","chunks","on","chunk","push","buffer","Buffer","concat","err","setImageWidthAndHeightInHtml","html","$","load","xmlMode","debug","$bodyImages","i","el","$el","attr","src","startsWith","size","height","toString","width","info","validateCaptcha","serverKey","clientToken","fetch","then","res","json","success","console","log"],"mappings":"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","sourcesContent":["import https from \"https\";\nimport cheerio from \"cheerio\";\nimport sizeOf from \"image-size\";\nimport { ISizeCalculationResult } from \"image-size/dist/types/interface\";\nimport { Post as ModelPost } from \"../db/models/post\";\nimport logger from \"../../../shared/logger\";\n\nfunction toSlug(str: string): string {\n  return str\n    .toLowerCase()\n    .replace(/[^\\w\\s\\-]/g, \" \")\n    .split(\" \")\n    .filter(function (substr) {\n      return substr.length > 0;\n    })\n    .join(\"-\");\n}\n\nexport async function slugify(\n  PostModel: typeof ModelPost,\n  slug: string,\n): Promise<string> {\n  slug = toSlug(slug);\n  const result = await PostModel.findOne({ where: { slug: slug } });\n\n  if (result === null) {\n    return slug;\n  }\n  let count = 1;\n  slug += \"-\";\n\n  async function recursiveFindUniqueSlug() {\n    const result = await PostModel.findOne({ where: { slug: slug + count } });\n\n    if (result === null) {\n      return slug + count;\n    }\n    count++;\n    return recursiveFindUniqueSlug();\n  }\n\n  return recursiveFindUniqueSlug();\n}\n\nexport const getReadableDate = (timestamp: Date) => {\n  return new Date(timestamp).toLocaleString(\"en-us\", {\n    month: \"long\",\n    year: \"numeric\",\n    day: \"numeric\",\n  });\n};\n\nexport async function getImageDimensions(\n  url: string,\n): Promise<{ width: number; height: number; type: string }> {\n  const actionToTry = () =>\n    new Promise((resolve, reject) =>\n      https.get(new URL(url), function (response) {\n        const chunks: Uint8Array[] = [];\n        response\n          .on(\"data\", function (chunk: Uint8Array) {\n            chunks.push(chunk);\n          })\n          .on(\"end\", async function () {\n            const buffer = Buffer.concat(chunks);\n            return resolve(sizeOf(buffer));\n          })\n          .on(\"error\", function (err) {\n            return reject(err);\n          });\n      }),\n    ) as Promise<ISizeCalculationResult>;\n\n  const response = actionToTry();\n  return response as Promise<{ width: number; height: number; type: string }>;\n}\n\nexport const setImageWidthAndHeightInHtml = async (html: string) => {\n  const $ = cheerio.load(html, { xmlMode: true });\n  logger.debug(\"Setting image width and height inside html\");\n  const $bodyImages = $(\"img\");\n\n  for (let i = 0; i < $bodyImages.length; i++) {\n    const el = $bodyImages[i];\n    const $el = $(el);\n    $el.attr(\"loading\", \"lazy\");\n    let src = $el.attr(\"src\");\n    if (!src) return;\n    if (!src.startsWith(\"http\")) return;\n    logger.debug(\"Getting dimensions of \", src);\n    const size = await getImageDimensions(src);\n    // src = src.replace(\"http://\", \"https://\");\n    $el.attr(\"height\", size.height.toString());\n    $el.attr(\"width\", size.width.toString());\n    logger.info(\"Image width x height\", { ...size });\n  }\n  return $.html();\n};\n\ninterface ICaptchaResult {\n  success: boolean;\n  challenge_ts: string;\n  hostname: string;\n  score: number;\n  action: string;\n}\n\nexport async function validateCaptcha(serverKey: string, clientToken: string) {\n  const response: ICaptchaResult = await fetch(\n    `https://www.google.com/recaptcha/api/siteverify?secret=${serverKey}&response=${clientToken}`,\n  ).then(res => res.json());\n\n  if (response.success) {\n    return true;\n  }\n  console.log(response);\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}