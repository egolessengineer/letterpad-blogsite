{"ast":null,"code":"export const getImageAttrs = (src, sizes, srcSizes) => {\n  if (!src) return {};\n  if (!sizes) sizes = [480, 720, 960, 1200, 1440, 1600, 2000];\n  if (!srcSizes) srcSizes = `(max-width: 720px) 100vw, 720px`;\n  let base64Url = makeCloudinaryUrl(src, 30);\n\n  if (src.startsWith(\"/\")) {\n    return {\n      src,\n      loading: \"lazy\"\n    };\n  }\n\n  const url = new URL(src);\n\n  if (url.hostname.includes(\"cloudinary\")) {\n    const srcSet = sizes.map(w => makeCloudinaryImage(src, w)).join(\", \");\n    return {\n      src: makeCloudinaryUrl(src, sizes[sizes.length - 1]),\n      sizes: srcSizes,\n      \"data-srcset\": srcSet,\n      srcset: [base64Url],\n      width: \"100%\",\n      loading: \"lazy\",\n      class: \"lazyload\"\n    };\n  }\n\n  if (url.hostname.includes(\"unsplash\")) {\n    base64Url = makeUnsplashUrl(src, 30);\n    const srcSet = sizes.map(w => makeUnsplashImage(src, w)).join(\", \");\n    return {\n      src: makeUnsplashUrl(src, sizes[sizes.length - 1]),\n      sizes: srcSizes,\n      \"data-srcset\": srcSet,\n      srcset: [base64Url],\n      loading: \"lazy\",\n      class: \"lazyload\"\n    };\n  }\n\n  return {\n    src,\n    loading: \"lazy\"\n  };\n};\nexport const setResponsiveImages = (html, sizes) => {\n  if (!sizes) sizes = [480, 720, 960, 1200, 1440, 1600, 2000];\n  const re = /<img\\s+[^>]*src=\"([^\"]*)\"[^>]*>/g;\n  const htmlWithResponsiveImages = html.replace(re, (str, src) => {\n    const attrs = getImageAttrs(src, sizes);\n\n    if (Object.keys(attrs).length > 0) {\n      let attrString = \"\";\n      Object.keys(attrs).forEach(key => {\n        attrString += `${key}='${attrs[key]}' `;\n      });\n      return str.replace(`src=\"${src}\"`, attrString);\n    }\n\n    return str;\n  });\n  return htmlWithResponsiveImages;\n};\nexport function makeCloudinaryImage(src, width) {\n  return `${makeCloudinaryUrl(src, width)} ${width}w`;\n}\nexport function makeCloudinaryUrl(src, width) {\n  const replace = /image\\/upload\\/(.*)\\/blog-images/;\n  const url = src.replace(replace, `image/upload/q_auto,f_auto,w_${width}/v1/blog-images`);\n  return url;\n}\nexport function makeUnsplashImage(src, width, extras = \"\") {\n  return `${makeUnsplashUrl(src, width, extras)} ${width}w`;\n}\nexport function makeUnsplashUrl(src, width, extras = \"\") {\n  const url = new URL(src);\n  const baseUrl = `${url.protocol}//${url.hostname}${url.pathname}`;\n  return `${baseUrl}?w=${width}&auto=format&lossless=true${extras}`;\n}\nexport async function makeBase64Url(requestURL) {\n  const response = await fetch(requestURL); //@ts-ignore\n\n  const arrayBuffer = await response.buffer();\n  const b64 = arrayBuffer.toString(\"base64\");\n  return `data:${response.headers.get(\"content-type\")};base64,${b64}`;\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/utils/imageAttributs.ts"],"names":["getImageAttrs","src","sizes","srcSizes","base64Url","makeCloudinaryUrl","startsWith","loading","url","URL","hostname","includes","srcSet","map","w","makeCloudinaryImage","join","length","srcset","width","class","makeUnsplashUrl","makeUnsplashImage","setResponsiveImages","html","re","htmlWithResponsiveImages","replace","str","attrs","Object","keys","attrString","forEach","key","extras","baseUrl","protocol","pathname","makeBase64Url","requestURL","response","fetch","arrayBuffer","buffer","b64","toString","headers","get"],"mappings":"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","sourcesContent":["import { IImageAttrsResult } from \"../types\";\n\nexport const getImageAttrs = (\n  src: string,\n  sizes?: number[],\n  srcSizes?: string,\n): IImageAttrsResult => {\n  if (!src) return {};\n  if (!sizes) sizes = [480, 720, 960, 1200, 1440, 1600, 2000];\n  if (!srcSizes) srcSizes = `(max-width: 720px) 100vw, 720px`;\n  let base64Url = makeCloudinaryUrl(src, 30);\n  if (src.startsWith(\"/\")) {\n    return {\n      src,\n      loading: \"lazy\",\n    };\n  }\n  const url = new URL(src);\n\n  if (url.hostname.includes(\"cloudinary\")) {\n    const srcSet = sizes.map(w => makeCloudinaryImage(src, w)).join(\", \");\n    return {\n      src: makeCloudinaryUrl(src, sizes[sizes.length - 1]),\n      sizes: srcSizes,\n      \"data-srcset\": srcSet,\n      srcset: [base64Url],\n      width: \"100%\",\n      loading: \"lazy\",\n      class: \"lazyload\",\n    };\n  }\n\n  if (url.hostname.includes(\"unsplash\")) {\n    base64Url = makeUnsplashUrl(src, 30);\n    const srcSet = sizes.map(w => makeUnsplashImage(src, w)).join(\", \");\n    return {\n      src: makeUnsplashUrl(src, sizes[sizes.length - 1]),\n      sizes: srcSizes,\n      \"data-srcset\": srcSet,\n      srcset: [base64Url],\n      loading: \"lazy\",\n      class: \"lazyload\",\n    };\n  }\n  return {\n    src,\n    loading: \"lazy\",\n  };\n};\n\nexport const setResponsiveImages = (html: string, sizes?: number[]) => {\n  if (!sizes) sizes = [480, 720, 960, 1200, 1440, 1600, 2000];\n\n  const re = /<img\\s+[^>]*src=\"([^\"]*)\"[^>]*>/g;\n  const htmlWithResponsiveImages = html.replace(re, (str, src) => {\n    const attrs = getImageAttrs(src, sizes);\n    if (Object.keys(attrs).length > 0) {\n      let attrString = \"\";\n      Object.keys(attrs).forEach(key => {\n        attrString += `${key}='${attrs[key]}' `;\n      });\n      return str.replace(`src=\"${src}\"`, attrString);\n    }\n    return str;\n  });\n\n  return htmlWithResponsiveImages;\n};\n\nexport function makeCloudinaryImage(src: string, width: number) {\n  return `${makeCloudinaryUrl(src, width)} ${width}w`;\n}\n\nexport function makeCloudinaryUrl(src, width) {\n  const replace = /image\\/upload\\/(.*)\\/blog-images/;\n  const url = src.replace(\n    replace,\n    `image/upload/q_auto,f_auto,w_${width}/v1/blog-images`,\n  );\n\n  return url;\n}\n\nexport function makeUnsplashImage(src: string, width: number, extras = \"\") {\n  return `${makeUnsplashUrl(src, width, extras)} ${width}w`;\n}\n\nexport function makeUnsplashUrl(src: string, width: number, extras = \"\") {\n  const url = new URL(src);\n  const baseUrl = `${url.protocol}//${url.hostname}${url.pathname}`;\n  return `${baseUrl}?w=${width}&auto=format&lossless=true${extras}`;\n}\n\nexport async function makeBase64Url(requestURL: string) {\n  const response = await fetch(requestURL);\n  //@ts-ignore\n  const arrayBuffer = await response.buffer();\n  const b64 = arrayBuffer.toString(\"base64\");\n  return `data:${response.headers.get(\"content-type\")};base64,${b64}`;\n}\n"]},"metadata":{},"sourceType":"module"}