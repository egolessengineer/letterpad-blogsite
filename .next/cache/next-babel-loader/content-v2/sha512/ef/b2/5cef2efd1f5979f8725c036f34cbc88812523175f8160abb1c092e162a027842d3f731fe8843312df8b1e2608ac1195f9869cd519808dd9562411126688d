{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/ediitable-table/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Input, Form } from \"antd\";\nconst EditableContext = /*#__PURE__*/React.createContext(null);\nexport const EditableRow = (_ref) => {\n  let {\n    index\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"index\"]);\n\n  const [form] = Form.useForm();\n  return __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(EditableContext.Provider, {\n    value: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, __jsx(\"tr\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }))));\n};\nexport const EditableCell = (_ref2) => {\n  let {\n    title,\n    editable,\n    required,\n    children,\n    dataIndex,\n    record,\n    handleSave\n  } = _ref2,\n      restProps = _objectWithoutProperties(_ref2, [\"title\", \"editable\", \"required\", \"children\", \"dataIndex\", \"record\", \"handleSave\"]);\n\n  const {\n    0: editing,\n    1: setEditing\n  } = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave(_objectSpread(_objectSpread({}, record), values));\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? __jsx(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: required,\n        message: `${title} is required.`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, __jsx(Input, {\n      ref: inputRef,\n      onPressEnter: save,\n      onBlur: save,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    })) : __jsx(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n  return __jsx(\"td\", _extends({}, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }), childNode);\n};","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/ediitable-table/index.tsx"],"names":["React","useContext","useState","useEffect","useRef","Input","Form","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","required","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","message","paddingRight"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Input, Form } from \"antd\";\nimport { FormInstance } from \"antd/lib/form\";\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\ninterface Item {\n  key: string;\n  name: string;\n  desc: string;\n  posts: number;\n}\n\ninterface EditableRowProps {\n  index: number;\n}\n\nexport const EditableRow: React.FC<EditableRowProps> = ({\n  index,\n  ...props\n}) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\ninterface EditableCellProps {\n  title: React.ReactNode;\n  editable: boolean;\n  required: boolean;\n  children: React.ReactNode;\n  dataIndex: keyof Item;\n  record: Item;\n  handleSave: (record: Item) => void;\n}\n\nexport const EditableCell: React.FC<EditableCellProps> = ({\n  title,\n  editable,\n  required,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef<Input>(null);\n  const form = useContext(EditableContext)!;\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current!.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log(\"Save failed:\", errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={[\n          {\n            required: required,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingRight: 24 }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n"]},"metadata":{},"sourceType":"module"}