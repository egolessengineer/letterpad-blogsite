{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* f033f674a27de695388de82c5a7f7fd5598118f2\n * This file is automatically generated by graphql-let. */\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport let PostStatusOptions;\n\n(function (PostStatusOptions) {\n  PostStatusOptions[\"Published\"] = \"published\";\n  PostStatusOptions[\"Draft\"] = \"draft\";\n  PostStatusOptions[\"Trashed\"] = \"trashed\";\n})(PostStatusOptions || (PostStatusOptions = {}));\n\nexport let PostTypes;\n\n(function (PostTypes) {\n  PostTypes[\"Post\"] = \"post\";\n  PostTypes[\"Page\"] = \"page\";\n})(PostTypes || (PostTypes = {}));\n\nexport let SortBy;\n\n(function (SortBy) {\n  SortBy[\"Asc\"] = \"ASC\";\n  SortBy[\"Desc\"] = \"DESC\";\n})(SortBy || (SortBy = {}));\n\nexport let NavigationType;\n\n(function (NavigationType) {\n  NavigationType[\"Tag\"] = \"tag\";\n  NavigationType[\"Page\"] = \"page\";\n  NavigationType[\"Custom\"] = \"custom\";\n})(NavigationType || (NavigationType = {}));\n\nexport let Role;\n\n(function (Role) {\n  Role[\"Admin\"] = \"ADMIN\";\n  Role[\"Reviewer\"] = \"REVIEWER\";\n  Role[\"Reader\"] = \"READER\";\n  Role[\"Author\"] = \"AUTHOR\";\n})(Role || (Role = {}));\n\nexport let Permissions;\n\n(function (Permissions) {\n  Permissions[\"ManageOwnPosts\"] = \"MANAGE_OWN_POSTS\";\n  Permissions[\"ReadOnlyPosts\"] = \"READ_ONLY_POSTS\";\n  Permissions[\"ManageAllPosts\"] = \"MANAGE_ALL_POSTS\";\n  Permissions[\"ManageUsers\"] = \"MANAGE_USERS\";\n  Permissions[\"ManageSettings\"] = \"MANAGE_SETTINGS\";\n})(Permissions || (Permissions = {}));\n\nexport const PartialFragmentDoc = gql`\n    fragment Partial on Post {\n  id\n  title\n  html\n  excerpt\n  featured\n  md\n  md_draft\n  type\n  slug\n  status\n  createdAt\n  publishedAt\n  scheduledAt\n  updatedAt\n  reading_time\n  cover_image {\n    src\n    width\n    height\n  }\n}\n    `;\nexport const TagDocument = gql`\n    query Tag($slug: String!) {\n  tag(slug: $slug) {\n    ... on Tags {\n      name\n      slug\n      desc\n    }\n    ... on TagResultError {\n      message\n    }\n  }\n}\n    `;\n/**\n * __useTagQuery__\n *\n * To run a query within a React component, call `useTagQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagQuery({\n *   variables: {\n *      slug: // value for 'slug'\n *   },\n * });\n */\n\nexport function useTagQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(TagDocument, options);\n}\nexport function useTagLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(TagDocument, options);\n}\nexport const PostDocument = gql`\n    query Post($filters: PostFilters) {\n  post(filters: $filters) {\n    ... on Post {\n      ...Partial\n      author {\n        id\n        name\n        avatar\n        social {\n          github\n          twitter\n          instagram\n        }\n        bio\n      }\n      tags {\n        id\n        name\n        desc\n        slug\n      }\n    }\n    ... on PostError {\n      message\n    }\n  }\n}\n    ${PartialFragmentDoc}`;\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      filters: // value for 'filters'\n *   },\n * });\n */\n\nexport function usePostQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(PostDocument, options);\n}\nexport function usePostLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(PostDocument, options);\n}\nexport const PostsDocument = gql`\n    query Posts($filters: PostsFilters) {\n  posts(filters: $filters) {\n    ... on PostsNode {\n      count\n      rows {\n        ...Partial\n        author {\n          name\n          social {\n            github\n            twitter\n            instagram\n          }\n          bio\n        }\n        tags {\n          id\n          name\n          desc\n          slug\n        }\n      }\n    }\n    ... on PostError {\n      message\n    }\n  }\n}\n    ${PartialFragmentDoc}`;\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filters: // value for 'filters'\n *   },\n * });\n */\n\nexport function usePostsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(PostsDocument, options);\n}\nexport function usePostsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(PostsDocument, options);\n}\nexport const MediaDocument = gql`\n    query Media($filters: MediaFilters) {\n  media(filters: $filters) {\n    count\n    rows {\n      id\n      url\n      authorId\n      createdAt\n      name\n      description\n      width\n      height\n    }\n  }\n}\n    `;\n/**\n * __useMediaQuery__\n *\n * To run a query within a React component, call `useMediaQuery` and pass it any options that fit your needs.\n * When your component renders, `useMediaQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMediaQuery({\n *   variables: {\n *      filters: // value for 'filters'\n *   },\n * });\n */\n\nexport function useMediaQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MediaDocument, options);\n}\nexport function useMediaLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MediaDocument, options);\n}\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ... on Author {\n      id\n      name\n      username\n      social {\n        github\n        twitter\n        instagram\n        facebook\n      }\n      email\n      bio\n      avatar\n    }\n    ... on AuthorNotFoundError {\n      message\n    }\n  }\n}\n    `;\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useMeQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(MeDocument, options);\n}\nexport function useMeLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(MeDocument, options);\n}\nexport const TagsDocument = gql`\n    query Tags {\n  tags {\n    ... on TagsNode {\n      rows {\n        name\n        id\n        desc\n        slug\n        posts {\n          ... on PostsNode {\n            count\n            rows {\n              id\n            }\n          }\n        }\n      }\n    }\n    ... on TagsError {\n      message\n    }\n  }\n}\n    `;\n/**\n * __useTagsQuery__\n *\n * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useTagsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(TagsDocument, options);\n}\nexport function useTagsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(TagsDocument, options);\n}\nexport const StatsDocument = gql`\n    query Stats {\n  stats {\n    ... on Stats {\n      posts {\n        published\n        drafts\n      }\n      pages {\n        published\n        drafts\n      }\n      tags\n      media\n    }\n    ... on StatsError {\n      message\n    }\n  }\n}\n    `;\n/**\n * __useStatsQuery__\n *\n * To run a query within a React component, call `useStatsQuery` and pass it any options that fit your needs.\n * When your component renders, `useStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStatsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useStatsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(StatsDocument, options);\n}\nexport function useStatsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(StatsDocument, options);\n}\nexport const SettingsDocument = gql`\n    query settings {\n  settings {\n    ... on Setting {\n      site_title\n      site_tagline\n      site_email\n      site_url\n      site_footer\n      site_description\n      subscribe_embed\n      social_twitter\n      social_facebook\n      social_instagram\n      social_github\n      displayAuthorInfo\n      cloudinary_key\n      cloudinary_name\n      cloudinary_secret\n      client_token\n      menu {\n        label\n        original_name\n        slug\n        type\n      }\n      css\n      google_analytics\n      theme\n      disqus_id\n      banner {\n        src\n        width\n        height\n      }\n      site_logo {\n        src\n        width\n        height\n      }\n      site_favicon {\n        src\n        width\n        height\n      }\n    }\n    ... on SettingError {\n      message\n    }\n  }\n}\n    `;\n/**\n * __useSettingsQuery__\n *\n * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSettingsQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useSettingsQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useQuery(SettingsDocument, options);\n}\nexport function useSettingsLazyQuery(baseOptions) {\n  const options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useLazyQuery(SettingsDocument, options);\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/__generated__/src/graphql/queries/queries.graphql.tsx"],"names":["gql","Apollo","defaultOptions","PostStatusOptions","PostTypes","SortBy","NavigationType","Role","Permissions","PartialFragmentDoc","TagDocument","useTagQuery","baseOptions","options","useQuery","useTagLazyQuery","useLazyQuery","PostDocument","usePostQuery","usePostLazyQuery","PostsDocument","usePostsQuery","usePostsLazyQuery","MediaDocument","useMediaQuery","useMediaLazyQuery","MeDocument","useMeQuery","useMeLazyQuery","TagsDocument","useTagsQuery","useTagsLazyQuery","StatsDocument","useStatsQuery","useStatsLazyQuery","SettingsDocument","useSettingsQuery","useSettingsLazyQuery"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAxBO;AA0BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8B,YAAT,CAAsBlB,WAAtB,EAA4F;AAC3F,QAAMC,OAAO,mCAAOX,cAAP,GAA0BU,WAA1B,CAAb;;AACA,SAAOX,MAAM,CAACa,QAAP,CAA+Ce,YAA/C,EAA6DhB,OAA7D,CAAP;AACD;AACP,OAAO,SAASkB,gBAAT,CAA0BnB,WAA1B,EAAoG;AACjG,QAAMC,OAAO,mCAAOX,cAAP,GAA0BU,WAA1B,CAAb;;AACA,SAAOX,MAAM,CAACe,YAAP,CAAmDa,YAAnD,EAAiEhB,OAAjE,CAAP;AACD;AAIT,OAAO,MAAMmB,aAAa,GAAGhC,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBO;AAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiC,aAAT,CAAuBrB,WAAvB,EAA+F;AAC9F,QAAMC,OAAO,mCAAOX,cAAP,GAA0BU,WAA1B,CAAb;;AACA,SAAOX,MAAM,CAACa,QAAP,CAAiDkB,aAAjD,EAAgEnB,OAAhE,CAAP;AACD;AACP,OAAO,SAASqB,iBAAT,CAA2BtB,WAA3B,EAAuG;AACpG,QAAMC,OAAO,mCAAOX,cAAP,GAA0BU,WAA1B,CAAb;;AACA,SAAOX,MAAM,CAACe,YAAP,CAAqDgB,aAArD,EAAoEnB,OAApE,CAAP;AACD;AAIT,OAAO,MAAMsB,gBAAgB,GAAGnC,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnDO;AAqDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoC,gBAAT,CAA0BxB,WAA1B,EAAwG;AACvG,QAAMC,OAAO,mCAAOX,cAAP,GAA0BU,WAA1B,CAAb;;AACA,SAAOX,MAAM,CAACa,QAAP,CAAuDqB,gBAAvD,EAAyEtB,OAAzE,CAAP;AACD;AACP,OAAO,SAASwB,oBAAT,CAA8BzB,WAA9B,EAAgH;AAC7G,QAAMC,OAAO,mCAAOX,cAAP,GAA0BU,WAA1B,CAAb;;AACA,SAAOX,MAAM,CAACe,YAAP,CAA2DmB,gBAA3D,EAA6EtB,OAA7E,CAAP;AACD","sourcesContent":["/* f033f674a27de695388de82c5a7f7fd5598118f2\n * This file is automatically generated by graphql-let. */\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport type Social = {\n  __typename?: 'Social';\n  twitter?: Maybe<Scalars['String']>;\n  facebook?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n};\n\nexport type Author = {\n  __typename?: 'Author';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  username: Scalars['String'];\n  name: Scalars['String'];\n  social?: Maybe<Social>;\n  bio: Scalars['String'];\n  role: Role;\n  permissions: Array<Permissions>;\n  avatar: Scalars['String'];\n  verified?: Maybe<Scalars['Boolean']>;\n  accessToken?: Maybe<Scalars['String']>;\n};\n\nexport type LoginData = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type InputSocial = {\n  twitter?: Maybe<Scalars['String']>;\n  facebook?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n};\n\nexport type InputAuthor = {\n  id: Scalars['Int'];\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  bio?: Maybe<Scalars['String']>;\n  social?: Maybe<InputSocial>;\n  password?: Maybe<Scalars['String']>;\n  roleId?: Maybe<Scalars['Int']>;\n  avatar?: Maybe<Scalars['String']>;\n};\n\nexport type InputCreateAuthor = {\n  email: Scalars['String'];\n  site_title: Scalars['String'];\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\nexport type AuthorResponse = {\n  __typename?: 'AuthorResponse';\n  ok: Scalars['Boolean'];\n  errors?: Maybe<Array<Error>>;\n  data?: Maybe<Author>;\n};\n\nexport type AuthorNotFoundError = LetterpadError & {\n  __typename?: 'AuthorNotFoundError';\n  message: Scalars['String'];\n};\n\nexport type CreateAuthorError = LetterpadError & {\n  __typename?: 'CreateAuthorError';\n  message: Scalars['String'];\n};\n\nexport type LoginError = LetterpadError & {\n  __typename?: 'LoginError';\n  message: Scalars['String'];\n};\n\nexport type MeResponse = Author | AuthorNotFoundError;\n\nexport type CreateAuthorResponse = Author | CreateAuthorError;\n\nexport type LoginResponse = Author | LoginError;\n\nexport type ForgotPasswordResponse = {\n  __typename?: 'ForgotPasswordResponse';\n  ok: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<MeResponse>;\n  media: MediaNode;\n  post: PostResponse;\n  posts: PostsResponse;\n  settings: SettingResponse;\n  stats?: Maybe<StatsResponse>;\n  tag: TagResponse;\n  tags: TagsResponse;\n};\n\n\nexport type QueryMediaArgs = {\n  filters?: Maybe<MediaFilters>;\n};\n\n\nexport type QueryPostArgs = {\n  filters?: Maybe<PostFilters>;\n};\n\n\nexport type QueryPostsArgs = {\n  filters?: Maybe<PostsFilters>;\n};\n\n\nexport type QueryTagArgs = {\n  slug: Scalars['String'];\n};\n\n\nexport type QueryTagsArgs = {\n  filters?: Maybe<TagsFilters>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAuthor?: Maybe<CreateAuthorResponse>;\n  createPost: CreatePostResponse;\n  deleteMedia?: Maybe<MediaDeleteResponse>;\n  deleteTags: DeleteTagsResponse;\n  forgotPassword: ForgotPasswordResponse;\n  login?: Maybe<LoginResponse>;\n  resetPassword: ForgotPasswordResponse;\n  updateAuthor?: Maybe<AuthorResponse>;\n  updateMedia?: Maybe<MediaUpdateResponse>;\n  updateOptions?: Maybe<Setting>;\n  updatePost: UpdatePostResponse;\n  updateTags: UpdateTagsResponse;\n};\n\n\nexport type MutationCreateAuthorArgs = {\n  data: InputCreateAuthor;\n};\n\n\nexport type MutationCreatePostArgs = {\n  data?: Maybe<InputCreatePost>;\n};\n\n\nexport type MutationDeleteMediaArgs = {\n  ids: Array<Scalars['Int']>;\n};\n\n\nexport type MutationDeleteTagsArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  data?: Maybe<LoginData>;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationUpdateAuthorArgs = {\n  author: InputAuthor;\n};\n\n\nexport type MutationUpdateMediaArgs = {\n  data: InputUpdateMedia;\n};\n\n\nexport type MutationUpdateOptionsArgs = {\n  options: Array<OptionInputType>;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  data?: Maybe<InputUpdatePost>;\n};\n\n\nexport type MutationUpdateTagsArgs = {\n  data?: Maybe<InputTags>;\n};\n\nexport type Media = {\n  __typename?: 'Media';\n  id: Scalars['Int'];\n  authorId?: Maybe<Scalars['Int']>;\n  url: Scalars['String'];\n  createdAt: Scalars['Date'];\n  name: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n  description: Scalars['String'];\n};\n\nexport type MediaNode = {\n  __typename?: 'MediaNode';\n  count: Scalars['Int'];\n  rows: Array<Media>;\n};\n\nexport type MediaDeleteResult = {\n  __typename?: 'MediaDeleteResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type MediaUpdateResult = {\n  __typename?: 'MediaUpdateResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type MediaFilters = {\n  id?: Maybe<Scalars['Int']>;\n  cursor?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  authorId?: Maybe<Scalars['Int']>;\n};\n\nexport type MediaError = LetterpadError & {\n  __typename?: 'MediaError';\n  message: Scalars['String'];\n};\n\nexport type InputUpdateMedia = {\n  id: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type MediaDeleteResponse = MediaDeleteResult | MediaError;\n\nexport type MediaUpdateResponse = MediaUpdateResult | MediaError;\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Int'];\n  title: Scalars['String'];\n  html: Scalars['String'];\n  md: Scalars['String'];\n  md_draft: Scalars['String'];\n  author: Author;\n  excerpt: Scalars['String'];\n  cover_image: Image;\n  type: PostTypes;\n  status: PostStatusOptions;\n  featured: Scalars['Boolean'];\n  slug: Scalars['String'];\n  createdAt: Scalars['Date'];\n  publishedAt: Scalars['Date'];\n  scheduledAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  reading_time: Scalars['String'];\n  tags: Array<Tags>;\n};\n\nexport enum PostStatusOptions {\n  Published = 'published',\n  Draft = 'draft',\n  Trashed = 'trashed'\n}\n\nexport type PostFilters = {\n  id?: Maybe<Scalars['Int']>;\n  slug?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  previewHash?: Maybe<Scalars['String']>;\n  status?: Maybe<PostStatusOptions>;\n  type?: Maybe<PostTypes>;\n};\n\nexport enum PostTypes {\n  Post = 'post',\n  Page = 'page'\n}\n\nexport enum SortBy {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type PostsFilters = {\n  id?: Maybe<Scalars['Int']>;\n  type?: Maybe<PostTypes>;\n  slug?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  previewHash?: Maybe<Scalars['String']>;\n  status?: Maybe<PostStatusOptions>;\n  author?: Maybe<Scalars['String']>;\n  tagSlug?: Maybe<Scalars['String']>;\n  tag?: Maybe<Scalars['String']>;\n  cursor?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  sortBy?: Maybe<SortBy>;\n};\n\nexport type PostsNode = {\n  __typename?: 'PostsNode';\n  count: Scalars['Int'];\n  rows: Array<Post>;\n};\n\nexport type PostCountsByStatus = {\n  __typename?: 'PostCountsByStatus';\n  published: Scalars['Int'];\n  drafts: Scalars['Int'];\n};\n\nexport type Stats = {\n  __typename?: 'Stats';\n  posts: PostCountsByStatus;\n  pages: PostCountsByStatus;\n  tags: Scalars['Int'];\n  media: Scalars['Int'];\n};\n\nexport type InputImage = {\n  height?: Maybe<Scalars['Int']>;\n  src: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n};\n\nexport type TagsInputType = {\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  desc: Scalars['String'];\n};\n\nexport type InputCreatePost = {\n  title?: Maybe<Scalars['String']>;\n  html?: Maybe<Scalars['String']>;\n  md?: Maybe<Scalars['String']>;\n  excerpt?: Maybe<Scalars['String']>;\n  cover_image?: Maybe<InputImage>;\n  type?: Maybe<PostTypes>;\n  featured?: Maybe<Scalars['Boolean']>;\n  status?: Maybe<PostStatusOptions>;\n  slug?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Maybe<TagsInputType>>>;\n};\n\nexport type InputUpdatePost = {\n  id: Scalars['Int'];\n  title?: Maybe<Scalars['String']>;\n  html?: Maybe<Scalars['String']>;\n  md?: Maybe<Scalars['String']>;\n  md_draft?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  excerpt?: Maybe<Scalars['String']>;\n  cover_image?: Maybe<InputImage>;\n  publishedAt?: Maybe<Scalars['Date']>;\n  scheduledAt?: Maybe<Scalars['Date']>;\n  updatedAt?: Maybe<Scalars['Date']>;\n  type?: Maybe<PostTypes>;\n  status?: Maybe<PostStatusOptions>;\n  slug?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<TagsInputType>>;\n};\n\nexport type PostError = LetterpadError & {\n  __typename?: 'PostError';\n  message: Scalars['String'];\n};\n\nexport type StatsError = LetterpadError & {\n  __typename?: 'StatsError';\n  message: Scalars['String'];\n};\n\nexport type PostResponse = Post | PostError;\n\nexport type PostsResponse = PostsNode | PostError;\n\nexport type CreatePostResponse = Post | PostError;\n\nexport type UpdatePostResponse = Post | PostError;\n\nexport type StatsResponse = Stats | StatsError;\n\nexport enum NavigationType {\n  Tag = 'tag',\n  Page = 'page',\n  Custom = 'custom'\n}\n\nexport type Navigation = {\n  __typename?: 'Navigation';\n  type: NavigationType;\n  slug: Scalars['String'];\n  original_name: Scalars['String'];\n  label: Scalars['String'];\n};\n\nexport type Setting = {\n  __typename?: 'Setting';\n  site_title: Scalars['String'];\n  site_tagline: Scalars['String'];\n  site_email: Scalars['String'];\n  site_url: Scalars['String'];\n  site_footer: Scalars['String'];\n  site_description: Scalars['String'];\n  subscribe_embed: Scalars['String'];\n  social_twitter: Scalars['String'];\n  social_facebook: Scalars['String'];\n  social_instagram: Scalars['String'];\n  social_github: Scalars['String'];\n  displayAuthorInfo: Scalars['Boolean'];\n  cloudinary_key: Scalars['String'];\n  cloudinary_name: Scalars['String'];\n  cloudinary_secret: Scalars['String'];\n  menu: Array<Navigation>;\n  css: Scalars['String'];\n  google_analytics: Scalars['String'];\n  theme: Scalars['String'];\n  disqus_id?: Maybe<Scalars['String']>;\n  banner: Image;\n  site_logo: Image;\n  site_favicon: Image;\n  client_token: Scalars['String'];\n};\n\nexport type InputNavigation = {\n  type?: Maybe<NavigationType>;\n  slug?: Maybe<Scalars['String']>;\n  original_name?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n};\n\nexport type OptionInputType = {\n  site_title?: Maybe<Scalars['String']>;\n  site_tagline?: Maybe<Scalars['String']>;\n  site_email?: Maybe<Scalars['String']>;\n  site_url?: Maybe<Scalars['String']>;\n  site_footer?: Maybe<Scalars['String']>;\n  site_description?: Maybe<Scalars['String']>;\n  subscribe_embed?: Maybe<Scalars['String']>;\n  social_twitter?: Maybe<Scalars['String']>;\n  social_facebook?: Maybe<Scalars['String']>;\n  social_instagram?: Maybe<Scalars['String']>;\n  social_github?: Maybe<Scalars['String']>;\n  displayAuthorInfo?: Maybe<Scalars['Boolean']>;\n  cloudinary_key?: Maybe<Scalars['String']>;\n  cloudinary_name?: Maybe<Scalars['String']>;\n  cloudinary_secret?: Maybe<Scalars['String']>;\n  menu?: Maybe<Array<InputNavigation>>;\n  css?: Maybe<Scalars['String']>;\n  google_analytics?: Maybe<Scalars['String']>;\n  theme?: Maybe<Scalars['String']>;\n  disqus_id?: Maybe<Scalars['String']>;\n  banner?: Maybe<InputImage>;\n  site_logo?: Maybe<InputImage>;\n  site_favicon?: Maybe<InputImage>;\n};\n\nexport type SettingError = LetterpadError & {\n  __typename?: 'SettingError';\n  message: Scalars['String'];\n};\n\nexport type SettingResponse = Setting | SettingError;\n\nexport type Tags = {\n  __typename?: 'Tags';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  desc?: Maybe<Scalars['String']>;\n  slug: Scalars['String'];\n  posts?: Maybe<PostsResponse>;\n};\n\nexport type TagsFilters = {\n  active?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type EditTaxResponse = {\n  __typename?: 'EditTaxResponse';\n  ok: Scalars['Boolean'];\n};\n\nexport type TagsError = LetterpadError & {\n  __typename?: 'TagsError';\n  message: Scalars['String'];\n};\n\nexport type DeleteTagsResult = {\n  __typename?: 'DeleteTagsResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type TagResultError = LetterpadError & {\n  __typename?: 'TagResultError';\n  message: Scalars['String'];\n};\n\nexport type UpdateTagsResponse = EditTaxResponse | TagsError;\n\nexport type DeleteTagsResponse = DeleteTagsResult | TagsError;\n\nexport type InputTags = {\n  id: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  desc?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n};\n\nexport type TagsNode = {\n  __typename?: 'TagsNode';\n  rows: Array<Tags>;\n};\n\nexport type TagsResponse = TagsNode | TagsError;\n\nexport type TagResponse = TagResultError | Tags;\n\n\nexport type Error = {\n  __typename?: 'Error';\n  path: Scalars['String'];\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type Response = {\n  __typename?: 'Response';\n  ok: Scalars['Boolean'];\n  post?: Maybe<Post>;\n  errors?: Maybe<Array<Error>>;\n};\n\nexport type Image = {\n  __typename?: 'Image';\n  src: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport enum Role {\n  Admin = 'ADMIN',\n  Reviewer = 'REVIEWER',\n  Reader = 'READER',\n  Author = 'AUTHOR'\n}\n\nexport enum Permissions {\n  ManageOwnPosts = 'MANAGE_OWN_POSTS',\n  ReadOnlyPosts = 'READ_ONLY_POSTS',\n  ManageAllPosts = 'MANAGE_ALL_POSTS',\n  ManageUsers = 'MANAGE_USERS',\n  ManageSettings = 'MANAGE_SETTINGS'\n}\n\nexport type LetterpadError = {\n  message: Scalars['String'];\n};\n\nexport type TagQueryVariables = Exact<{\n  slug: Scalars['String'];\n}>;\n\n\nexport type TagQuery = (\n  { __typename?: 'Query' }\n  & { tag: (\n    { __typename?: 'TagResultError' }\n    & Pick<TagResultError, 'message'>\n  ) | (\n    { __typename?: 'Tags' }\n    & Pick<Tags, 'name' | 'slug' | 'desc'>\n  ) }\n);\n\nexport type PostQueryVariables = Exact<{\n  filters?: Maybe<PostFilters>;\n}>;\n\n\nexport type PostQuery = (\n  { __typename?: 'Query' }\n  & { post: (\n    { __typename?: 'Post' }\n    & { author: (\n      { __typename?: 'Author' }\n      & Pick<Author, 'id' | 'name' | 'avatar' | 'bio'>\n      & { social?: Maybe<(\n        { __typename?: 'Social' }\n        & Pick<Social, 'github' | 'twitter' | 'instagram'>\n      )> }\n    ), tags: Array<(\n      { __typename?: 'Tags' }\n      & Pick<Tags, 'id' | 'name' | 'desc' | 'slug'>\n    )> }\n    & PartialFragment\n  ) | (\n    { __typename?: 'PostError' }\n    & Pick<PostError, 'message'>\n  ) }\n);\n\nexport type PartialFragment = (\n  { __typename?: 'Post' }\n  & Pick<Post, 'id' | 'title' | 'html' | 'excerpt' | 'featured' | 'md' | 'md_draft' | 'type' | 'slug' | 'status' | 'createdAt' | 'publishedAt' | 'scheduledAt' | 'updatedAt' | 'reading_time'>\n  & { cover_image: (\n    { __typename?: 'Image' }\n    & Pick<Image, 'src' | 'width' | 'height'>\n  ) }\n);\n\nexport type PostsQueryVariables = Exact<{\n  filters?: Maybe<PostsFilters>;\n}>;\n\n\nexport type PostsQuery = (\n  { __typename?: 'Query' }\n  & { posts: (\n    { __typename?: 'PostsNode' }\n    & Pick<PostsNode, 'count'>\n    & { rows: Array<(\n      { __typename?: 'Post' }\n      & { author: (\n        { __typename?: 'Author' }\n        & Pick<Author, 'name' | 'bio'>\n        & { social?: Maybe<(\n          { __typename?: 'Social' }\n          & Pick<Social, 'github' | 'twitter' | 'instagram'>\n        )> }\n      ), tags: Array<(\n        { __typename?: 'Tags' }\n        & Pick<Tags, 'id' | 'name' | 'desc' | 'slug'>\n      )> }\n      & PartialFragment\n    )> }\n  ) | (\n    { __typename?: 'PostError' }\n    & Pick<PostError, 'message'>\n  ) }\n);\n\nexport type MediaQueryVariables = Exact<{\n  filters?: Maybe<MediaFilters>;\n}>;\n\n\nexport type MediaQuery = (\n  { __typename?: 'Query' }\n  & { media: (\n    { __typename?: 'MediaNode' }\n    & Pick<MediaNode, 'count'>\n    & { rows: Array<(\n      { __typename?: 'Media' }\n      & Pick<Media, 'id' | 'url' | 'authorId' | 'createdAt' | 'name' | 'description' | 'width' | 'height'>\n    )> }\n  ) }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'Author' }\n    & Pick<Author, 'id' | 'name' | 'username' | 'email' | 'bio' | 'avatar'>\n    & { social?: Maybe<(\n      { __typename?: 'Social' }\n      & Pick<Social, 'github' | 'twitter' | 'instagram' | 'facebook'>\n    )> }\n  ) | (\n    { __typename?: 'AuthorNotFoundError' }\n    & Pick<AuthorNotFoundError, 'message'>\n  )> }\n);\n\nexport type TagsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TagsQuery = (\n  { __typename?: 'Query' }\n  & { tags: (\n    { __typename?: 'TagsNode' }\n    & { rows: Array<(\n      { __typename?: 'Tags' }\n      & Pick<Tags, 'name' | 'id' | 'desc' | 'slug'>\n      & { posts?: Maybe<(\n        { __typename?: 'PostsNode' }\n        & Pick<PostsNode, 'count'>\n        & { rows: Array<(\n          { __typename?: 'Post' }\n          & Pick<Post, 'id'>\n        )> }\n      ) | { __typename?: 'PostError' }> }\n    )> }\n  ) | (\n    { __typename?: 'TagsError' }\n    & Pick<TagsError, 'message'>\n  ) }\n);\n\nexport type StatsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type StatsQuery = (\n  { __typename?: 'Query' }\n  & { stats?: Maybe<(\n    { __typename?: 'Stats' }\n    & Pick<Stats, 'tags' | 'media'>\n    & { posts: (\n      { __typename?: 'PostCountsByStatus' }\n      & Pick<PostCountsByStatus, 'published' | 'drafts'>\n    ), pages: (\n      { __typename?: 'PostCountsByStatus' }\n      & Pick<PostCountsByStatus, 'published' | 'drafts'>\n    ) }\n  ) | (\n    { __typename?: 'StatsError' }\n    & Pick<StatsError, 'message'>\n  )> }\n);\n\nexport type SettingsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type SettingsQuery = (\n  { __typename?: 'Query' }\n  & { settings: (\n    { __typename?: 'Setting' }\n    & Pick<Setting, 'site_title' | 'site_tagline' | 'site_email' | 'site_url' | 'site_footer' | 'site_description' | 'subscribe_embed' | 'social_twitter' | 'social_facebook' | 'social_instagram' | 'social_github' | 'displayAuthorInfo' | 'cloudinary_key' | 'cloudinary_name' | 'cloudinary_secret' | 'client_token' | 'css' | 'google_analytics' | 'theme' | 'disqus_id'>\n    & { menu: Array<(\n      { __typename?: 'Navigation' }\n      & Pick<Navigation, 'label' | 'original_name' | 'slug' | 'type'>\n    )>, banner: (\n      { __typename?: 'Image' }\n      & Pick<Image, 'src' | 'width' | 'height'>\n    ), site_logo: (\n      { __typename?: 'Image' }\n      & Pick<Image, 'src' | 'width' | 'height'>\n    ), site_favicon: (\n      { __typename?: 'Image' }\n      & Pick<Image, 'src' | 'width' | 'height'>\n    ) }\n  ) | (\n    { __typename?: 'SettingError' }\n    & Pick<SettingError, 'message'>\n  ) }\n);\n\nexport const PartialFragmentDoc = gql`\n    fragment Partial on Post {\n  id\n  title\n  html\n  excerpt\n  featured\n  md\n  md_draft\n  type\n  slug\n  status\n  createdAt\n  publishedAt\n  scheduledAt\n  updatedAt\n  reading_time\n  cover_image {\n    src\n    width\n    height\n  }\n}\n    `;\nexport const TagDocument = gql`\n    query Tag($slug: String!) {\n  tag(slug: $slug) {\n    ... on Tags {\n      name\n      slug\n      desc\n    }\n    ... on TagResultError {\n      message\n    }\n  }\n}\n    `;\n\n/**\n * __useTagQuery__\n *\n * To run a query within a React component, call `useTagQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagQuery({\n *   variables: {\n *      slug: // value for 'slug'\n *   },\n * });\n */\nexport function useTagQuery(baseOptions: Apollo.QueryHookOptions<TagQuery, TagQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TagQuery, TagQueryVariables>(TagDocument, options);\n      }\nexport function useTagLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagQuery, TagQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TagQuery, TagQueryVariables>(TagDocument, options);\n        }\nexport type TagQueryHookResult = ReturnType<typeof useTagQuery>;\nexport type TagLazyQueryHookResult = ReturnType<typeof useTagLazyQuery>;\nexport type TagQueryResult = Apollo.QueryResult<TagQuery, TagQueryVariables>;\nexport const PostDocument = gql`\n    query Post($filters: PostFilters) {\n  post(filters: $filters) {\n    ... on Post {\n      ...Partial\n      author {\n        id\n        name\n        avatar\n        social {\n          github\n          twitter\n          instagram\n        }\n        bio\n      }\n      tags {\n        id\n        name\n        desc\n        slug\n      }\n    }\n    ... on PostError {\n      message\n    }\n  }\n}\n    ${PartialFragmentDoc}`;\n\n/**\n * __usePostQuery__\n *\n * To run a query within a React component, call `usePostQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostQuery({\n *   variables: {\n *      filters: // value for 'filters'\n *   },\n * });\n */\nexport function usePostQuery(baseOptions?: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n      }\nexport function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, options);\n        }\nexport type PostQueryHookResult = ReturnType<typeof usePostQuery>;\nexport type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;\nexport type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;\nexport const PostsDocument = gql`\n    query Posts($filters: PostsFilters) {\n  posts(filters: $filters) {\n    ... on PostsNode {\n      count\n      rows {\n        ...Partial\n        author {\n          name\n          social {\n            github\n            twitter\n            instagram\n          }\n          bio\n        }\n        tags {\n          id\n          name\n          desc\n          slug\n        }\n      }\n    }\n    ... on PostError {\n      message\n    }\n  }\n}\n    ${PartialFragmentDoc}`;\n\n/**\n * __usePostsQuery__\n *\n * To run a query within a React component, call `usePostsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePostsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePostsQuery({\n *   variables: {\n *      filters: // value for 'filters'\n *   },\n * });\n */\nexport function usePostsQuery(baseOptions?: Apollo.QueryHookOptions<PostsQuery, PostsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n      }\nexport function usePostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostsQuery, PostsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PostsQuery, PostsQueryVariables>(PostsDocument, options);\n        }\nexport type PostsQueryHookResult = ReturnType<typeof usePostsQuery>;\nexport type PostsLazyQueryHookResult = ReturnType<typeof usePostsLazyQuery>;\nexport type PostsQueryResult = Apollo.QueryResult<PostsQuery, PostsQueryVariables>;\nexport const MediaDocument = gql`\n    query Media($filters: MediaFilters) {\n  media(filters: $filters) {\n    count\n    rows {\n      id\n      url\n      authorId\n      createdAt\n      name\n      description\n      width\n      height\n    }\n  }\n}\n    `;\n\n/**\n * __useMediaQuery__\n *\n * To run a query within a React component, call `useMediaQuery` and pass it any options that fit your needs.\n * When your component renders, `useMediaQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMediaQuery({\n *   variables: {\n *      filters: // value for 'filters'\n *   },\n * });\n */\nexport function useMediaQuery(baseOptions?: Apollo.QueryHookOptions<MediaQuery, MediaQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MediaQuery, MediaQueryVariables>(MediaDocument, options);\n      }\nexport function useMediaLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MediaQuery, MediaQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MediaQuery, MediaQueryVariables>(MediaDocument, options);\n        }\nexport type MediaQueryHookResult = ReturnType<typeof useMediaQuery>;\nexport type MediaLazyQueryHookResult = ReturnType<typeof useMediaLazyQuery>;\nexport type MediaQueryResult = Apollo.QueryResult<MediaQuery, MediaQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ... on Author {\n      id\n      name\n      username\n      social {\n        github\n        twitter\n        instagram\n        facebook\n      }\n      email\n      bio\n      avatar\n    }\n    ... on AuthorNotFoundError {\n      message\n    }\n  }\n}\n    `;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const TagsDocument = gql`\n    query Tags {\n  tags {\n    ... on TagsNode {\n      rows {\n        name\n        id\n        desc\n        slug\n        posts {\n          ... on PostsNode {\n            count\n            rows {\n              id\n            }\n          }\n        }\n      }\n    }\n    ... on TagsError {\n      message\n    }\n  }\n}\n    `;\n\n/**\n * __useTagsQuery__\n *\n * To run a query within a React component, call `useTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTagsQuery(baseOptions?: Apollo.QueryHookOptions<TagsQuery, TagsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TagsQuery, TagsQueryVariables>(TagsDocument, options);\n      }\nexport function useTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagsQuery, TagsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TagsQuery, TagsQueryVariables>(TagsDocument, options);\n        }\nexport type TagsQueryHookResult = ReturnType<typeof useTagsQuery>;\nexport type TagsLazyQueryHookResult = ReturnType<typeof useTagsLazyQuery>;\nexport type TagsQueryResult = Apollo.QueryResult<TagsQuery, TagsQueryVariables>;\nexport const StatsDocument = gql`\n    query Stats {\n  stats {\n    ... on Stats {\n      posts {\n        published\n        drafts\n      }\n      pages {\n        published\n        drafts\n      }\n      tags\n      media\n    }\n    ... on StatsError {\n      message\n    }\n  }\n}\n    `;\n\n/**\n * __useStatsQuery__\n *\n * To run a query within a React component, call `useStatsQuery` and pass it any options that fit your needs.\n * When your component renders, `useStatsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStatsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useStatsQuery(baseOptions?: Apollo.QueryHookOptions<StatsQuery, StatsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<StatsQuery, StatsQueryVariables>(StatsDocument, options);\n      }\nexport function useStatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StatsQuery, StatsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<StatsQuery, StatsQueryVariables>(StatsDocument, options);\n        }\nexport type StatsQueryHookResult = ReturnType<typeof useStatsQuery>;\nexport type StatsLazyQueryHookResult = ReturnType<typeof useStatsLazyQuery>;\nexport type StatsQueryResult = Apollo.QueryResult<StatsQuery, StatsQueryVariables>;\nexport const SettingsDocument = gql`\n    query settings {\n  settings {\n    ... on Setting {\n      site_title\n      site_tagline\n      site_email\n      site_url\n      site_footer\n      site_description\n      subscribe_embed\n      social_twitter\n      social_facebook\n      social_instagram\n      social_github\n      displayAuthorInfo\n      cloudinary_key\n      cloudinary_name\n      cloudinary_secret\n      client_token\n      menu {\n        label\n        original_name\n        slug\n        type\n      }\n      css\n      google_analytics\n      theme\n      disqus_id\n      banner {\n        src\n        width\n        height\n      }\n      site_logo {\n        src\n        width\n        height\n      }\n      site_favicon {\n        src\n        width\n        height\n      }\n    }\n    ... on SettingError {\n      message\n    }\n  }\n}\n    `;\n\n/**\n * __useSettingsQuery__\n *\n * To run a query within a React component, call `useSettingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useSettingsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSettingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useSettingsQuery(baseOptions?: Apollo.QueryHookOptions<SettingsQuery, SettingsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);\n      }\nexport function useSettingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SettingsQuery, SettingsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SettingsQuery, SettingsQueryVariables>(SettingsDocument, options);\n        }\nexport type SettingsQueryHookResult = ReturnType<typeof useSettingsQuery>;\nexport type SettingsLazyQueryHookResult = ReturnType<typeof useSettingsLazyQuery>;\nexport type SettingsQueryResult = Apollo.QueryResult<SettingsQuery, SettingsQueryVariables>;"]},"metadata":{},"sourceType":"module"}