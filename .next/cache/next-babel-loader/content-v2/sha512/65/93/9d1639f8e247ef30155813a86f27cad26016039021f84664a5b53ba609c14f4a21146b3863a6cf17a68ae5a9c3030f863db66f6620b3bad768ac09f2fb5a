{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/pages/posts.tsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PostsDocument, PostTypes } from \"@/__generated__/queries/queries.graphql\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport { Button, Layout, PageHeader, Table } from \"antd\";\nimport Filters from \"@/components/filters\";\nconst {\n  Content\n} = Layout;\nimport CustomLayout from \"@/components/layouts/Layout\";\nimport { useRouter } from \"next/router\";\nimport withAuthCheck from \"../hoc/withAuth\";\nimport { useEffect, useState } from \"react\";\nimport ErrorMessage from \"@/components/ErrorMessage\";\nimport Head from \"next/head\";\nimport { postsStyles } from \"@/components/posts.css\";\nimport { postsColumns } from \"@/components/posts\";\nimport { fetchTags } from \"./tags\";\n\nfunction Posts() {\n  const router = useRouter();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: filters,\n    1: setFilters\n  } = useState({});\n  const {\n    0: allTags,\n    1: setAllTags\n  } = useState([]);\n  const {\n    0: postsNode,\n    1: setPostsNode\n  } = useState({\n    count: 0,\n    rows: []\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState(\"\");\n  useEffect(() => {\n    fetchPosts(filters);\n    fetchTags().then(response => {\n      if (!response.props.error) {\n        const uniqueData = [...response.props.data.reduce((map, obj) => map.set(obj.slug, obj), new Map()).values()];\n        setAllTags(uniqueData.map(tag => ({\n          slug: tag.slug,\n          name: tag.name\n        })));\n      }\n    });\n  }, [JSON.stringify(filters)]);\n\n  const fetchPosts = async (args = {}) => {\n    const posts = await fetchPostsFromAPI(args);\n    setLoading(false);\n\n    if (posts.__typename === \"PostsNode\") {\n      const rows = posts.rows.map(post => {\n        return _objectSpread(_objectSpread({}, post), {}, {\n          key: post.id\n        });\n      });\n      setPostsNode(_objectSpread(_objectSpread({}, posts), {}, {\n        rows\n      }));\n    }\n\n    if (posts.__typename === \"PostError\") {\n      setError(posts.message);\n    }\n  };\n\n  if (error) return __jsx(ErrorMessage, {\n    description: error,\n    title: \"Error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  });\n  const source = postsNode.__typename === \"PostsNode\" ? postsNode.rows : [];\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Posts\")), __jsx(PageHeader, {\n    className: \"site-page-header\",\n    title: \"Posts\",\n    extra: [__jsx(Button, {\n      key: \"1\",\n      type: \"primary\",\n      onClick: () => router.push(`/api/create?type=${PostTypes.Post}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"New Post\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: 16,\n      minHeight: \"77vh\"\n    },\n    className: `jsx-${postsStyles.__hash}` + \" \" + \"site-layout-background\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, __jsx(Filters, {\n    onStatusChange: status => setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      status\n    })),\n    onOrderChange: sortBy => setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      sortBy\n    })),\n    onTagChange: tagSlug => setFilters(_objectSpread(_objectSpread({}, filters), {}, {\n      tagSlug\n    })),\n    allTags: allTags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), __jsx(Table, {\n    columns: postsColumns,\n    dataSource: source,\n    loading: loading,\n    onRow: row => ({\n      onClick: () => router.push(\"/post/\" + row.id)\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  })), __jsx(_JSXStyle, {\n    id: postsStyles.__hash,\n    __self: this,\n    __source: void 0\n  }, postsStyles)));\n}\n\nconst PostsWithAuth = withAuthCheck(Posts);\nPostsWithAuth.layout = CustomLayout;\nexport default PostsWithAuth;\n\nasync function fetchPostsFromAPI(filters) {\n  const apolloClient = await initializeApollo();\n  const post = await apolloClient.query({\n    query: PostsDocument,\n    variables: {\n      filters: _objectSpread({\n        type: PostTypes.Post\n      }, filters)\n    },\n    fetchPolicy: \"network-only\"\n  });\n  return post.data.posts;\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/pages/posts.tsx"],"names":["PostsDocument","PostTypes","initializeApollo","Button","Layout","PageHeader","Table","Filters","Content","CustomLayout","useRouter","withAuthCheck","useEffect","useState","ErrorMessage","Head","postsStyles","postsColumns","fetchTags","Posts","router","loading","setLoading","filters","setFilters","allTags","setAllTags","postsNode","setPostsNode","count","rows","error","setError","fetchPosts","then","response","props","uniqueData","data","reduce","map","obj","set","slug","Map","values","tag","name","JSON","stringify","args","posts","fetchPostsFromAPI","__typename","post","key","id","message","source","push","Post","padding","minHeight","status","sortBy","tagSlug","row","onClick","PostsWithAuth","layout","apolloClient","query","variables","type","fetchPolicy"],"mappings":";;;;;;;;;;;AAAA,SAEEA,aAFF,EAKEC,SALF,QAMO,yCANP;AAOA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,MAAlD;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcJ,MAApB;AACA,OAAOK,YAAP,MAAyB,6BAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,SAASC,KAAT,GAAiB;AACf,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACU,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAe,EAAf,CAAtC;AACA,QAAM;AAAA,OAACY,OAAD;AAAA,OAAUC;AAAV,MAAwBb,QAAQ,CAAmC,EAAnC,CAAtC;AACA,QAAM;AAAA,OAACc,SAAD;AAAA,OAAYC;AAAZ,MAA4Bf,QAAQ,CAAsB;AAC9DgB,IAAAA,KAAK,EAAE,CADuD;AAE9DC,IAAAA,IAAI,EAAE;AAFwD,GAAtB,CAA1C;AAKA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBnB,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,UAAU,CAACV,OAAD,CAAV;AACAL,IAAAA,SAAS,GAAGgB,IAAZ,CAAiBC,QAAQ,IAAI;AAC3B,UAAI,CAACA,QAAQ,CAACC,KAAT,CAAeL,KAApB,EAA2B;AACzB,cAAMM,UAAU,GAAG,CACjB,GAAGF,QAAQ,CAACC,KAAT,CAAeE,IAAf,CACAC,MADA,CACO,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,GAAJ,CAAQD,GAAG,CAACE,IAAZ,EAAkBF,GAAlB,CADrB,EAC6C,IAAIG,GAAJ,EAD7C,EAEAC,MAFA,EADc,CAAnB;AAKAnB,QAAAA,UAAU,CACRW,UAAU,CAACG,GAAX,CAAeM,GAAG,KAAK;AACrBH,UAAAA,IAAI,EAAEG,GAAG,CAACH,IADW;AAErBI,UAAAA,IAAI,EAAED,GAAG,CAACC;AAFW,SAAL,CAAlB,CADQ,CAAV;AAMD;AACF,KAdD;AAeD,GAjBQ,EAiBN,CAACC,IAAI,CAACC,SAAL,CAAe1B,OAAf,CAAD,CAjBM,CAAT;;AAmBA,QAAMU,UAAU,GAAG,OAAOiB,IAAI,GAAG,EAAd,KAAqB;AACtC,UAAMC,KAAK,GAAG,MAAMC,iBAAiB,CAACF,IAAD,CAArC;AACA5B,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAI6B,KAAK,CAACE,UAAN,KAAqB,WAAzB,EAAsC;AACpC,YAAMvB,IAAI,GAAGqB,KAAK,CAACrB,IAAN,CAAWU,GAAX,CAAec,IAAI,IAAI;AAClC,+CACKA,IADL;AAEEC,UAAAA,GAAG,EAAED,IAAI,CAACE;AAFZ;AAID,OALY,CAAb;AAMA5B,MAAAA,YAAY,iCAAMuB,KAAN;AAAarB,QAAAA;AAAb,SAAZ;AACD;;AAED,QAAIqB,KAAK,CAACE,UAAN,KAAqB,WAAzB,EAAsC;AACpCrB,MAAAA,QAAQ,CAACmB,KAAK,CAACM,OAAP,CAAR;AACD;AACF,GAhBD;;AAkBA,MAAI1B,KAAJ,EAAW,OAAO,MAAC,YAAD;AAAc,IAAA,WAAW,EAAEA,KAA3B;AAAkC,IAAA,KAAK,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACX,QAAM2B,MAAM,GAAG/B,SAAS,CAAC0B,UAAV,KAAyB,WAAzB,GAAuC1B,SAAS,CAACG,IAAjD,GAAwD,EAAvE;AAEA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,EAIE,MAAC,UAAD;AACE,IAAA,SAAS,EAAC,kBADZ;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,KAAK,EAAE,CACL,MAAC,MAAD;AACE,MAAA,GAAG,EAAC,GADN;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,OAAO,EAAE,MAAMV,MAAM,CAACuC,IAAP,CAAa,oBAAmB1D,SAAS,CAAC2D,IAAK,EAA/C,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADK,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAiBE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,EAAX;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAFT;AAAA,mDACY,wBADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,OAAD;AACE,IAAA,cAAc,EAAEC,MAAM,IAAIvC,UAAU,iCAAMD,OAAN;AAAewC,MAAAA;AAAf,OADtC;AAEE,IAAA,aAAa,EAAEC,MAAM,IAAIxC,UAAU,iCAAMD,OAAN;AAAeyC,MAAAA;AAAf,OAFrC;AAGE,IAAA,WAAW,EAAEC,OAAO,IAAIzC,UAAU,iCAAMD,OAAN;AAAe0C,MAAAA;AAAf,OAHpC;AAIE,IAAA,OAAO,EAAExC,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAUE,MAAC,KAAD;AACE,IAAA,OAAO,EAAER,YADX;AAEE,IAAA,UAAU,EAAEyC,MAFd;AAGE,IAAA,OAAO,EAAErC,OAHX;AAIE,IAAA,KAAK,EAAE6C,GAAG,KAAK;AACbC,MAAAA,OAAO,EAAE,MAAM/C,MAAM,CAACuC,IAAP,CAAY,WAAWO,GAAG,CAACV,EAA3B;AADF,KAAL,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAAA;AAAA;AAAA;AAAA,kBAjBF,CADF;AA0CD;;AAED,MAAMY,aAAa,GAAGzD,aAAa,CAACQ,KAAD,CAAnC;AACAiD,aAAa,CAACC,MAAd,GAAuB5D,YAAvB;AACA,eAAe2D,aAAf;;AAEA,eAAehB,iBAAf,CAAiC7B,OAAjC,EAAwD;AACtD,QAAM+C,YAAY,GAAG,MAAMpE,gBAAgB,EAA3C;AAEA,QAAMoD,IAAI,GAAG,MAAMgB,YAAY,CAACC,KAAb,CAAoD;AACrEA,IAAAA,KAAK,EAAEvE,aAD8D;AAErEwE,IAAAA,SAAS,EAAE;AACTjD,MAAAA,OAAO;AACLkD,QAAAA,IAAI,EAAExE,SAAS,CAAC2D;AADX,SAEFrC,OAFE;AADE,KAF0D;AAQrEmD,IAAAA,WAAW,EAAE;AARwD,GAApD,CAAnB;AAUA,SAAOpB,IAAI,CAAChB,IAAL,CAAUa,KAAjB;AACD","sourcesContent":["import {\n  PostsFilters,\n  PostsDocument,\n  PostsQuery,\n  PostsQueryVariables,\n  PostTypes,\n} from \"@/__generated__/queries/queries.graphql\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport { Button, Layout, PageHeader, Table } from \"antd\";\nimport Filters from \"@/components/filters\";\nconst { Content } = Layout;\nimport CustomLayout from \"@/components/layouts/Layout\";\nimport { useRouter } from \"next/router\";\nimport withAuthCheck from \"../hoc/withAuth\";\nimport { useEffect, useState } from \"react\";\nimport ErrorMessage from \"@/components/ErrorMessage\";\nimport Head from \"next/head\";\nimport { postsStyles } from \"@/components/posts.css\";\nimport { postsColumns } from \"@/components/posts\";\nimport { fetchTags } from \"./tags\";\n\nfunction Posts() {\n  const router = useRouter();\n  const [loading, setLoading] = useState(true);\n  const [filters, setFilters] = useState<PostsFilters>({});\n  const [allTags, setAllTags] = useState<{ slug: string; name: string }[]>([]);\n  const [postsNode, setPostsNode] = useState<PostsQuery[\"posts\"]>({\n    count: 0,\n    rows: [],\n  });\n\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    fetchPosts(filters);\n    fetchTags().then(response => {\n      if (!response.props.error) {\n        const uniqueData = [\n          ...response.props.data\n            .reduce((map, obj) => map.set(obj.slug, obj), new Map())\n            .values(),\n        ];\n        setAllTags(\n          uniqueData.map(tag => ({\n            slug: tag.slug,\n            name: tag.name,\n          })),\n        );\n      }\n    });\n  }, [JSON.stringify(filters)]);\n\n  const fetchPosts = async (args = {}) => {\n    const posts = await fetchPostsFromAPI(args);\n    setLoading(false);\n    if (posts.__typename === \"PostsNode\") {\n      const rows = posts.rows.map(post => {\n        return {\n          ...post,\n          key: post.id,\n        };\n      });\n      setPostsNode({ ...posts, rows });\n    }\n\n    if (posts.__typename === \"PostError\") {\n      setError(posts.message);\n    }\n  };\n\n  if (error) return <ErrorMessage description={error} title=\"Error\" />;\n  const source = postsNode.__typename === \"PostsNode\" ? postsNode.rows : [];\n\n  return (\n    <>\n      <Head>\n        <title>Posts</title>\n      </Head>\n      <PageHeader\n        className=\"site-page-header\"\n        title=\"Posts\"\n        extra={[\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => router.push(`/api/create?type=${PostTypes.Post}`)}\n          >\n            New Post\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Content>\n        <div\n          className=\"site-layout-background\"\n          style={{ padding: 16, minHeight: \"77vh\" }}\n        >\n          <Filters\n            onStatusChange={status => setFilters({ ...filters, status })}\n            onOrderChange={sortBy => setFilters({ ...filters, sortBy })}\n            onTagChange={tagSlug => setFilters({ ...filters, tagSlug })}\n            allTags={allTags}\n          />\n          <Table\n            columns={postsColumns}\n            dataSource={source}\n            loading={loading}\n            onRow={row => ({\n              onClick: () => router.push(\"/post/\" + row.id),\n            })}\n          />\n        </div>\n        <style jsx>{postsStyles}</style>\n      </Content>\n    </>\n  );\n}\n\nconst PostsWithAuth = withAuthCheck(Posts);\nPostsWithAuth.layout = CustomLayout;\nexport default PostsWithAuth;\n\nasync function fetchPostsFromAPI(filters: PostsFilters) {\n  const apolloClient = await initializeApollo();\n\n  const post = await apolloClient.query<PostsQuery, PostsQueryVariables>({\n    query: PostsDocument,\n    variables: {\n      filters: {\n        type: PostTypes.Post,\n        ...filters,\n      },\n    },\n    fetchPolicy: \"network-only\",\n  });\n  return post.data.posts;\n}\n"]},"metadata":{},"sourceType":"module"}