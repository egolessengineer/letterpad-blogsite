{"ast":null,"code":"/* ff6395356094a1bf6e44c50ff2af914342daf25a\n * This file is automatically generated by graphql-let. */\n\n/** All built-in and custom scalars, mapped to their actual values */\nexport var PostStatusOptions;\n\n(function (PostStatusOptions) {\n  PostStatusOptions[\"Published\"] = \"published\";\n  PostStatusOptions[\"Draft\"] = \"draft\";\n  PostStatusOptions[\"Trashed\"] = \"trashed\";\n})(PostStatusOptions || (PostStatusOptions = {}));\n\nexport var PostTypes;\n\n(function (PostTypes) {\n  PostTypes[\"Post\"] = \"post\";\n  PostTypes[\"Page\"] = \"page\";\n})(PostTypes || (PostTypes = {}));\n\nexport var SortBy;\n\n(function (SortBy) {\n  SortBy[\"Asc\"] = \"ASC\";\n  SortBy[\"Desc\"] = \"DESC\";\n})(SortBy || (SortBy = {}));\n\nexport var NavigationType;\n\n(function (NavigationType) {\n  NavigationType[\"Tag\"] = \"tag\";\n  NavigationType[\"Page\"] = \"page\";\n  NavigationType[\"Custom\"] = \"custom\";\n})(NavigationType || (NavigationType = {}));\n\nexport var Role;\n\n(function (Role) {\n  Role[\"Admin\"] = \"ADMIN\";\n  Role[\"Reviewer\"] = \"REVIEWER\";\n  Role[\"Reader\"] = \"READER\";\n  Role[\"Author\"] = \"AUTHOR\";\n})(Role || (Role = {}));\n\nexport var Permissions;\n\n(function (Permissions) {\n  Permissions[\"ManageOwnPosts\"] = \"MANAGE_OWN_POSTS\";\n  Permissions[\"ReadOnlyPosts\"] = \"READ_ONLY_POSTS\";\n  Permissions[\"ManageAllPosts\"] = \"MANAGE_ALL_POSTS\";\n  Permissions[\"ManageUsers\"] = \"MANAGE_USERS\";\n  Permissions[\"ManageSettings\"] = \"MANAGE_SETTINGS\";\n})(Permissions || (Permissions = {}));","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/__generated__/src/graphql/type-defs.graphqls.tsx"],"names":["PostStatusOptions","PostTypes","SortBy","NavigationType","Role","Permissions"],"mappings":"AAAA;AACA;;AASA;AA8RA,WAAYA,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAeZ,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAKZ,WAAYC,MAAZ;;WAAYA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,KAAAA,M;;AA0GZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AA6JZ,WAAYC,IAAZ;;WAAYA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;GAAAA,I,KAAAA,I;;AAOZ,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W","sourcesContent":["/* ff6395356094a1bf6e44c50ff2af914342daf25a\n * This file is automatically generated by graphql-let. */\n\nimport { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';\nexport type Maybe<T> = T;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\nexport type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport type Social = {\n  __typename?: 'Social';\n  twitter?: Maybe<Scalars['String']>;\n  facebook?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n};\n\nexport type Author = {\n  __typename?: 'Author';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  username: Scalars['String'];\n  name: Scalars['String'];\n  social?: Maybe<Social>;\n  bio: Scalars['String'];\n  role: Role;\n  permissions: Array<Permissions>;\n  avatar: Scalars['String'];\n  verified?: Maybe<Scalars['Boolean']>;\n  accessToken?: Maybe<Scalars['String']>;\n};\n\nexport type LoginData = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type InputSocial = {\n  twitter?: Maybe<Scalars['String']>;\n  facebook?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n};\n\nexport type InputAuthor = {\n  id: Scalars['Int'];\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  bio?: Maybe<Scalars['String']>;\n  social?: Maybe<InputSocial>;\n  password?: Maybe<Scalars['String']>;\n  roleId?: Maybe<Scalars['Int']>;\n  avatar?: Maybe<Scalars['String']>;\n};\n\nexport type InputCreateAuthor = {\n  email: Scalars['String'];\n  site_title: Scalars['String'];\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\nexport type AuthorResponse = {\n  __typename?: 'AuthorResponse';\n  ok: Scalars['Boolean'];\n  errors?: Maybe<Array<Error>>;\n  data?: Maybe<Author>;\n};\n\nexport type AuthorNotFoundError = LetterpadError & {\n  __typename?: 'AuthorNotFoundError';\n  message: Scalars['String'];\n};\n\nexport type CreateAuthorError = LetterpadError & {\n  __typename?: 'CreateAuthorError';\n  message: Scalars['String'];\n};\n\nexport type LoginError = LetterpadError & {\n  __typename?: 'LoginError';\n  message: Scalars['String'];\n};\n\nexport type MeResponse = Author | AuthorNotFoundError;\n\nexport type CreateAuthorResponse = Author | CreateAuthorError;\n\nexport type LoginResponse = Author | LoginError;\n\nexport type ForgotPasswordResponse = {\n  __typename?: 'ForgotPasswordResponse';\n  ok: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<MeResponse>;\n  media: MediaNode;\n  post: PostResponse;\n  posts: PostsResponse;\n  settings: SettingResponse;\n  stats?: Maybe<StatsResponse>;\n  tag: TagResponse;\n  tags: TagsResponse;\n};\n\n\nexport type QueryMediaArgs = {\n  filters?: Maybe<MediaFilters>;\n};\n\n\nexport type QueryPostArgs = {\n  filters?: Maybe<PostFilters>;\n};\n\n\nexport type QueryPostsArgs = {\n  filters?: Maybe<PostsFilters>;\n};\n\n\nexport type QueryTagArgs = {\n  slug: Scalars['String'];\n};\n\n\nexport type QueryTagsArgs = {\n  filters?: Maybe<TagsFilters>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAuthor?: Maybe<CreateAuthorResponse>;\n  createPost: CreatePostResponse;\n  deleteMedia?: Maybe<MediaDeleteResponse>;\n  deleteTags: DeleteTagsResponse;\n  forgotPassword: ForgotPasswordResponse;\n  login?: Maybe<LoginResponse>;\n  resetPassword: ForgotPasswordResponse;\n  updateAuthor?: Maybe<AuthorResponse>;\n  updateMedia?: Maybe<MediaUpdateResponse>;\n  updateOptions?: Maybe<Setting>;\n  updatePost: UpdatePostResponse;\n  updateTags: UpdateTagsResponse;\n};\n\n\nexport type MutationCreateAuthorArgs = {\n  data: InputCreateAuthor;\n};\n\n\nexport type MutationCreatePostArgs = {\n  data?: Maybe<InputCreatePost>;\n};\n\n\nexport type MutationDeleteMediaArgs = {\n  ids: Array<Scalars['Int']>;\n};\n\n\nexport type MutationDeleteTagsArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  data?: Maybe<LoginData>;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationUpdateAuthorArgs = {\n  author: InputAuthor;\n};\n\n\nexport type MutationUpdateMediaArgs = {\n  data: InputUpdateMedia;\n};\n\n\nexport type MutationUpdateOptionsArgs = {\n  options: Array<OptionInputType>;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  data?: Maybe<InputUpdatePost>;\n};\n\n\nexport type MutationUpdateTagsArgs = {\n  data?: Maybe<InputTags>;\n};\n\nexport type Media = {\n  __typename?: 'Media';\n  id: Scalars['Int'];\n  authorId?: Maybe<Scalars['Int']>;\n  url: Scalars['String'];\n  createdAt: Scalars['Date'];\n  name: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n  description: Scalars['String'];\n};\n\nexport type MediaNode = {\n  __typename?: 'MediaNode';\n  count: Scalars['Int'];\n  rows: Array<Media>;\n};\n\nexport type MediaDeleteResult = {\n  __typename?: 'MediaDeleteResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type MediaUpdateResult = {\n  __typename?: 'MediaUpdateResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type MediaFilters = {\n  id?: Maybe<Scalars['Int']>;\n  cursor?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  authorId?: Maybe<Scalars['Int']>;\n};\n\nexport type MediaError = LetterpadError & {\n  __typename?: 'MediaError';\n  message: Scalars['String'];\n};\n\nexport type InputUpdateMedia = {\n  id: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type MediaDeleteResponse = MediaDeleteResult | MediaError;\n\nexport type MediaUpdateResponse = MediaUpdateResult | MediaError;\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Int'];\n  title: Scalars['String'];\n  html: Scalars['String'];\n  md: Scalars['String'];\n  md_draft: Scalars['String'];\n  author: Author;\n  excerpt: Scalars['String'];\n  cover_image: Image;\n  type: PostTypes;\n  status: PostStatusOptions;\n  featured: Scalars['Boolean'];\n  slug: Scalars['String'];\n  createdAt: Scalars['Date'];\n  publishedAt: Scalars['Date'];\n  scheduledAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  reading_time: Scalars['String'];\n  tags: Array<Tags>;\n};\n\nexport enum PostStatusOptions {\n  Published = 'published',\n  Draft = 'draft',\n  Trashed = 'trashed'\n}\n\nexport type PostFilters = {\n  id?: Maybe<Scalars['Int']>;\n  slug?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  previewHash?: Maybe<Scalars['String']>;\n  status?: Maybe<PostStatusOptions>;\n  type?: Maybe<PostTypes>;\n};\n\nexport enum PostTypes {\n  Post = 'post',\n  Page = 'page'\n}\n\nexport enum SortBy {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type PostsFilters = {\n  id?: Maybe<Scalars['Int']>;\n  type?: Maybe<PostTypes>;\n  slug?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  previewHash?: Maybe<Scalars['String']>;\n  status?: Maybe<PostStatusOptions>;\n  author?: Maybe<Scalars['String']>;\n  tagSlug?: Maybe<Scalars['String']>;\n  tag?: Maybe<Scalars['String']>;\n  cursor?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  sortBy?: Maybe<SortBy>;\n};\n\nexport type PostsNode = {\n  __typename?: 'PostsNode';\n  count: Scalars['Int'];\n  rows: Array<Post>;\n};\n\nexport type PostCountsByStatus = {\n  __typename?: 'PostCountsByStatus';\n  published: Scalars['Int'];\n  drafts: Scalars['Int'];\n};\n\nexport type Stats = {\n  __typename?: 'Stats';\n  posts: PostCountsByStatus;\n  pages: PostCountsByStatus;\n  tags: Scalars['Int'];\n  media: Scalars['Int'];\n};\n\nexport type InputImage = {\n  height?: Maybe<Scalars['Int']>;\n  src: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n};\n\nexport type TagsInputType = {\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  desc: Scalars['String'];\n};\n\nexport type InputCreatePost = {\n  title?: Maybe<Scalars['String']>;\n  html?: Maybe<Scalars['String']>;\n  md?: Maybe<Scalars['String']>;\n  excerpt?: Maybe<Scalars['String']>;\n  cover_image?: Maybe<InputImage>;\n  type?: Maybe<PostTypes>;\n  featured?: Maybe<Scalars['Boolean']>;\n  status?: Maybe<PostStatusOptions>;\n  slug?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Maybe<TagsInputType>>>;\n};\n\nexport type InputUpdatePost = {\n  id: Scalars['Int'];\n  title?: Maybe<Scalars['String']>;\n  html?: Maybe<Scalars['String']>;\n  md?: Maybe<Scalars['String']>;\n  md_draft?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  excerpt?: Maybe<Scalars['String']>;\n  cover_image?: Maybe<InputImage>;\n  publishedAt?: Maybe<Scalars['Date']>;\n  scheduledAt?: Maybe<Scalars['Date']>;\n  updatedAt?: Maybe<Scalars['Date']>;\n  type?: Maybe<PostTypes>;\n  status?: Maybe<PostStatusOptions>;\n  slug?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<TagsInputType>>;\n};\n\nexport type PostError = LetterpadError & {\n  __typename?: 'PostError';\n  message: Scalars['String'];\n};\n\nexport type StatsError = LetterpadError & {\n  __typename?: 'StatsError';\n  message: Scalars['String'];\n};\n\nexport type PostResponse = Post | PostError;\n\nexport type PostsResponse = PostsNode | PostError;\n\nexport type CreatePostResponse = Post | PostError;\n\nexport type UpdatePostResponse = Post | PostError;\n\nexport type StatsResponse = Stats | StatsError;\n\nexport enum NavigationType {\n  Tag = 'tag',\n  Page = 'page',\n  Custom = 'custom'\n}\n\nexport type Navigation = {\n  __typename?: 'Navigation';\n  type: NavigationType;\n  slug: Scalars['String'];\n  original_name: Scalars['String'];\n  label: Scalars['String'];\n};\n\nexport type Setting = {\n  __typename?: 'Setting';\n  site_title: Scalars['String'];\n  site_tagline: Scalars['String'];\n  site_email: Scalars['String'];\n  site_url: Scalars['String'];\n  site_footer: Scalars['String'];\n  site_description: Scalars['String'];\n  subscribe_embed: Scalars['String'];\n  social_twitter: Scalars['String'];\n  social_facebook: Scalars['String'];\n  social_instagram: Scalars['String'];\n  social_github: Scalars['String'];\n  displayAuthorInfo: Scalars['Boolean'];\n  cloudinary_key: Scalars['String'];\n  cloudinary_name: Scalars['String'];\n  cloudinary_secret: Scalars['String'];\n  menu: Array<Navigation>;\n  css: Scalars['String'];\n  google_analytics: Scalars['String'];\n  theme: Scalars['String'];\n  disqus_id?: Maybe<Scalars['String']>;\n  banner: Image;\n  site_logo: Image;\n  site_favicon: Image;\n  client_token: Scalars['String'];\n};\n\nexport type InputNavigation = {\n  type?: Maybe<NavigationType>;\n  slug?: Maybe<Scalars['String']>;\n  original_name?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n};\n\nexport type OptionInputType = {\n  site_title?: Maybe<Scalars['String']>;\n  site_tagline?: Maybe<Scalars['String']>;\n  site_email?: Maybe<Scalars['String']>;\n  site_url?: Maybe<Scalars['String']>;\n  site_footer?: Maybe<Scalars['String']>;\n  site_description?: Maybe<Scalars['String']>;\n  subscribe_embed?: Maybe<Scalars['String']>;\n  social_twitter?: Maybe<Scalars['String']>;\n  social_facebook?: Maybe<Scalars['String']>;\n  social_instagram?: Maybe<Scalars['String']>;\n  social_github?: Maybe<Scalars['String']>;\n  displayAuthorInfo?: Maybe<Scalars['Boolean']>;\n  cloudinary_key?: Maybe<Scalars['String']>;\n  cloudinary_name?: Maybe<Scalars['String']>;\n  cloudinary_secret?: Maybe<Scalars['String']>;\n  menu?: Maybe<Array<InputNavigation>>;\n  css?: Maybe<Scalars['String']>;\n  google_analytics?: Maybe<Scalars['String']>;\n  theme?: Maybe<Scalars['String']>;\n  disqus_id?: Maybe<Scalars['String']>;\n  banner?: Maybe<InputImage>;\n  site_logo?: Maybe<InputImage>;\n  site_favicon?: Maybe<InputImage>;\n};\n\nexport type SettingError = LetterpadError & {\n  __typename?: 'SettingError';\n  message: Scalars['String'];\n};\n\nexport type SettingResponse = Setting | SettingError;\n\nexport type Tags = {\n  __typename?: 'Tags';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  desc?: Maybe<Scalars['String']>;\n  slug: Scalars['String'];\n  posts?: Maybe<PostsResponse>;\n};\n\nexport type TagsFilters = {\n  active?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type EditTaxResponse = {\n  __typename?: 'EditTaxResponse';\n  ok: Scalars['Boolean'];\n};\n\nexport type TagsError = LetterpadError & {\n  __typename?: 'TagsError';\n  message: Scalars['String'];\n};\n\nexport type DeleteTagsResult = {\n  __typename?: 'DeleteTagsResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type TagResultError = LetterpadError & {\n  __typename?: 'TagResultError';\n  message: Scalars['String'];\n};\n\nexport type UpdateTagsResponse = EditTaxResponse | TagsError;\n\nexport type DeleteTagsResponse = DeleteTagsResult | TagsError;\n\nexport type InputTags = {\n  id: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  desc?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n};\n\nexport type TagsNode = {\n  __typename?: 'TagsNode';\n  rows: Array<Tags>;\n};\n\nexport type TagsResponse = TagsNode | TagsError;\n\nexport type TagResponse = TagResultError | Tags;\n\n\nexport type Error = {\n  __typename?: 'Error';\n  path: Scalars['String'];\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type Response = {\n  __typename?: 'Response';\n  ok: Scalars['Boolean'];\n  post?: Maybe<Post>;\n  errors?: Maybe<Array<Error>>;\n};\n\nexport type Image = {\n  __typename?: 'Image';\n  src: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport enum Role {\n  Admin = 'ADMIN',\n  Reviewer = 'REVIEWER',\n  Reader = 'READER',\n  Author = 'AUTHOR'\n}\n\nexport enum Permissions {\n  ManageOwnPosts = 'MANAGE_OWN_POSTS',\n  ReadOnlyPosts = 'READ_ONLY_POSTS',\n  ManageAllPosts = 'MANAGE_ALL_POSTS',\n  ManageUsers = 'MANAGE_USERS',\n  ManageSettings = 'MANAGE_SETTINGS'\n}\n\nexport type LetterpadError = {\n  message: Scalars['String'];\n};\n\n\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\n\n\nexport type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  fragment: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\n\nexport type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  selectionSet: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\nexport type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =\n  | ResolverFn<TResult, TParent, TContext, TArgs>\n  | StitchingResolver<TResult, TParent, TContext, TArgs>;\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult;\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\nexport interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;\n  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\n}\n\nexport type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\n\nexport type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =\n  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\n\nexport type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;\n\nexport type NextResolverFn<T> = () => Promise<T>;\n\nexport type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n  Social: ResolverTypeWrapper<Social>;\n  String: ResolverTypeWrapper<Scalars['String']>;\n  Author: ResolverTypeWrapper<Author>;\n  Int: ResolverTypeWrapper<Scalars['Int']>;\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;\n  LoginData: LoginData;\n  InputSocial: InputSocial;\n  InputAuthor: InputAuthor;\n  InputCreateAuthor: InputCreateAuthor;\n  AuthorResponse: ResolverTypeWrapper<AuthorResponse>;\n  AuthorNotFoundError: ResolverTypeWrapper<AuthorNotFoundError>;\n  CreateAuthorError: ResolverTypeWrapper<CreateAuthorError>;\n  LoginError: ResolverTypeWrapper<LoginError>;\n  MeResponse: ResolversTypes['Author'] | ResolversTypes['AuthorNotFoundError'];\n  CreateAuthorResponse: ResolversTypes['Author'] | ResolversTypes['CreateAuthorError'];\n  LoginResponse: ResolversTypes['Author'] | ResolversTypes['LoginError'];\n  ForgotPasswordResponse: ResolverTypeWrapper<ForgotPasswordResponse>;\n  Query: ResolverTypeWrapper<{}>;\n  Mutation: ResolverTypeWrapper<{}>;\n  Media: ResolverTypeWrapper<Media>;\n  MediaNode: ResolverTypeWrapper<MediaNode>;\n  MediaDeleteResult: ResolverTypeWrapper<MediaDeleteResult>;\n  MediaUpdateResult: ResolverTypeWrapper<MediaUpdateResult>;\n  MediaFilters: MediaFilters;\n  MediaError: ResolverTypeWrapper<MediaError>;\n  InputUpdateMedia: InputUpdateMedia;\n  MediaDeleteResponse: ResolversTypes['MediaDeleteResult'] | ResolversTypes['MediaError'];\n  MediaUpdateResponse: ResolversTypes['MediaUpdateResult'] | ResolversTypes['MediaError'];\n  Post: ResolverTypeWrapper<Post>;\n  PostStatusOptions: PostStatusOptions;\n  PostFilters: PostFilters;\n  PostTypes: PostTypes;\n  SortBy: SortBy;\n  PostsFilters: PostsFilters;\n  PostsNode: ResolverTypeWrapper<PostsNode>;\n  PostCountsByStatus: ResolverTypeWrapper<PostCountsByStatus>;\n  Stats: ResolverTypeWrapper<Stats>;\n  InputImage: InputImage;\n  TagsInputType: TagsInputType;\n  InputCreatePost: InputCreatePost;\n  InputUpdatePost: InputUpdatePost;\n  PostError: ResolverTypeWrapper<PostError>;\n  StatsError: ResolverTypeWrapper<StatsError>;\n  PostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'];\n  PostsResponse: ResolversTypes['PostsNode'] | ResolversTypes['PostError'];\n  CreatePostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'];\n  UpdatePostResponse: ResolversTypes['Post'] | ResolversTypes['PostError'];\n  StatsResponse: ResolversTypes['Stats'] | ResolversTypes['StatsError'];\n  NavigationType: NavigationType;\n  Navigation: ResolverTypeWrapper<Navigation>;\n  Setting: ResolverTypeWrapper<Setting>;\n  InputNavigation: InputNavigation;\n  OptionInputType: OptionInputType;\n  SettingError: ResolverTypeWrapper<SettingError>;\n  SettingResponse: ResolversTypes['Setting'] | ResolversTypes['SettingError'];\n  Tags: ResolverTypeWrapper<Omit<Tags, 'posts'> & { posts?: Maybe<ResolversTypes['PostsResponse']> }>;\n  TagsFilters: TagsFilters;\n  EditTaxResponse: ResolverTypeWrapper<EditTaxResponse>;\n  TagsError: ResolverTypeWrapper<TagsError>;\n  DeleteTagsResult: ResolverTypeWrapper<DeleteTagsResult>;\n  TagResultError: ResolverTypeWrapper<TagResultError>;\n  UpdateTagsResponse: ResolversTypes['EditTaxResponse'] | ResolversTypes['TagsError'];\n  DeleteTagsResponse: ResolversTypes['DeleteTagsResult'] | ResolversTypes['TagsError'];\n  InputTags: InputTags;\n  TagsNode: ResolverTypeWrapper<TagsNode>;\n  TagsResponse: ResolversTypes['TagsNode'] | ResolversTypes['TagsError'];\n  TagResponse: ResolversTypes['TagResultError'] | ResolversTypes['Tags'];\n  Date: ResolverTypeWrapper<Scalars['Date']>;\n  Error: ResolverTypeWrapper<Error>;\n  Response: ResolverTypeWrapper<Response>;\n  Image: ResolverTypeWrapper<Image>;\n  Role: Role;\n  Permissions: Permissions;\n  LetterpadError: ResolversTypes['AuthorNotFoundError'] | ResolversTypes['CreateAuthorError'] | ResolversTypes['LoginError'] | ResolversTypes['MediaError'] | ResolversTypes['PostError'] | ResolversTypes['StatsError'] | ResolversTypes['SettingError'] | ResolversTypes['TagsError'] | ResolversTypes['TagResultError'];\n};\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n  Social: Social;\n  String: Scalars['String'];\n  Author: Author;\n  Int: Scalars['Int'];\n  Boolean: Scalars['Boolean'];\n  LoginData: LoginData;\n  InputSocial: InputSocial;\n  InputAuthor: InputAuthor;\n  InputCreateAuthor: InputCreateAuthor;\n  AuthorResponse: AuthorResponse;\n  AuthorNotFoundError: AuthorNotFoundError;\n  CreateAuthorError: CreateAuthorError;\n  LoginError: LoginError;\n  MeResponse: ResolversParentTypes['Author'] | ResolversParentTypes['AuthorNotFoundError'];\n  CreateAuthorResponse: ResolversParentTypes['Author'] | ResolversParentTypes['CreateAuthorError'];\n  LoginResponse: ResolversParentTypes['Author'] | ResolversParentTypes['LoginError'];\n  ForgotPasswordResponse: ForgotPasswordResponse;\n  Query: {};\n  Mutation: {};\n  Media: Media;\n  MediaNode: MediaNode;\n  MediaDeleteResult: MediaDeleteResult;\n  MediaUpdateResult: MediaUpdateResult;\n  MediaFilters: MediaFilters;\n  MediaError: MediaError;\n  InputUpdateMedia: InputUpdateMedia;\n  MediaDeleteResponse: ResolversParentTypes['MediaDeleteResult'] | ResolversParentTypes['MediaError'];\n  MediaUpdateResponse: ResolversParentTypes['MediaUpdateResult'] | ResolversParentTypes['MediaError'];\n  Post: Post;\n  PostFilters: PostFilters;\n  PostsFilters: PostsFilters;\n  PostsNode: PostsNode;\n  PostCountsByStatus: PostCountsByStatus;\n  Stats: Stats;\n  InputImage: InputImage;\n  TagsInputType: TagsInputType;\n  InputCreatePost: InputCreatePost;\n  InputUpdatePost: InputUpdatePost;\n  PostError: PostError;\n  StatsError: StatsError;\n  PostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'];\n  PostsResponse: ResolversParentTypes['PostsNode'] | ResolversParentTypes['PostError'];\n  CreatePostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'];\n  UpdatePostResponse: ResolversParentTypes['Post'] | ResolversParentTypes['PostError'];\n  StatsResponse: ResolversParentTypes['Stats'] | ResolversParentTypes['StatsError'];\n  Navigation: Navigation;\n  Setting: Setting;\n  InputNavigation: InputNavigation;\n  OptionInputType: OptionInputType;\n  SettingError: SettingError;\n  SettingResponse: ResolversParentTypes['Setting'] | ResolversParentTypes['SettingError'];\n  Tags: Omit<Tags, 'posts'> & { posts?: Maybe<ResolversParentTypes['PostsResponse']> };\n  TagsFilters: TagsFilters;\n  EditTaxResponse: EditTaxResponse;\n  TagsError: TagsError;\n  DeleteTagsResult: DeleteTagsResult;\n  TagResultError: TagResultError;\n  UpdateTagsResponse: ResolversParentTypes['EditTaxResponse'] | ResolversParentTypes['TagsError'];\n  DeleteTagsResponse: ResolversParentTypes['DeleteTagsResult'] | ResolversParentTypes['TagsError'];\n  InputTags: InputTags;\n  TagsNode: TagsNode;\n  TagsResponse: ResolversParentTypes['TagsNode'] | ResolversParentTypes['TagsError'];\n  TagResponse: ResolversParentTypes['TagResultError'] | ResolversParentTypes['Tags'];\n  Date: Scalars['Date'];\n  Error: Error;\n  Response: Response;\n  Image: Image;\n  LetterpadError: ResolversParentTypes['AuthorNotFoundError'] | ResolversParentTypes['CreateAuthorError'] | ResolversParentTypes['LoginError'] | ResolversParentTypes['MediaError'] | ResolversParentTypes['PostError'] | ResolversParentTypes['StatsError'] | ResolversParentTypes['SettingError'] | ResolversParentTypes['TagsError'] | ResolversParentTypes['TagResultError'];\n};\n\nexport type SocialResolvers<ContextType = any, ParentType extends ResolversParentTypes['Social'] = ResolversParentTypes['Social']> = {\n  twitter?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  facebook?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  github?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  instagram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type AuthorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Author'] = ResolversParentTypes['Author']> = {\n  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  username?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  social?: Resolver<Maybe<ResolversTypes['Social']>, ParentType, ContextType>;\n  bio?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  role?: Resolver<ResolversTypes['Role'], ParentType, ContextType>;\n  permissions?: Resolver<Array<ResolversTypes['Permissions']>, ParentType, ContextType>;\n  avatar?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  verified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;\n  accessToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type AuthorResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthorResponse'] = ResolversParentTypes['AuthorResponse']> = {\n  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  errors?: Resolver<Maybe<Array<ResolversTypes['Error']>>, ParentType, ContextType>;\n  data?: Resolver<Maybe<ResolversTypes['Author']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type AuthorNotFoundErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['AuthorNotFoundError'] = ResolversParentTypes['AuthorNotFoundError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type CreateAuthorErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateAuthorError'] = ResolversParentTypes['CreateAuthorError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type LoginErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['LoginError'] = ResolversParentTypes['LoginError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MeResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MeResponse'] = ResolversParentTypes['MeResponse']> = {\n  __resolveType: TypeResolveFn<'Author' | 'AuthorNotFoundError', ParentType, ContextType>;\n};\n\nexport type CreateAuthorResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateAuthorResponse'] = ResolversParentTypes['CreateAuthorResponse']> = {\n  __resolveType: TypeResolveFn<'Author' | 'CreateAuthorError', ParentType, ContextType>;\n};\n\nexport type LoginResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['LoginResponse'] = ResolversParentTypes['LoginResponse']> = {\n  __resolveType: TypeResolveFn<'Author' | 'LoginError', ParentType, ContextType>;\n};\n\nexport type ForgotPasswordResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ForgotPasswordResponse'] = ResolversParentTypes['ForgotPasswordResponse']> = {\n  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {\n  me?: Resolver<Maybe<ResolversTypes['MeResponse']>, ParentType, ContextType>;\n  media?: Resolver<ResolversTypes['MediaNode'], ParentType, ContextType, RequireFields<QueryMediaArgs, never>>;\n  post?: Resolver<ResolversTypes['PostResponse'], ParentType, ContextType, RequireFields<QueryPostArgs, never>>;\n  posts?: Resolver<ResolversTypes['PostsResponse'], ParentType, ContextType, RequireFields<QueryPostsArgs, never>>;\n  settings?: Resolver<ResolversTypes['SettingResponse'], ParentType, ContextType>;\n  stats?: Resolver<Maybe<ResolversTypes['StatsResponse']>, ParentType, ContextType>;\n  tag?: Resolver<ResolversTypes['TagResponse'], ParentType, ContextType, RequireFields<QueryTagArgs, 'slug'>>;\n  tags?: Resolver<ResolversTypes['TagsResponse'], ParentType, ContextType, RequireFields<QueryTagsArgs, never>>;\n};\n\nexport type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {\n  createAuthor?: Resolver<Maybe<ResolversTypes['CreateAuthorResponse']>, ParentType, ContextType, RequireFields<MutationCreateAuthorArgs, 'data'>>;\n  createPost?: Resolver<ResolversTypes['CreatePostResponse'], ParentType, ContextType, RequireFields<MutationCreatePostArgs, never>>;\n  deleteMedia?: Resolver<Maybe<ResolversTypes['MediaDeleteResponse']>, ParentType, ContextType, RequireFields<MutationDeleteMediaArgs, 'ids'>>;\n  deleteTags?: Resolver<ResolversTypes['DeleteTagsResponse'], ParentType, ContextType, RequireFields<MutationDeleteTagsArgs, 'id'>>;\n  forgotPassword?: Resolver<ResolversTypes['ForgotPasswordResponse'], ParentType, ContextType, RequireFields<MutationForgotPasswordArgs, 'email'>>;\n  login?: Resolver<Maybe<ResolversTypes['LoginResponse']>, ParentType, ContextType, RequireFields<MutationLoginArgs, never>>;\n  resetPassword?: Resolver<ResolversTypes['ForgotPasswordResponse'], ParentType, ContextType, RequireFields<MutationResetPasswordArgs, 'password' | 'token'>>;\n  updateAuthor?: Resolver<Maybe<ResolversTypes['AuthorResponse']>, ParentType, ContextType, RequireFields<MutationUpdateAuthorArgs, 'author'>>;\n  updateMedia?: Resolver<Maybe<ResolversTypes['MediaUpdateResponse']>, ParentType, ContextType, RequireFields<MutationUpdateMediaArgs, 'data'>>;\n  updateOptions?: Resolver<Maybe<ResolversTypes['Setting']>, ParentType, ContextType, RequireFields<MutationUpdateOptionsArgs, 'options'>>;\n  updatePost?: Resolver<ResolversTypes['UpdatePostResponse'], ParentType, ContextType, RequireFields<MutationUpdatePostArgs, never>>;\n  updateTags?: Resolver<ResolversTypes['UpdateTagsResponse'], ParentType, ContextType, RequireFields<MutationUpdateTagsArgs, never>>;\n};\n\nexport type MediaResolvers<ContextType = any, ParentType extends ResolversParentTypes['Media'] = ResolversParentTypes['Media']> = {\n  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  authorId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  width?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  height?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MediaNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaNode'] = ResolversParentTypes['MediaNode']> = {\n  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  rows?: Resolver<Array<ResolversTypes['Media']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MediaDeleteResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaDeleteResult'] = ResolversParentTypes['MediaDeleteResult']> = {\n  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MediaUpdateResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaUpdateResult'] = ResolversParentTypes['MediaUpdateResult']> = {\n  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MediaErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaError'] = ResolversParentTypes['MediaError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type MediaDeleteResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaDeleteResponse'] = ResolversParentTypes['MediaDeleteResponse']> = {\n  __resolveType: TypeResolveFn<'MediaDeleteResult' | 'MediaError', ParentType, ContextType>;\n};\n\nexport type MediaUpdateResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['MediaUpdateResponse'] = ResolversParentTypes['MediaUpdateResponse']> = {\n  __resolveType: TypeResolveFn<'MediaUpdateResult' | 'MediaError', ParentType, ContextType>;\n};\n\nexport type PostResolvers<ContextType = any, ParentType extends ResolversParentTypes['Post'] = ResolversParentTypes['Post']> = {\n  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  md?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  md_draft?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  author?: Resolver<ResolversTypes['Author'], ParentType, ContextType>;\n  excerpt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  cover_image?: Resolver<ResolversTypes['Image'], ParentType, ContextType>;\n  type?: Resolver<ResolversTypes['PostTypes'], ParentType, ContextType>;\n  status?: Resolver<ResolversTypes['PostStatusOptions'], ParentType, ContextType>;\n  featured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  publishedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  scheduledAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;\n  reading_time?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  tags?: Resolver<Array<ResolversTypes['Tags']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type PostsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsNode'] = ResolversParentTypes['PostsNode']> = {\n  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  rows?: Resolver<Array<ResolversTypes['Post']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type PostCountsByStatusResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostCountsByStatus'] = ResolversParentTypes['PostCountsByStatus']> = {\n  published?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  drafts?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type StatsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Stats'] = ResolversParentTypes['Stats']> = {\n  posts?: Resolver<ResolversTypes['PostCountsByStatus'], ParentType, ContextType>;\n  pages?: Resolver<ResolversTypes['PostCountsByStatus'], ParentType, ContextType>;\n  tags?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  media?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type PostErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostError'] = ResolversParentTypes['PostError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type StatsErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['StatsError'] = ResolversParentTypes['StatsError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type PostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostResponse'] = ResolversParentTypes['PostResponse']> = {\n  __resolveType: TypeResolveFn<'Post' | 'PostError', ParentType, ContextType>;\n};\n\nexport type PostsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostsResponse'] = ResolversParentTypes['PostsResponse']> = {\n  __resolveType: TypeResolveFn<'PostsNode' | 'PostError', ParentType, ContextType>;\n};\n\nexport type CreatePostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePostResponse'] = ResolversParentTypes['CreatePostResponse']> = {\n  __resolveType: TypeResolveFn<'Post' | 'PostError', ParentType, ContextType>;\n};\n\nexport type UpdatePostResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePostResponse'] = ResolversParentTypes['UpdatePostResponse']> = {\n  __resolveType: TypeResolveFn<'Post' | 'PostError', ParentType, ContextType>;\n};\n\nexport type StatsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['StatsResponse'] = ResolversParentTypes['StatsResponse']> = {\n  __resolveType: TypeResolveFn<'Stats' | 'StatsError', ParentType, ContextType>;\n};\n\nexport type NavigationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Navigation'] = ResolversParentTypes['Navigation']> = {\n  type?: Resolver<ResolversTypes['NavigationType'], ParentType, ContextType>;\n  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  original_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type SettingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Setting'] = ResolversParentTypes['Setting']> = {\n  site_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  site_tagline?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  site_email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  site_url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  site_footer?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  site_description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  subscribe_embed?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  social_twitter?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  social_facebook?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  social_instagram?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  social_github?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  displayAuthorInfo?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  cloudinary_key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  cloudinary_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  cloudinary_secret?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  menu?: Resolver<Array<ResolversTypes['Navigation']>, ParentType, ContextType>;\n  css?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  google_analytics?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  theme?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  disqus_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  banner?: Resolver<ResolversTypes['Image'], ParentType, ContextType>;\n  site_logo?: Resolver<ResolversTypes['Image'], ParentType, ContextType>;\n  site_favicon?: Resolver<ResolversTypes['Image'], ParentType, ContextType>;\n  client_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type SettingErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettingError'] = ResolversParentTypes['SettingError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type SettingResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['SettingResponse'] = ResolversParentTypes['SettingResponse']> = {\n  __resolveType: TypeResolveFn<'Setting' | 'SettingError', ParentType, ContextType>;\n};\n\nexport type TagsResolvers<ContextType = any, ParentType extends ResolversParentTypes['Tags'] = ResolversParentTypes['Tags']> = {\n  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  desc?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  posts?: Resolver<Maybe<ResolversTypes['PostsResponse']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type EditTaxResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['EditTaxResponse'] = ResolversParentTypes['EditTaxResponse']> = {\n  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type TagsErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsError'] = ResolversParentTypes['TagsError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type DeleteTagsResultResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTagsResult'] = ResolversParentTypes['DeleteTagsResult']> = {\n  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type TagResultErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagResultError'] = ResolversParentTypes['TagResultError']> = {\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type UpdateTagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTagsResponse'] = ResolversParentTypes['UpdateTagsResponse']> = {\n  __resolveType: TypeResolveFn<'EditTaxResponse' | 'TagsError', ParentType, ContextType>;\n};\n\nexport type DeleteTagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTagsResponse'] = ResolversParentTypes['DeleteTagsResponse']> = {\n  __resolveType: TypeResolveFn<'DeleteTagsResult' | 'TagsError', ParentType, ContextType>;\n};\n\nexport type TagsNodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsNode'] = ResolversParentTypes['TagsNode']> = {\n  rows?: Resolver<Array<ResolversTypes['Tags']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type TagsResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagsResponse'] = ResolversParentTypes['TagsResponse']> = {\n  __resolveType: TypeResolveFn<'TagsNode' | 'TagsError', ParentType, ContextType>;\n};\n\nexport type TagResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['TagResponse'] = ResolversParentTypes['TagResponse']> = {\n  __resolveType: TypeResolveFn<'TagResultError' | 'Tags', ParentType, ContextType>;\n};\n\nexport interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {\n  name: 'Date';\n}\n\nexport type ErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['Error'] = ResolversParentTypes['Error']> = {\n  path?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type ResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['Response'] = ResolversParentTypes['Response']> = {\n  ok?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  post?: Resolver<Maybe<ResolversTypes['Post']>, ParentType, ContextType>;\n  errors?: Resolver<Maybe<Array<ResolversTypes['Error']>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type ImageResolvers<ContextType = any, ParentType extends ResolversParentTypes['Image'] = ResolversParentTypes['Image']> = {\n  src?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type LetterpadErrorResolvers<ContextType = any, ParentType extends ResolversParentTypes['LetterpadError'] = ResolversParentTypes['LetterpadError']> = {\n  __resolveType: TypeResolveFn<'AuthorNotFoundError' | 'CreateAuthorError' | 'LoginError' | 'MediaError' | 'PostError' | 'StatsError' | 'SettingError' | 'TagsError' | 'TagResultError', ParentType, ContextType>;\n  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n};\n\nexport type Resolvers<ContextType = any> = {\n  Social?: SocialResolvers<ContextType>;\n  Author?: AuthorResolvers<ContextType>;\n  AuthorResponse?: AuthorResponseResolvers<ContextType>;\n  AuthorNotFoundError?: AuthorNotFoundErrorResolvers<ContextType>;\n  CreateAuthorError?: CreateAuthorErrorResolvers<ContextType>;\n  LoginError?: LoginErrorResolvers<ContextType>;\n  MeResponse?: MeResponseResolvers<ContextType>;\n  CreateAuthorResponse?: CreateAuthorResponseResolvers<ContextType>;\n  LoginResponse?: LoginResponseResolvers<ContextType>;\n  ForgotPasswordResponse?: ForgotPasswordResponseResolvers<ContextType>;\n  Query?: QueryResolvers<ContextType>;\n  Mutation?: MutationResolvers<ContextType>;\n  Media?: MediaResolvers<ContextType>;\n  MediaNode?: MediaNodeResolvers<ContextType>;\n  MediaDeleteResult?: MediaDeleteResultResolvers<ContextType>;\n  MediaUpdateResult?: MediaUpdateResultResolvers<ContextType>;\n  MediaError?: MediaErrorResolvers<ContextType>;\n  MediaDeleteResponse?: MediaDeleteResponseResolvers<ContextType>;\n  MediaUpdateResponse?: MediaUpdateResponseResolvers<ContextType>;\n  Post?: PostResolvers<ContextType>;\n  PostsNode?: PostsNodeResolvers<ContextType>;\n  PostCountsByStatus?: PostCountsByStatusResolvers<ContextType>;\n  Stats?: StatsResolvers<ContextType>;\n  PostError?: PostErrorResolvers<ContextType>;\n  StatsError?: StatsErrorResolvers<ContextType>;\n  PostResponse?: PostResponseResolvers<ContextType>;\n  PostsResponse?: PostsResponseResolvers<ContextType>;\n  CreatePostResponse?: CreatePostResponseResolvers<ContextType>;\n  UpdatePostResponse?: UpdatePostResponseResolvers<ContextType>;\n  StatsResponse?: StatsResponseResolvers<ContextType>;\n  Navigation?: NavigationResolvers<ContextType>;\n  Setting?: SettingResolvers<ContextType>;\n  SettingError?: SettingErrorResolvers<ContextType>;\n  SettingResponse?: SettingResponseResolvers<ContextType>;\n  Tags?: TagsResolvers<ContextType>;\n  EditTaxResponse?: EditTaxResponseResolvers<ContextType>;\n  TagsError?: TagsErrorResolvers<ContextType>;\n  DeleteTagsResult?: DeleteTagsResultResolvers<ContextType>;\n  TagResultError?: TagResultErrorResolvers<ContextType>;\n  UpdateTagsResponse?: UpdateTagsResponseResolvers<ContextType>;\n  DeleteTagsResponse?: DeleteTagsResponseResolvers<ContextType>;\n  TagsNode?: TagsNodeResolvers<ContextType>;\n  TagsResponse?: TagsResponseResolvers<ContextType>;\n  TagResponse?: TagResponseResolvers<ContextType>;\n  Date?: GraphQLScalarType;\n  Error?: ErrorResolvers<ContextType>;\n  Response?: ResponseResolvers<ContextType>;\n  Image?: ImageResolvers<ContextType>;\n  LetterpadError?: LetterpadErrorResolvers<ContextType>;\n};\n\n\n/**\n * @deprecated\n * Use \"Resolvers\" root object instead. If you wish to get \"IResolvers\", add \"typesPrefix: I\" to your config.\n */\nexport type IResolvers<ContextType = any> = Resolvers<ContextType>;\n"]},"metadata":{},"sourceType":"module"}