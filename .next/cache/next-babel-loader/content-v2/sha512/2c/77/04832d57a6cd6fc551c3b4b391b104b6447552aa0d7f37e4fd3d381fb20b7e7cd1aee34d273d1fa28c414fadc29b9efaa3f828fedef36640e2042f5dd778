{"ast":null,"code":"import _slicedToArray from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/post-meta/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Tooltip, Input, Drawer, Button, Checkbox, Space } from \"antd\";\nimport { EyeOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport ImageUpload from \"../ImageUpload\";\nimport { PostStatusOptions, PostTypes } from \"@/__generated__/type-defs.graphqls\";\nimport Tags from \"./tags\";\nimport { useSettingsQuery } from \"@/graphql/queries/queries.graphql\";\nvar TextArea = Input.TextArea;\n\nvar Actions = function Actions(_ref) {\n  _s();\n\n  var post = _ref.post,\n      setPostAttribute = _ref.setPostAttribute,\n      deletePost = _ref.deletePost,\n      postHash = _ref.postHash;\n\n  var _useState = useState(false),\n      visible = _useState[0],\n      setVisible = _useState[1];\n\n  var settings = useSettingsQuery();\n\n  var showDrawer = function showDrawer() {\n    setVisible(true);\n  };\n\n  var onClose = function onClose() {\n    setVisible(false);\n  };\n\n  if (post.__typename !== \"Post\") return null;\n  var isPublished = post.status === PostStatusOptions.Published;\n  var isPost = post.type === PostTypes.Post;\n  var postVerb = isPost ? \"Post\" : \"Page\";\n  var rePublishBtnDisabled = post.md_draft === \"\" || post.md_draft == post.md;\n  return __jsx(React.Fragment, null, __jsx(Tooltip, {\n    title: \"Preview\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    type: \"ghost\",\n    shape: \"circle\",\n    size: \"small\",\n    icon: __jsx(EyeOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }),\n    onClick: function onClick() {\n      var _settings$data;\n\n      if (((_settings$data = settings.data) === null || _settings$data === void 0 ? void 0 : _settings$data.settings.__typename) === \"Setting\") {\n        window.open(settings.data.settings.site_url + \"/preview/\" + postHash);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), __jsx(Button, {\n    size: \"small\",\n    type: \"primary\",\n    disabled: rePublishBtnDisabled,\n    onClick: function onClick() {\n      setPostAttribute({\n        status: PostStatusOptions.Published\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Republish\"), __jsx(Button, {\n    type: \"primary\",\n    onClick: showDrawer,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(SettingOutlined, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), __jsx(Drawer, {\n    title: \"Settings\",\n    placement: \"right\",\n    closable: false,\n    onClose: onClose,\n    visible: visible,\n    width: 320,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(Space, {\n    direction: \"vertical\",\n    size: \"middle\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(Checkbox, {\n    onChange: function onChange(e) {\n      return setPostAttribute({\n        status: e.target.checked ? PostStatusOptions.Published : PostStatusOptions.Draft\n      });\n    },\n    checked: isPublished,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, isPublished ? \"Unpublish this \".concat(postVerb) : \"Publish this \".concat(postVerb)), isPost && __jsx(Checkbox, {\n    onChange: function onChange(e) {\n      return setPostAttribute({\n        featured: e.target.checked\n      });\n    },\n    checked: post.featured,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, post.featured ? \"Remove from featured\" : \"Mark as featured post\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, postVerb, \" Description\"), __jsx(TextArea, {\n    showCount: true,\n    rows: 3,\n    maxLength: 160,\n    onChange: function onChange(e) {\n      return setPostAttribute({\n        excerpt: e.target.value\n      });\n    },\n    value: post.excerpt,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Path\"), __jsx(Input, {\n    onChange: function onChange(e) {\n      return setPostAttribute({\n        slug: e.target.value\n      });\n    },\n    value: post.slug,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })), isPost && __jsx(Tags, {\n    post: post,\n    setPostAttribute: setPostAttribute,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 22\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Cover Image\"), __jsx(ImageUpload, {\n    name: \"Cover Image\",\n    url: post.cover_image.src,\n    onDone: function onDone(_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n          res = _ref3[0];\n\n      setPostAttribute({\n        cover_image: {\n          src: res.src,\n          width: res.size.width,\n          height: res.size.height\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    type: \"primary\",\n    danger: true,\n    onClick: deletePost,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \"Delete \", postVerb))));\n};\n\n_s(Actions, \"J+FH0raGjBuxw1xrr8DDqkQxoMM=\", false, function () {\n  return [useSettingsQuery];\n});\n\n_c = Actions;\nexport default Actions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Actions\");","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/post-meta/index.tsx"],"names":["React","useState","Tooltip","Input","Drawer","Button","Checkbox","Space","EyeOutlined","SettingOutlined","ImageUpload","PostStatusOptions","PostTypes","Tags","useSettingsQuery","TextArea","Actions","post","setPostAttribute","deletePost","postHash","visible","setVisible","settings","showDrawer","onClose","__typename","isPublished","status","Published","isPost","type","Post","postVerb","rePublishBtnDisabled","md_draft","md","data","window","open","site_url","e","target","checked","Draft","featured","excerpt","value","slug","cover_image","src","res","width","size","height"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,QAAzC,EAAmDC,KAAnD,QAAgE,MAAhE;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,mBAA7C;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAEEC,iBAFF,EAGEC,SAHF,QAIO,oCAJP;AAKA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAASC,gBAAT,QAAiC,mCAAjC;IAEQC,Q,GAAaZ,K,CAAbY,Q;;AAQR,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA8D;AAAA;;AAAA,MAA3DC,IAA2D,QAA3DA,IAA2D;AAAA,MAArDC,gBAAqD,QAArDA,gBAAqD;AAAA,MAAnCC,UAAmC,QAAnCA,UAAmC;AAAA,MAAvBC,QAAuB,QAAvBA,QAAuB;;AAAA,kBAC9CnB,QAAQ,CAAC,KAAD,CADsC;AAAA,MACrEoB,OADqE;AAAA,MAC5DC,UAD4D;;AAE5E,MAAMC,QAAQ,GAAGT,gBAAgB,EAAjC;;AAEA,MAAMU,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAFD;;AAGA,MAAMG,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAFD;;AAIA,MAAIL,IAAI,CAACS,UAAL,KAAoB,MAAxB,EAAgC,OAAO,IAAP;AAEhC,MAAMC,WAAW,GAAGV,IAAI,CAACW,MAAL,KAAgBjB,iBAAiB,CAACkB,SAAtD;AACA,MAAMC,MAAM,GAAGb,IAAI,CAACc,IAAL,KAAcnB,SAAS,CAACoB,IAAvC;AACA,MAAMC,QAAQ,GAAGH,MAAM,GAAG,MAAH,GAAY,MAAnC;AACA,MAAMI,oBAAoB,GAAGjB,IAAI,CAACkB,QAAL,KAAkB,EAAlB,IAAwBlB,IAAI,CAACkB,QAAL,IAAiBlB,IAAI,CAACmB,EAA3E;AAEA,SACE,4BACE,MAAC,OAAD;AAAS,IAAA,KAAK,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAC,QAFR;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,IAAI,EAAE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR;AAKE,IAAA,OAAO,EAAE,mBAAM;AAAA;;AACb,UAAI,mBAAAb,QAAQ,CAACc,IAAT,kEAAed,QAAf,CAAwBG,UAAxB,MAAuC,SAA3C,EAAsD;AACpDY,QAAAA,MAAM,CAACC,IAAP,CACEhB,QAAQ,CAACc,IAAT,CAAcd,QAAd,CAAuBiB,QAAvB,GAAkC,WAAlC,GAAgDpB,QADlD;AAGD;AACF,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAgBE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,QAAQ,EAAEc,oBAHZ;AAIE,IAAA,OAAO,EAAE,mBAAM;AACbhB,MAAAA,gBAAgB,CAAC;AACfU,QAAAA,MAAM,EAAEjB,iBAAiB,CAACkB;AADX,OAAD,CAAhB;AAGD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAhBF,EA4BE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,OAAO,EAAEL,UAAhC;AAA4C,IAAA,IAAI,EAAC,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA5BF,EA+BE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,QAAQ,EAAE,KAHZ;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,OAAO,EAAEJ,OALX;AAME,IAAA,KAAK,EAAE,GANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,UAAjB;AAA4B,IAAA,IAAI,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,QAAQ,EAAE,kBAAAoB,CAAC;AAAA,aACTvB,gBAAgB,CAAC;AACfU,QAAAA,MAAM,EAAEa,CAAC,CAACC,MAAF,CAASC,OAAT,GACJhC,iBAAiB,CAACkB,SADd,GAEJlB,iBAAiB,CAACiC;AAHP,OAAD,CADP;AAAA,KADb;AAQE,IAAA,OAAO,EAAEjB,WARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGA,WAAW,4BACUM,QADV,2BAEQA,QAFR,CAVd,CADF,EAeGH,MAAM,IACL,MAAC,QAAD;AACE,IAAA,QAAQ,EAAE,kBAAAW,CAAC;AAAA,aAAIvB,gBAAgB,CAAC;AAAE2B,QAAAA,QAAQ,EAAEJ,CAAC,CAACC,MAAF,CAASC;AAArB,OAAD,CAApB;AAAA,KADb;AAEE,IAAA,OAAO,EAAE1B,IAAI,CAAC4B,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIG5B,IAAI,CAAC4B,QAAL,GAAgB,sBAAhB,GAAyC,uBAJ5C,CAhBJ,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQZ,QAAR,iBADF,EAEE,MAAC,QAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,EAAE,CAFR;AAGE,IAAA,SAAS,EAAE,GAHb;AAIE,IAAA,QAAQ,EAAE,kBAAAQ,CAAC;AAAA,aAAIvB,gBAAgB,CAAC;AAAE4B,QAAAA,OAAO,EAAEL,CAAC,CAACC,MAAF,CAASK;AAApB,OAAD,CAApB;AAAA,KAJb;AAKE,IAAA,KAAK,EAAE9B,IAAI,CAAC6B,OALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAvBF,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE,MAAC,KAAD;AACE,IAAA,QAAQ,EAAE,kBAAAL,CAAC;AAAA,aAAIvB,gBAAgB,CAAC;AAAE8B,QAAAA,IAAI,EAAEP,CAAC,CAACC,MAAF,CAASK;AAAjB,OAAD,CAApB;AAAA,KADb;AAEE,IAAA,KAAK,EAAE9B,IAAI,CAAC+B,IAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAjCF,EAwCGlB,MAAM,IAAI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEb,IAAZ;AAAkB,IAAA,gBAAgB,EAAEC,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxCb,EAyCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,MAAC,WAAD;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,GAAG,EAAED,IAAI,CAACgC,WAAL,CAAiBC,GAFxB;AAGE,IAAA,MAAM,EAAE,uBAAW;AAAA;AAAA,UAATC,GAAS;;AACjBjC,MAAAA,gBAAgB,CAAC;AACf+B,QAAAA,WAAW,EAAE;AACXC,UAAAA,GAAG,EAAEC,GAAG,CAACD,GADE;AAEXE,UAAAA,KAAK,EAAED,GAAG,CAACE,IAAJ,CAASD,KAFL;AAGXE,UAAAA,MAAM,EAAEH,GAAG,CAACE,IAAJ,CAASC;AAHN;AADE,OAAD,CAAhB;AAOD,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAzCF,EAyDE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,MAAM,MAA7B;AAA8B,IAAA,OAAO,EAAEnC,UAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUc,QADV,CAzDF,CARF,CA/BF,CADF;AAwGD,CA1HD;;GAAMjB,O;UAEaF,gB;;;KAFbE,O;AA4HN,eAAeA,OAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Tooltip, Input, Drawer, Button, Checkbox, Space } from \"antd\";\nimport { EyeOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport ImageUpload from \"../ImageUpload\";\nimport {\n  InputUpdatePost,\n  PostStatusOptions,\n  PostTypes,\n} from \"@/__generated__/type-defs.graphqls\";\nimport Tags from \"./tags\";\nimport { PostQuery } from \"@/__generated__/queries/queries.graphql\";\nimport { useSettingsQuery } from \"@/graphql/queries/queries.graphql\";\n\nconst { TextArea } = Input;\n\ninterface IProps {\n  post: PostQuery[\"post\"];\n  setPostAttribute: (attrs: Omit<InputUpdatePost, \"id\">) => void;\n  deletePost: () => void;\n  postHash: string;\n}\nconst Actions = ({ post, setPostAttribute, deletePost, postHash }: IProps) => {\n  const [visible, setVisible] = useState(false);\n  const settings = useSettingsQuery();\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n  const onClose = () => {\n    setVisible(false);\n  };\n\n  if (post.__typename !== \"Post\") return null;\n\n  const isPublished = post.status === PostStatusOptions.Published;\n  const isPost = post.type === PostTypes.Post;\n  const postVerb = isPost ? \"Post\" : \"Page\";\n  const rePublishBtnDisabled = post.md_draft === \"\" || post.md_draft == post.md;\n\n  return (\n    <>\n      <Tooltip title=\"Preview\">\n        <Button\n          type=\"ghost\"\n          shape=\"circle\"\n          size=\"small\"\n          icon={<EyeOutlined />}\n          onClick={() => {\n            if (settings.data?.settings.__typename === \"Setting\") {\n              window.open(\n                settings.data.settings.site_url + \"/preview/\" + postHash,\n              );\n            }\n          }}\n        />\n      </Tooltip>\n      <Button\n        size=\"small\"\n        type=\"primary\"\n        disabled={rePublishBtnDisabled}\n        onClick={() => {\n          setPostAttribute({\n            status: PostStatusOptions.Published,\n          });\n        }}\n      >\n        Republish\n      </Button>\n      <Button type=\"primary\" onClick={showDrawer} size=\"small\">\n        <SettingOutlined />\n      </Button>\n      <Drawer\n        title=\"Settings\"\n        placement=\"right\"\n        closable={false}\n        onClose={onClose}\n        visible={visible}\n        width={320}\n      >\n        <Space direction=\"vertical\" size=\"middle\">\n          <Checkbox\n            onChange={e =>\n              setPostAttribute({\n                status: e.target.checked\n                  ? PostStatusOptions.Published\n                  : PostStatusOptions.Draft,\n              })\n            }\n            checked={isPublished}\n          >\n            {isPublished\n              ? `Unpublish this ${postVerb}`\n              : `Publish this ${postVerb}`}\n          </Checkbox>\n          {isPost && (\n            <Checkbox\n              onChange={e => setPostAttribute({ featured: e.target.checked })}\n              checked={post.featured}\n            >\n              {post.featured ? \"Remove from featured\" : \"Mark as featured post\"}\n            </Checkbox>\n          )}\n          <div>\n            <label>{postVerb} Description</label>\n            <TextArea\n              showCount\n              rows={3}\n              maxLength={160}\n              onChange={e => setPostAttribute({ excerpt: e.target.value })}\n              value={post.excerpt}\n            />\n          </div>\n          <div>\n            <label>Path</label>\n            <Input\n              onChange={e => setPostAttribute({ slug: e.target.value })}\n              value={post.slug}\n            />\n          </div>\n          {isPost && <Tags post={post} setPostAttribute={setPostAttribute} />}\n          <div>\n            <label>Cover Image</label>\n            <ImageUpload\n              name=\"Cover Image\"\n              url={post.cover_image.src}\n              onDone={([res]) => {\n                setPostAttribute({\n                  cover_image: {\n                    src: res.src,\n                    width: res.size.width,\n                    height: res.size.height,\n                  },\n                });\n              }}\n            />\n          </div>\n          <Button type=\"primary\" danger onClick={deletePost}>\n            Delete {postVerb}\n          </Button>\n        </Space>\n      </Drawer>\n    </>\n  );\n};\n\nexport default Actions;\n"]},"metadata":{},"sourceType":"module"}