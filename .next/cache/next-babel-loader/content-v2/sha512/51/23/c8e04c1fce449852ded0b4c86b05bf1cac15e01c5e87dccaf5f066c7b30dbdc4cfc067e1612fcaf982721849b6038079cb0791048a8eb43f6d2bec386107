{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PostStatusOptions, PostTypes } from \"@/__generated__/type-defs.graphqls\";\nimport reading_time from \"reading-time\";\nimport { mdToHtml } from \"letterpad-editor\";\nimport { slugify, getImageDimensions, setImageWidthAndHeightInHtml } from \"./helpers\";\nimport logger from \"../../../shared/logger\";\nimport models from \"../db/models\";\nimport { getDateTime } from \"../../../shared/utils\";\nconst Mutation = {\n  async createPost(_parent, args, {\n    session\n  }) {\n    if (!args.data || !(session !== null && session !== void 0 && session.user.id)) {\n      return {\n        __typename: \"PostError\",\n        message: \"Session not found\"\n      };\n    }\n\n    const author = await models.Author.findOne({\n      where: {\n        id: session.user.id\n      }\n    });\n\n    if (!author) {\n      return {\n        __typename: \"PostError\",\n        message: \"Author not found\"\n      };\n    }\n\n    if (!args.data.slug) {\n      args.data.slug = await slugify(models.Post, \"untitled\");\n    }\n\n    if (!args.data.md) {\n      args.data.md = \"\";\n      args.data.html = \"\";\n    }\n\n    const newPost = await (author === null || author === void 0 ? void 0 : author.createPost(args.data));\n\n    if (newPost) {\n      const defaultTags = await models.Tags.findOne({\n        where: {\n          id: newPost.id\n        }\n      });\n      if (defaultTags) await newPost.addTag(defaultTags);\n      return _objectSpread({\n        __typename: \"Post\"\n      }, newPost.get());\n    }\n\n    return {\n      __typename: \"PostError\",\n      message: \"Unable to create post\"\n    };\n  },\n\n  async updatePost(_parent, args, context, _info) {\n    var _context$session;\n\n    if (!((_context$session = context.session) !== null && _context$session !== void 0 && _context$session.user.id)) {\n      return {\n        __typename: \"PostError\",\n        message: \"Authentication failed\"\n      };\n    }\n\n    try {\n      if (!args.data) {\n        return {\n          __typename: \"PostError\",\n          message: \"No arguments to create a post\"\n        };\n      }\n\n      const previousPostRaw = await models.Post.findOne({\n        where: {\n          id: args.data.id\n        }\n      });\n\n      if (!previousPostRaw) {\n        return {\n          __typename: \"PostError\",\n          message: \"Current post not found to update\"\n        };\n      }\n\n      const currentTime = getDateTime(new Date());\n      const dataToUpdate = {\n        updatedAt: currentTime\n      };\n\n      if (args.data.slug) {\n        dataToUpdate.slug = args.data.slug.replace(\"/post/\", \"\").replace(\"/page/\", \"\");\n      }\n\n      const previousPost = previousPostRaw.get(); // slug and title\n\n      if (dataToUpdate.slug) {\n        if (dataToUpdate.slug.length === 0) {\n          const title = args.data.title || previousPost.title;\n          dataToUpdate.slug = await slugify(models.Post, title);\n          logger.debug(\"Slug changed to :\", args.data.slug);\n        }\n      } else if (args.data.title && isFirstTitleCreation(previousPost.title, args.data.title)) {\n        dataToUpdate.slug = await slugify(models.Post, args.data.title);\n        dataToUpdate.title = args.data.title || previousPost.title;\n        logger.debug(\"Slug created:\", dataToUpdate.slug);\n      } else if (args.data.title) {\n        dataToUpdate.title = args.data.title;\n      } // date and status\n\n\n      if (isPublishingLive(previousPost.status, args.data.status)) {\n        if (!previousPostRaw.publishedAt) {\n          dataToUpdate.publishedAt = currentTime;\n        }\n\n        logger.debug(\"Post status changed from draft to published - \", currentTime);\n        dataToUpdate.scheduledAt = null;\n      } // cover image\n\n\n      if (args.data.cover_image) {\n        const {\n          width,\n          height\n        } = args.data.cover_image;\n        let src = args.data.cover_image.src.replace(process.env.ROOT_URL || \"\", \"\");\n        dataToUpdate.cover_image = src;\n\n        if (!width && !height) {\n          try {\n            const imageSize = await getImageDimensions(src);\n            dataToUpdate.cover_image_width = imageSize.width;\n            dataToUpdate.cover_image_height = imageSize.height;\n          } catch (e) {\n            logger.error(`No width/height specified for cover image.\n            \\n Trying to get dimentions of image src`, src);\n          }\n        } else {\n          dataToUpdate.cover_image_width = width;\n          dataToUpdate.cover_image_height = height;\n        }\n\n        logger.debug(\"Updating cover image\", dataToUpdate.cover_image, dataToUpdate.cover_image_width, dataToUpdate.cover_image_height);\n      } // reading time\n\n\n      if (args.data.md && args.data.md !== previousPost.md) {\n        // update reading time\n        dataToUpdate.reading_time = reading_time(args.data.md).text;\n        logger.debug(\"Reading time: \", dataToUpdate.reading_time);\n      }\n\n      if (args.data.status) {\n        dataToUpdate.status = args.data.status;\n      } // update content\n\n\n      if (savingDraft(previousPost.status, args.data.status)) {\n        dataToUpdate.md_draft = args.data.md;\n      } else if (args.data.md && args.data.html) {\n        dataToUpdate.md = args.data.md;\n\n        try {\n          dataToUpdate.html = await setImageWidthAndHeightInHtml(args.data.html);\n        } catch (error) {\n          logger.error(error);\n        } // just republished\n\n\n        if (rePublished(previousPost.status, args.data.status)) {\n          dataToUpdate.md_draft = \"\";\n        }\n      } else if (rePublished(previousPost.status, args.data.status)) {\n        if (previousPost.md_draft) {\n          dataToUpdate.md = previousPost.md_draft;\n\n          try {\n            dataToUpdate.html = await setImageWidthAndHeightInHtml(mdToHtml(previousPost.md_draft));\n          } catch (error) {\n            logger.error(error);\n          }\n        }\n\n        dataToUpdate.md_draft = \"\";\n      }\n\n      if (args.data.excerpt) {\n        dataToUpdate.excerpt = args.data.excerpt;\n      }\n\n      if (args.data.featured) {\n        dataToUpdate.featured = args.data.featured;\n      }\n\n      await updateMenuOnTitleChange(context.session.user.id, previousPostRaw.type, dataToUpdate.title, dataToUpdate.slug);\n\n      if (args.data.tags && previousPostRaw) {\n        logger.debug(\"Updating Tags\", args.data.tags);\n        const tags = [...args.data.tags];\n\n        if (tags && tags.length > 0) {\n          logger.debug(\"Removing all Tags\"); // remove the tags relation\n\n          await previousPostRaw.setTags([]);\n\n          for (const tag of tags) {\n            logger.info(\"processing tag\", tag); // add relation with existing Tags\n\n            if (tag.id > 0) {\n              const tagFound = await models.Tags.findOne({\n                where: {\n                  id: tag.id\n                }\n              });\n\n              if (tagFound) {\n                await previousPostRaw.addTag(tagFound);\n              }\n\n              logger.debug(`Added existing tags (${tag.name}) with id`, tag.id);\n            } else {\n              const author = await previousPostRaw.getAuthor();\n              const tagsFound = await author.getTags({\n                where: {\n                  name: tag.name\n                }\n              });\n\n              if (tagsFound.length === 0) {\n                const newTag = await author.createTag({\n                  name: tag.name,\n                  slug: tag.name.toLowerCase()\n                });\n\n                if (newTag) {\n                  logger.debug(`Created new tag (${tag.name})`);\n                  await previousPostRaw.addTag(newTag);\n                  logger.debug(\"Linked tags to post\", tag.name);\n                }\n              } else {\n                await previousPostRaw.addTag(tagsFound[0]);\n                logger.debug(\"Linked tags to post\", tag.name);\n              }\n            }\n          }\n        }\n      }\n\n      await models.Post.update(dataToUpdate, {\n        where: {\n          id: args.data.id\n        }\n      });\n      const post = await models.Post.findOne({\n        where: {\n          id: args.data.id\n        }\n      });\n\n      if (!post) {\n        return {\n          __typename: \"PostError\",\n          message: \"Updated post not found\"\n        };\n      }\n\n      return _objectSpread({\n        __typename: \"Post\"\n      }, post.get());\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n};\n\nfunction isFirstTitleCreation(prevTitle, newTitle) {\n  if (prevTitle === \"\" && newTitle !== \"\") {\n    return true;\n  }\n}\n\nfunction isPublishingLive(oldStatus, newStatus) {\n  return newStatus === PostStatusOptions.Published && oldStatus === PostStatusOptions.Draft;\n}\n\nfunction rePublished(prevStatus, currentStatus) {\n  return prevStatus === PostStatusOptions.Published && currentStatus === PostStatusOptions.Published;\n}\n\nfunction savingDraft(prevStatus, statusArg) {\n  return !statusArg && prevStatus === PostStatusOptions.Published;\n}\n\nasync function updateMenuOnTitleChange(authorId, postType, title, slug) {\n  if (!title && !slug) return false;\n  const author = await models.Author.findOne({\n    where: {\n      id: authorId\n    }\n  });\n  if (!author) return false;\n  const setting = await author.getSetting();\n  const isPage = postType === PostTypes.Page;\n  const updatedMenu = setting.menu.map(item => {\n    if (title) {\n      if (isPage && item.type === \"page\") {\n        item.original_name = title;\n      }\n    }\n\n    if (slug) {\n      if (isPage && item.type === \"page\") {\n        item.slug = slug;\n      }\n    }\n\n    return item;\n  });\n  setting.setDataValue(\"menu\", updatedMenu);\n  await author.setSetting(setting);\n}\n\nexport default {\n  Mutation\n};","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/resolvers/post.mutation.ts"],"names":["PostStatusOptions","PostTypes","reading_time","mdToHtml","slugify","getImageDimensions","setImageWidthAndHeightInHtml","logger","models","getDateTime","Mutation","createPost","_parent","args","session","data","user","id","__typename","message","author","Author","findOne","where","slug","Post","md","html","newPost","defaultTags","Tags","addTag","get","updatePost","context","_info","previousPostRaw","currentTime","Date","dataToUpdate","updatedAt","replace","previousPost","length","title","debug","isFirstTitleCreation","isPublishingLive","status","publishedAt","scheduledAt","cover_image","width","height","src","process","env","ROOT_URL","imageSize","cover_image_width","cover_image_height","e","error","text","savingDraft","md_draft","rePublished","excerpt","featured","updateMenuOnTitleChange","type","tags","setTags","tag","info","tagFound","name","getAuthor","tagsFound","getTags","newTag","createTag","toLowerCase","update","post","console","log","prevTitle","newTitle","oldStatus","newStatus","Published","Draft","prevStatus","currentStatus","statusArg","authorId","postType","setting","getSetting","isPage","Page","updatedMenu","menu","map","item","original_name","setDataValue","setSetting"],"mappings":"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","sourcesContent":["import {\n  MutationResolvers,\n  PostStatusOptions,\n  PostTypes,\n} from \"@/__generated__/type-defs.graphqls\";\nimport { PostAttributes } from \"../db/models/post\";\nimport { ResolverContext } from \"../apollo\";\nimport reading_time from \"reading-time\";\nimport { mdToHtml } from \"letterpad-editor\";\n\nimport {\n  slugify,\n  getImageDimensions,\n  setImageWidthAndHeightInHtml,\n} from \"./helpers\";\nimport logger from \"../../../shared/logger\";\nimport models from \"../db/models\";\nimport { getDateTime } from \"../../../shared/utils\";\n\nconst Mutation: MutationResolvers<ResolverContext> = {\n  async createPost(_parent, args, { session }) {\n    if (!args.data || !session?.user.id) {\n      return {\n        __typename: \"PostError\",\n        message: \"Session not found\",\n      };\n    }\n    const author = await models.Author.findOne({\n      where: { id: session.user.id },\n    });\n\n    if (!author) {\n      return {\n        __typename: \"PostError\",\n        message: \"Author not found\",\n      };\n    }\n    if (!args.data.slug) {\n      args.data.slug = await slugify(models.Post, \"untitled\");\n    }\n\n    if (!args.data.md) {\n      args.data.md = \"\";\n      args.data.html = \"\";\n    }\n\n    const newPost = await author?.createPost(args.data as any);\n\n    if (newPost) {\n      const defaultTags = await models.Tags.findOne({\n        where: { id: newPost.id },\n      });\n      if (defaultTags) await newPost.addTag(defaultTags);\n\n      return {\n        __typename: \"Post\",\n        ...newPost.get(),\n      };\n    }\n    return {\n      __typename: \"PostError\",\n      message: \"Unable to create post\",\n    };\n  },\n\n  async updatePost(_parent, args, context, _info) {\n    if (!context.session?.user.id) {\n      return {\n        __typename: \"PostError\",\n        message: \"Authentication failed\",\n      };\n    }\n    try {\n      if (!args.data) {\n        return {\n          __typename: \"PostError\",\n          message: \"No arguments to create a post\",\n        };\n      }\n      const previousPostRaw = await models.Post.findOne({\n        where: { id: args.data.id },\n      });\n\n      if (!previousPostRaw) {\n        return {\n          __typename: \"PostError\",\n          message: \"Current post not found to update\",\n        };\n      }\n\n      const currentTime = getDateTime(new Date());\n\n      const dataToUpdate: any = {\n        updatedAt: currentTime,\n      };\n      if (args.data.slug) {\n        dataToUpdate.slug = args.data.slug\n          .replace(\"/post/\", \"\")\n          .replace(\"/page/\", \"\");\n      }\n\n      const previousPost = previousPostRaw.get() as PostAttributes;\n\n      // slug and title\n      if (dataToUpdate.slug) {\n        if (dataToUpdate.slug.length === 0) {\n          const title = args.data.title || previousPost.title;\n          dataToUpdate.slug = await slugify(models.Post, title);\n          logger.debug(\"Slug changed to :\", args.data.slug);\n        }\n      } else if (\n        args.data.title &&\n        isFirstTitleCreation(previousPost.title, args.data.title)\n      ) {\n        dataToUpdate.slug = await slugify(models.Post, args.data.title);\n        dataToUpdate.title = args.data.title || previousPost.title;\n        logger.debug(\"Slug created:\", dataToUpdate.slug);\n      } else if (args.data.title) {\n        dataToUpdate.title = args.data.title;\n      }\n\n      // date and status\n      if (isPublishingLive(previousPost.status, args.data.status)) {\n        if (!previousPostRaw.publishedAt) {\n          dataToUpdate.publishedAt = currentTime;\n        }\n        logger.debug(\n          \"Post status changed from draft to published - \",\n          currentTime,\n        );\n        dataToUpdate.scheduledAt = null;\n      }\n\n      // cover image\n      if (args.data.cover_image) {\n        const { width, height } = args.data.cover_image;\n        let src = args.data.cover_image.src.replace(\n          process.env.ROOT_URL || \"\",\n          \"\",\n        );\n        dataToUpdate.cover_image = src;\n        if (!width && !height) {\n          try {\n            const imageSize = await getImageDimensions(src);\n            dataToUpdate.cover_image_width = imageSize.width;\n            dataToUpdate.cover_image_height = imageSize.height;\n          } catch (e) {\n            logger.error(\n              `No width/height specified for cover image.\n            \\n Trying to get dimentions of image src`,\n              src,\n            );\n          }\n        } else {\n          dataToUpdate.cover_image_width = width as number;\n          dataToUpdate.cover_image_height = height as number;\n        }\n        logger.debug(\n          \"Updating cover image\",\n          dataToUpdate.cover_image,\n          dataToUpdate.cover_image_width,\n          dataToUpdate.cover_image_height,\n        );\n      }\n\n      // reading time\n      if (args.data.md && args.data.md !== previousPost.md) {\n        // update reading time\n        dataToUpdate.reading_time = reading_time(args.data.md).text;\n        logger.debug(\"Reading time: \", dataToUpdate.reading_time);\n      }\n\n      if (args.data.status) {\n        dataToUpdate.status = args.data.status;\n      }\n      // update content\n      if (savingDraft(previousPost.status, args.data.status)) {\n        dataToUpdate.md_draft = args.data.md;\n      } else if (args.data.md && args.data.html) {\n        dataToUpdate.md = args.data.md;\n        try {\n          dataToUpdate.html = await setImageWidthAndHeightInHtml(\n            args.data.html,\n          );\n        } catch (error) {\n          logger.error(error);\n        }\n\n        // just republished\n        if (rePublished(previousPost.status, args.data.status)) {\n          dataToUpdate.md_draft = \"\";\n        }\n      } else if (rePublished(previousPost.status, args.data.status)) {\n        if (previousPost.md_draft) {\n          dataToUpdate.md = previousPost.md_draft;\n          try {\n            dataToUpdate.html = await setImageWidthAndHeightInHtml(\n              mdToHtml(previousPost.md_draft),\n            );\n          } catch (error) {\n            logger.error(error);\n          }\n        }\n        dataToUpdate.md_draft = \"\";\n      }\n\n      if (args.data.excerpt) {\n        dataToUpdate.excerpt = args.data.excerpt;\n      }\n\n      if (args.data.featured) {\n        dataToUpdate.featured = args.data.featured;\n      }\n\n      await updateMenuOnTitleChange(\n        context.session.user.id,\n        previousPostRaw.type,\n        dataToUpdate.title,\n        dataToUpdate.slug,\n      );\n\n      if (args.data.tags && previousPostRaw) {\n        logger.debug(\"Updating Tags\", args.data.tags);\n\n        const tags = [...args.data.tags];\n\n        if (tags && tags.length > 0) {\n          logger.debug(\"Removing all Tags\");\n          // remove the tags relation\n          await previousPostRaw.setTags([]);\n\n          for (const tag of tags) {\n            logger.info(\"processing tag\", tag);\n            // add relation with existing Tags\n            if (tag.id > 0) {\n              const tagFound = await models.Tags.findOne({\n                where: { id: tag.id },\n              });\n              if (tagFound) {\n                await previousPostRaw.addTag(tagFound);\n              }\n              logger.debug(`Added existing tags (${tag.name}) with id`, tag.id);\n            } else {\n              const author = await previousPostRaw.getAuthor();\n              const tagsFound = await author.getTags({\n                where: { name: tag.name },\n              });\n              if (tagsFound.length === 0) {\n                const newTag = await author.createTag({\n                  name: tag.name,\n                  slug: tag.name.toLowerCase(),\n                });\n                if (newTag) {\n                  logger.debug(`Created new tag (${tag.name})`);\n                  await previousPostRaw.addTag(newTag);\n                  logger.debug(\"Linked tags to post\", tag.name);\n                }\n              } else {\n                await previousPostRaw.addTag(tagsFound[0]);\n                logger.debug(\"Linked tags to post\", tag.name);\n              }\n            }\n          }\n        }\n      }\n\n      await models.Post.update(dataToUpdate, {\n        where: { id: args.data.id },\n      });\n\n      const post = await models.Post.findOne({\n        where: { id: args.data.id },\n      });\n\n      if (!post) {\n        return {\n          __typename: \"PostError\",\n          message: \"Updated post not found\",\n        };\n      }\n      return {\n        __typename: \"Post\",\n        ...post.get(),\n      };\n    } catch (e) {\n      console.log(e);\n    }\n  },\n};\n\nfunction isFirstTitleCreation(prevTitle: string, newTitle: string) {\n  if (prevTitle === \"\" && newTitle !== \"\") {\n    return true;\n  }\n}\n\nfunction isPublishingLive(\n  oldStatus: PostStatusOptions | string,\n  newStatus?: PostStatusOptions | null,\n) {\n  return (\n    newStatus === PostStatusOptions.Published &&\n    oldStatus === PostStatusOptions.Draft\n  );\n}\n\nfunction rePublished(\n  prevStatus: PostStatusOptions,\n  currentStatus?: PostStatusOptions | null,\n) {\n  return (\n    prevStatus === PostStatusOptions.Published &&\n    currentStatus === PostStatusOptions.Published\n  );\n}\nfunction savingDraft(\n  prevStatus: PostStatusOptions,\n  statusArg?: PostStatusOptions | null,\n) {\n  return !statusArg && prevStatus === PostStatusOptions.Published;\n}\n\nasync function updateMenuOnTitleChange(\n  authorId: number,\n  postType?: PostTypes,\n  title?: string,\n  slug?: string,\n) {\n  if (!title && !slug) return false;\n  const author = await models.Author.findOne({ where: { id: authorId } });\n  if (!author) return false;\n  const setting = await author.getSetting();\n\n  const isPage = postType === PostTypes.Page;\n\n  const updatedMenu = setting.menu.map(item => {\n    if (title) {\n      if (isPage && item.type === \"page\") {\n        item.original_name = title;\n      }\n    }\n    if (slug) {\n      if (isPage && item.type === \"page\") {\n        item.slug = slug;\n      }\n    }\n    return item;\n  });\n  setting.setDataValue(\"menu\", updatedMenu);\n  await author.setSetting(setting);\n}\n\nexport default { Mutation };\n"]},"metadata":{},"sourceType":"module"}