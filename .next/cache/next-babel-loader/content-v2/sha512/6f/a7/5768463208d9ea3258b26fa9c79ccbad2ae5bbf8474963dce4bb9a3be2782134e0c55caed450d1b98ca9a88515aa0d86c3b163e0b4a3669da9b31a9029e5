{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwt from \"jsonwebtoken\";\nimport { getSession } from \"next-auth/client\";\nimport { ApolloServer } from \"apollo-server-micro\";\nimport models from \"@/graphql/db/models\";\nimport { schema } from \"@/graphql/schema\";\nimport logger from \"shared/logger\";\nconst authHeaderPrefix = \"Basic \";\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async context => {\n    var _context$req;\n\n    const authHeader = ((_context$req = context.req) === null || _context$req === void 0 ? void 0 : _context$req.headers.authorization) || \"\";\n    let author_id;\n\n    try {\n      author_id = await getAuthorFromSubdomain(context);\n      logger.debug(\"Author from subdomain - \", author_id);\n\n      if (!author_id && authHeader.length > authHeaderPrefix.length) {\n        author_id = getAuthorFromAuthHeader(authHeader);\n        logger.debug(\"Author from header - \", author_id);\n      }\n    } catch (e) {\n      console.log(\"e :>> \", e);\n    }\n\n    const session = await getSession(context);\n    return _objectSpread(_objectSpread({}, context), {}, {\n      models,\n      author_id,\n      session\n    });\n  },\n  introspection: true\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default apolloServer.createHandler({\n  path: \"/api/graphql\"\n});\n\nasync function getAuthorFromSubdomain(context) {\n  const {\n    identifier\n  } = context.req.headers;\n  logger.debug(\"Host for checking subdomain - \", identifier);\n\n  if (identifier && identifier.includes(\"letterpad.app\")) {\n    const username = identifier.split(\".\")[0];\n    const author = await models.Author.findOne({\n      attributes: [\"id\"],\n      where: {\n        username\n      }\n    });\n    return author ? author.id : null;\n  }\n\n  return null;\n}\n\nfunction getAuthorFromAuthHeader(authHeader) {\n  const token = authHeader.split(/\\s+/).pop() || \"\";\n  const tokenData = jwt.verify(token, process.env.SECRET_KEY);\n  logger.debug(\"Authorisation Header to tokenData  - \", tokenData); //@ts-ignore\n\n  return tokenData === null || tokenData === void 0 ? void 0 : tokenData.id;\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/pages/api/graphql.ts"],"names":["jwt","getSession","ApolloServer","models","schema","logger","authHeaderPrefix","apolloServer","context","authHeader","req","headers","authorization","author_id","getAuthorFromSubdomain","debug","length","getAuthorFromAuthHeader","e","console","log","session","introspection","config","api","bodyParser","createHandler","path","identifier","includes","username","split","author","Author","findOne","attributes","where","id","token","pop","tokenData","verify","process","env","SECRET_KEY"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,MAAMC,gBAAgB,GAAG,QAAzB;AACA,MAAMC,YAAY,GAAG,IAAIL,YAAJ,CAAiB;AACpCE,EAAAA,MADoC;AAEpCI,EAAAA,OAAO,EAAE,MAAMA,OAAN,IAAiB;AAAA;;AACxB,UAAMC,UAAU,GAAG,iBAAAD,OAAO,CAACE,GAAR,8DAAaC,OAAb,CAAqBC,aAArB,KAAsC,EAAzD;AACA,QAAIC,SAAJ;;AACA,QAAI;AACFA,MAAAA,SAAS,GAAG,MAAMC,sBAAsB,CAACN,OAAD,CAAxC;AACAH,MAAAA,MAAM,CAACU,KAAP,CAAa,0BAAb,EAAyCF,SAAzC;;AACA,UAAI,CAACA,SAAD,IAAcJ,UAAU,CAACO,MAAX,GAAoBV,gBAAgB,CAACU,MAAvD,EAA+D;AAC7DH,QAAAA,SAAS,GAAGI,uBAAuB,CAACR,UAAD,CAAnC;AACAJ,QAAAA,MAAM,CAACU,KAAP,CAAa,uBAAb,EAAsCF,SAAtC;AACD;AACF,KAPD,CAOE,OAAOK,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,CAAtB;AACD;;AACD,UAAMG,OAAO,GAAG,MAAMpB,UAAU,CAACO,OAAD,CAAhC;AAEA,2CAAYA,OAAZ;AAAqBL,MAAAA,MAArB;AAA6BU,MAAAA,SAA7B;AAAwCQ,MAAAA;AAAxC;AACD,GAlBmC;AAmBpCC,EAAAA,aAAa,EAAE;AAnBqB,CAAjB,CAArB;AAsBA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,eAAelB,YAAY,CAACmB,aAAb,CAA2B;AACxCC,EAAAA,IAAI,EAAE;AADkC,CAA3B,CAAf;;AAIA,eAAeb,sBAAf,CAAsCN,OAAtC,EAA+C;AAC7C,QAAM;AAAEoB,IAAAA;AAAF,MAAiBpB,OAAO,CAACE,GAAR,CAAYC,OAAnC;AACAN,EAAAA,MAAM,CAACU,KAAP,CAAa,gCAAb,EAA+Ca,UAA/C;;AACA,MAAIA,UAAU,IAAIA,UAAU,CAACC,QAAX,CAAoB,eAApB,CAAlB,EAAwD;AACtD,UAAMC,QAAQ,GAAGF,UAAU,CAACG,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAjB;AACA,UAAMC,MAAM,GAAG,MAAM7B,MAAM,CAAC8B,MAAP,CAAcC,OAAd,CAAsB;AACzCC,MAAAA,UAAU,EAAE,CAAC,IAAD,CAD6B;AAEzCC,MAAAA,KAAK,EAAE;AAAEN,QAAAA;AAAF;AAFkC,KAAtB,CAArB;AAIA,WAAOE,MAAM,GAAGA,MAAM,CAACK,EAAV,GAAe,IAA5B;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASpB,uBAAT,CAAiCR,UAAjC,EAAqD;AACnD,QAAM6B,KAAK,GAAG7B,UAAU,CAACsB,KAAX,CAAiB,KAAjB,EAAwBQ,GAAxB,MAAiC,EAA/C;AACA,QAAMC,SAAS,GAAGxC,GAAG,CAACyC,MAAJ,CAAWH,KAAX,EAAkBI,OAAO,CAACC,GAAR,CAAYC,UAA9B,CAAlB;AACAvC,EAAAA,MAAM,CAACU,KAAP,CAAa,uCAAb,EAAsDyB,SAAtD,EAHmD,CAInD;;AACA,SAAOA,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAEH,EAAlB;AACD","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport { getSession } from \"next-auth/client\";\nimport { ApolloServer } from \"apollo-server-micro\";\nimport models from \"@/graphql/db/models\";\nimport { schema } from \"@/graphql/schema\";\nimport logger from \"shared/logger\";\n\nconst authHeaderPrefix = \"Basic \";\nconst apolloServer = new ApolloServer({\n  schema,\n  context: async context => {\n    const authHeader = context.req?.headers.authorization || \"\";\n    let author_id;\n    try {\n      author_id = await getAuthorFromSubdomain(context);\n      logger.debug(\"Author from subdomain - \", author_id);\n      if (!author_id && authHeader.length > authHeaderPrefix.length) {\n        author_id = getAuthorFromAuthHeader(authHeader);\n        logger.debug(\"Author from header - \", author_id);\n      }\n    } catch (e) {\n      console.log(\"e :>> \", e);\n    }\n    const session = await getSession(context);\n\n    return { ...context, models, author_id, session };\n  },\n  introspection: true,\n});\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default apolloServer.createHandler({\n  path: \"/api/graphql\",\n});\n\nasync function getAuthorFromSubdomain(context) {\n  const { identifier } = context.req.headers;\n  logger.debug(\"Host for checking subdomain - \", identifier);\n  if (identifier && identifier.includes(\"letterpad.app\")) {\n    const username = identifier.split(\".\")[0];\n    const author = await models.Author.findOne({\n      attributes: [\"id\"],\n      where: { username },\n    });\n    return author ? author.id : null;\n  }\n  return null;\n}\n\nfunction getAuthorFromAuthHeader(authHeader: string) {\n  const token = authHeader.split(/\\s+/).pop() || \"\";\n  const tokenData = jwt.verify(token, process.env.SECRET_KEY);\n  logger.debug(\"Authorisation Header to tokenData  - \", tokenData);\n  //@ts-ignore\n  return tokenData?.id;\n}\n"]},"metadata":{},"sourceType":"module"}