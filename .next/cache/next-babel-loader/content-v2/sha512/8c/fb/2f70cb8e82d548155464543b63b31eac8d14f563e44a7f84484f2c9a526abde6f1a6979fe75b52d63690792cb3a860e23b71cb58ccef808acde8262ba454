{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Author, { associateAuthor } from \"./author\";\nimport Media, { associateMedia } from \"./media\";\nimport Permission, { associatePermission } from \"./permission\";\nimport Post, { associatePost } from \"./post\";\nimport Role, { associateRole } from \"./role\";\nimport { Sequelize } from \"sequelize\";\nimport Setting from \"./setting\";\nimport Tags, { associateTags } from \"./tags\";\nimport dbConfig from \"../../../../config/db.config\";\nvar envs;\n\n(function (envs) {\n  envs[\"development\"] = \"development\";\n  envs[\"test\"] = \"test\";\n  envs[\"production\"] = \"production\";\n})(envs || (envs = {}));\n\nlet env = \"development\" ? envs[\"development\"] : envs.development;\nif (env === envs.development) env = envs.development;\nif (env === envs.test) env = envs.test;\nconst config = dbConfig[env]; // establish  database connection\n\nexport const conn = new Sequelize(config.database, config.username, config.password, _objectSpread(_objectSpread({}, config), {}, {\n  dialect: config.dialect || \"sqlite\"\n}));\nexport const modelsMap = {\n  Tags: Tags(conn),\n  Setting: Setting(conn),\n  Media: Media(conn),\n  Post: Post(conn),\n  Author: Author(conn),\n  Role: Role(conn),\n  Permission: Permission(conn)\n};\nassociateTags();\nassociatePost();\nassociateAuthor();\nassociateRole();\nassociatePermission();\nassociateMedia();\n\nconst models = _objectSpread({\n  Sequelize: Sequelize,\n  sequelize: conn\n}, modelsMap);\n\nexport default models;","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/db/models/index.ts"],"names":["Author","associateAuthor","Media","associateMedia","Permission","associatePermission","Post","associatePost","Role","associateRole","Sequelize","Setting","Tags","associateTags","dbConfig","envs","env","development","test","config","conn","database","username","password","dialect","modelsMap","models","sequelize"],"mappings":";;;;;;AAAA,OAAOA,MAAP,IAAiBC,eAAjB,QAAwC,UAAxC;AACA,OAAOC,KAAP,IAAgBC,cAAhB,QAAsC,SAAtC;AACA,OAAOC,UAAP,IAAqBC,mBAArB,QAAgD,cAAhD;AACA,OAAOC,IAAP,IAAeC,aAAf,QAAoC,QAApC;AACA,OAAOC,IAAP,IAAeC,aAAf,QAAoC,QAApC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,IAAP,IAAeC,aAAf,QAAoC,QAApC;AACA,OAAOC,QAAP,MAAqB,8BAArB;IAEKC,I;;WAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;GAAAA,I,KAAAA,I;;AAML,IAAIC,GAAS,GAAG,gBACZD,IAAI,eADQ,GAEZA,IAAI,CAACE,WAFT;AAIA,IAAID,GAAG,KAAKD,IAAI,CAACE,WAAjB,EAA8BD,GAAG,GAAGD,IAAI,CAACE,WAAX;AAC9B,IAAID,GAAG,KAAKD,IAAI,CAACG,IAAjB,EAAuBF,GAAG,GAAGD,IAAI,CAACG,IAAX;AAEvB,MAAMC,MAAM,GAAGL,QAAQ,CAACE,GAAD,CAAvB,C,CACA;;AACA,OAAO,MAAMI,IAAI,GAAG,IAAIV,SAAJ,CAClBS,MAAM,CAACE,QADW,EAElBF,MAAM,CAACG,QAFW,EAGlBH,MAAM,CAACI,QAHW,kCAKbJ,MALa;AAMhBK,EAAAA,OAAO,EAAEL,MAAM,CAACK,OAAP,IAAkB;AANX,GAAb;AAUP,OAAO,MAAMC,SAAS,GAAG;AACvBb,EAAAA,IAAI,EAAEA,IAAI,CAACQ,IAAD,CADa;AAEvBT,EAAAA,OAAO,EAAEA,OAAO,CAACS,IAAD,CAFO;AAGvBlB,EAAAA,KAAK,EAAEA,KAAK,CAACkB,IAAD,CAHW;AAIvBd,EAAAA,IAAI,EAAEA,IAAI,CAACc,IAAD,CAJa;AAKvBpB,EAAAA,MAAM,EAAEA,MAAM,CAACoB,IAAD,CALS;AAMvBZ,EAAAA,IAAI,EAAEA,IAAI,CAACY,IAAD,CANa;AAOvBhB,EAAAA,UAAU,EAAEA,UAAU,CAACgB,IAAD;AAPC,CAAlB;AAUPP,aAAa;AACbN,aAAa;AACbN,eAAe;AACfQ,aAAa;AACbJ,mBAAmB;AACnBF,cAAc;;AAEd,MAAMuB,MAAM;AAAKhB,EAAAA,SAAS,EAAEA,SAAhB;AAA2BiB,EAAAA,SAAS,EAAEP;AAAtC,GAA+CK,SAA/C,CAAZ;;AAEA,eAAeC,MAAf","sourcesContent":["import Author, { associateAuthor } from \"./author\";\nimport Media, { associateMedia } from \"./media\";\nimport Permission, { associatePermission } from \"./permission\";\nimport Post, { associatePost } from \"./post\";\nimport Role, { associateRole } from \"./role\";\nimport { Sequelize } from \"sequelize\";\nimport Setting from \"./setting\";\nimport Tags, { associateTags } from \"./tags\";\nimport dbConfig from \"../../../../config/db.config\";\n\nenum envs {\n  development = \"development\",\n  test = \"test\",\n  production = \"production\",\n}\n\nlet env: envs = process.env.NODE_ENV\n  ? envs[process.env.NODE_ENV as envs]\n  : envs.development;\n\nif (env === envs.development) env = envs.development;\nif (env === envs.test) env = envs.test;\n\nconst config = dbConfig[env];\n// establish  database connection\nexport const conn = new Sequelize(\n  config.database,\n  config.username,\n  config.password,\n  {\n    ...config,\n    dialect: config.dialect || \"sqlite\",\n  },\n);\n\nexport const modelsMap = {\n  Tags: Tags(conn),\n  Setting: Setting(conn),\n  Media: Media(conn),\n  Post: Post(conn),\n  Author: Author(conn),\n  Role: Role(conn),\n  Permission: Permission(conn),\n};\n\nassociateTags();\nassociatePost();\nassociateAuthor();\nassociateRole();\nassociatePermission();\nassociateMedia();\n\nconst models = { Sequelize: Sequelize, sequelize: conn, ...modelsMap };\n\nexport default models;\n"]},"metadata":{},"sourceType":"module"}