{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/ImageUpload.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useRef, useState } from \"react\";\nimport { Upload, message } from \"antd\";\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport nextConfig from \"../../next.config\";\nimport FileExplorer from \"./file-explorer\";\nimport { getBase64 } from \"../../shared/utils\";\n\nconst ImageUpload = ({\n  url,\n  onDone,\n  name\n}) => {\n  const {\n    0: previewUrl,\n    1: setPreviewUrl\n  } = useState(\"\");\n  const {\n    0: previewTitle,\n    1: setPreviewTitle\n  } = useState(\"\");\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: previewVisible,\n    1: setPreviewVisible\n  } = useState(false);\n  const {\n    0: fileList,\n    1: setFileList\n  } = useState([]);\n  const {\n    0: explorerVisible,\n    1: setExplorerVisible\n  } = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    if (url) {\n      // @ts-ignore\n      setFileList([{\n        url,\n        status: \"done\",\n        uid: \"1\",\n        size: 200,\n        name\n      }]);\n    }\n  }, [url]);\n\n  const handleChange = async info => {\n    if (info.file.status === \"uploading\") {\n      setLoading(true);\n    } else if (info.file.status === \"done\") {\n      setLoading(false);\n      onDone(info.file.response);\n      setFileList(info.fileList);\n      return;\n    } else if (info.file.status === \"removed\") {\n      onDone([{\n        src: \"\",\n        name: \"\",\n        error: \"\",\n        size: {\n          width: 0,\n          height: 0,\n          type: \"\"\n        }\n      }]);\n    }\n\n    setFileList(info.fileList);\n  };\n\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    setPreviewVisible(true);\n    setPreviewUrl(file.url || file.preview);\n    setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf(\"/\") + 1));\n  };\n\n  const uploadButton = __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, loading ? __jsx(LoadingOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 18\n    }\n  }) : __jsx(PlusOutlined, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 40\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Upload\"));\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    onClick: () => {\n      if (fileList.length > 0) return;\n      setExplorerVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, __jsx(Upload, {\n    openFileDialogOnClick: false,\n    name: \"avatar\",\n    listType: \"picture-card\",\n    className: \"avatar-uploader\",\n    showUploadList: true,\n    action: nextConfig.basePath + \"/api/customRequest\",\n    beforeUpload: beforeUpload,\n    onChange: handleChange,\n    fileList: fileList,\n    onPreview: handlePreview,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, fileList.length === 0 && uploadButton)), __jsx(Modal, {\n    visible: previewVisible,\n    title: previewTitle,\n    footer: null,\n    onCancel: () => {\n      setPreviewVisible(false);\n      setPreviewUrl(\"\");\n      setPreviewTitle(\"\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    alt: \"example\",\n    style: {\n      width: \"100%\"\n    },\n    src: previewUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), __jsx(FileExplorer, {\n    isVisible: explorerVisible,\n    handleCancel: () => setExplorerVisible(false),\n    onInsert: async files => {\n      const result = [];\n\n      for (url in files) {\n        const item = files[url];\n        result.push({\n          src: url,\n          name: \"does-not-matter\",\n          error: \"\",\n          size: {\n            width: item.width || 0,\n            height: item.height || 0,\n            type: \"\"\n          }\n        });\n      }\n\n      onDone(result);\n      setExplorerVisible(false);\n      return Promise.resolve(result);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ImageUpload;\nexport function beforeUpload(file) {\n  const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\" || file.type === \"image/webp\";\n\n  if (!isJpgOrPng) {\n    message.error(\"You can only upload JPG/PNG file!\");\n  }\n\n  const isLt2M = file.size / 1024 / 1024 < 2;\n\n  if (!isLt2M) {\n    message.error(\"Image must smaller than 2MB!\");\n  }\n\n  return isJpgOrPng && isLt2M;\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/ImageUpload.tsx"],"names":["useEffect","useRef","useState","Upload","message","LoadingOutlined","PlusOutlined","Modal","nextConfig","FileExplorer","getBase64","ImageUpload","url","onDone","name","previewUrl","setPreviewUrl","previewTitle","setPreviewTitle","loading","setLoading","previewVisible","setPreviewVisible","fileList","setFileList","explorerVisible","setExplorerVisible","ref","status","uid","size","handleChange","info","file","response","src","error","width","height","type","handlePreview","preview","originFileObj","substring","lastIndexOf","uploadButton","marginTop","length","basePath","beforeUpload","files","result","item","push","Promise","resolve","isJpgOrPng","isLt2M"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { Upload, message } from \"antd\";\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { IMediaUploadResult } from \"@/graphql/types\";\nimport { UploadChangeParam } from \"antd/lib/upload\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport nextConfig from \"../../next.config\";\nimport FileExplorer from \"./file-explorer\";\nimport { getBase64 } from \"../../shared/utils\";\n\ninterface IProps {\n  url: string;\n  name: string;\n  onDone: (response: IMediaUploadResult[]) => void;\n}\nconst ImageUpload = ({ url, onDone, name }: IProps) => {\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n  const [previewTitle, setPreviewTitle] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [fileList, setFileList] = useState<UploadChangeParam[\"fileList\"]>([]);\n  const [explorerVisible, setExplorerVisible] = useState(false);\n\n  const ref = useRef();\n  useEffect(() => {\n    if (url) {\n      // @ts-ignore\n      setFileList([{ url, status: \"done\", uid: \"1\", size: 200, name }]);\n    }\n  }, [url]);\n\n  const handleChange = async (info: UploadChangeParam) => {\n    if (info.file.status === \"uploading\") {\n      setLoading(true);\n    } else if (info.file.status === \"done\") {\n      setLoading(false);\n      onDone(info.file.response);\n      setFileList(info.fileList);\n      return;\n    } else if (info.file.status === \"removed\") {\n      onDone([\n        {\n          src: \"\",\n          name: \"\",\n          error: \"\",\n          size: { width: 0, height: 0, type: \"\" },\n        },\n      ]);\n    }\n    setFileList(info.fileList);\n  };\n\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    setPreviewVisible(true);\n    setPreviewUrl(file.url || file.preview);\n    setPreviewTitle(\n      file.name || file.url.substring(file.url.lastIndexOf(\"/\") + 1),\n    );\n  };\n\n  const uploadButton = (\n    <div>\n      {loading ? <LoadingOutlined /> : <PlusOutlined />}\n      <div style={{ marginTop: 8 }}>Upload</div>\n    </div>\n  );\n\n  return (\n    <>\n      <div\n        onClick={() => {\n          if (fileList.length > 0) return;\n          setExplorerVisible(true);\n        }}\n      >\n        <Upload\n          openFileDialogOnClick={false}\n          name=\"avatar\"\n          listType=\"picture-card\"\n          className=\"avatar-uploader\"\n          showUploadList={true}\n          action={nextConfig.basePath + \"/api/customRequest\"}\n          beforeUpload={beforeUpload}\n          onChange={handleChange}\n          fileList={fileList}\n          onPreview={handlePreview}\n          ref={ref}\n        >\n          {fileList.length === 0 && uploadButton}\n        </Upload>\n      </div>\n      <Modal\n        visible={previewVisible}\n        title={previewTitle}\n        footer={null}\n        onCancel={() => {\n          setPreviewVisible(false);\n          setPreviewUrl(\"\");\n          setPreviewTitle(\"\");\n        }}\n      >\n        <img alt=\"example\" style={{ width: \"100%\" }} src={previewUrl} />\n      </Modal>\n      <FileExplorer\n        isVisible={explorerVisible}\n        handleCancel={() => setExplorerVisible(false)}\n        onInsert={async files => {\n          const result: IMediaUploadResult[] = [];\n          for (url in files) {\n            const item = files[url];\n            result.push({\n              src: url,\n              name: \"does-not-matter\",\n              error: \"\",\n              size: {\n                width: item.width || 0,\n                height: item.height || 0,\n                type: \"\",\n              },\n            });\n          }\n          onDone(result);\n          setExplorerVisible(false);\n          return Promise.resolve(result);\n        }}\n      />\n    </>\n  );\n};\n\nexport default ImageUpload;\n\nexport function beforeUpload(file: File) {\n  const isJpgOrPng =\n    file.type === \"image/jpeg\" ||\n    file.type === \"image/png\" ||\n    file.type === \"image/webp\";\n  if (!isJpgOrPng) {\n    message.error(\"You can only upload JPG/PNG file!\");\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error(\"Image must smaller than 2MB!\");\n  }\n  return isJpgOrPng && isLt2M;\n}\n"]},"metadata":{},"sourceType":"module"}