{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Internal.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport { MediaDocument } from \"@/__generated__/queries/queries.graphql\";\nimport InfiniteScrollList from \"../InfiniteScrollList\";\n\nconst InternalMedia = ({\n  renderer\n}) => {\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  const {\n    0: totalCount,\n    1: setTotalCount\n  } = useState(0);\n  let mounted = false;\n  useEffect(() => {\n    mounted = true;\n    fetchInternalMedia();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const fetchInternalMedia = async (page = 1) => {\n    const client = await initializeApollo();\n    const result = await client.query({\n      query: MediaDocument,\n      variables: {\n        filters: {\n          page // authorId: 1,\n\n        }\n      }\n    });\n    const images = {\n      rows: result.data.media.rows,\n      count: result.data.media.count\n    };\n\n    if (mounted) {\n      setData([...data, ...images.rows]);\n      setTotalCount(images.count);\n    }\n  };\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage);\n    fetchInternalMedia(nextPage);\n  };\n\n  if (data.length === 0) {\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }\n    }, \"You do not have any images in your gallery.\");\n  }\n\n  const jsxElements = renderer(data);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(InfiniteScrollList, {\n    data: jsxElements,\n    count: totalCount,\n    loadMore: loadMore,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default InternalMedia;","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Internal.tsx"],"names":["React","useEffect","useState","initializeApollo","MediaDocument","InfiniteScrollList","InternalMedia","renderer","page","setPage","data","setData","totalCount","setTotalCount","mounted","fetchInternalMedia","client","result","query","variables","filters","images","rows","media","count","loadMore","nextPage","length","jsxElements"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAKA,SAASC,aAAT,QAA8B,yCAA9B;AAEA,OAAOC,kBAAP,MAA+B,uBAA/B;;AAMA,MAAMC,aAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACxD,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBP,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAACQ,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAU,EAAV,CAAhC;AACA,QAAM;AAAA,OAACU,UAAD;AAAA,OAAaC;AAAb,MAA8BX,QAAQ,CAAC,CAAD,CAA5C;AAEA,MAAIY,OAAO,GAAG,KAAd;AACAb,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,kBAAkB;AAElB,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMC,kBAAkB,GAAG,OAAOP,IAAI,GAAG,CAAd,KAAoB;AAC7C,UAAMQ,MAAM,GAAG,MAAMb,gBAAgB,EAArC;AACA,UAAMc,MAAM,GAAG,MAAMD,MAAM,CAACE,KAAP,CAA8C;AACjEA,MAAAA,KAAK,EAAEd,aAD0D;AAEjEe,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAE;AACPZ,UAAAA,IADO,CAEP;;AAFO;AADA;AAFsD,KAA9C,CAArB;AAUA,UAAMa,MAAM,GAAG;AACbC,MAAAA,IAAI,EAAEL,MAAM,CAACP,IAAP,CAAYa,KAAZ,CAAkBD,IADX;AAEbE,MAAAA,KAAK,EAAEP,MAAM,CAACP,IAAP,CAAYa,KAAZ,CAAkBC;AAFZ,KAAf;;AAIA,QAAIV,OAAJ,EAAa;AACXH,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGW,MAAM,CAACC,IAApB,CAAD,CAAP;AACAT,MAAAA,aAAa,CAACQ,MAAM,CAACG,KAAR,CAAb;AACD;AACF,GApBD;;AAsBA,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMC,QAAQ,GAAGlB,IAAI,GAAG,CAAxB;AACAC,IAAAA,OAAO,CAACiB,QAAD,CAAP;AACAX,IAAAA,kBAAkB,CAACW,QAAD,CAAlB;AACD,GAJD;;AAMA,MAAIhB,IAAI,CAACiB,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAP;AACD;;AAED,QAAMC,WAAW,GAAGrB,QAAQ,CAACG,IAAD,CAA5B;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,kBAAD;AACE,IAAA,IAAI,EAAEkB,WADR;AAEE,IAAA,KAAK,EAAEhB,UAFT;AAGE,IAAA,QAAQ,EAAEa,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AASD,CA1DD;;AA4DA,eAAenB,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport {\n  MediaQuery,\n  MediaQueryVariables,\n} from \"@/graphql/queries/queries.graphql\";\nimport { MediaDocument } from \"@/__generated__/queries/queries.graphql\";\nimport { Media } from \"@/__generated__/type-defs.graphqls\";\nimport InfiniteScrollList from \"../InfiniteScrollList\";\n\ninterface IProps {\n  renderer: (items: Media[]) => JSX.Element[];\n}\n\nconst InternalMedia: React.FC<IProps> = ({ renderer }) => {\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState<Media[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n\n  let mounted = false;\n  useEffect(() => {\n    mounted = true;\n    fetchInternalMedia();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const fetchInternalMedia = async (page = 1) => {\n    const client = await initializeApollo();\n    const result = await client.query<MediaQuery, MediaQueryVariables>({\n      query: MediaDocument,\n      variables: {\n        filters: {\n          page,\n          // authorId: 1,\n        },\n      },\n    });\n\n    const images = {\n      rows: result.data.media.rows,\n      count: result.data.media.count,\n    };\n    if (mounted) {\n      setData([...data, ...images.rows]);\n      setTotalCount(images.count);\n    }\n  };\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage);\n    fetchInternalMedia(nextPage);\n  };\n\n  if (data.length === 0) {\n    return <p>You do not have any images in your gallery.</p>;\n  }\n\n  const jsxElements = renderer(data);\n\n  return (\n    <div>\n      <InfiniteScrollList\n        data={jsxElements}\n        count={totalCount}\n        loadMore={loadMore}\n      />\n    </div>\n  );\n};\n\nexport default InternalMedia;\n"]},"metadata":{},"sourceType":"module"}