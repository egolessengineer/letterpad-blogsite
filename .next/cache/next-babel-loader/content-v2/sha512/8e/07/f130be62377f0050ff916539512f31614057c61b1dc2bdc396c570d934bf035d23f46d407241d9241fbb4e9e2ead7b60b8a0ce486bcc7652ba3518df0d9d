{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getReadableDate } from \"../../resolvers/helpers\";\nimport { DataTypes, Model } from \"sequelize\";\nimport restoreSequelizeAttributesOnClass from \"./_tooling\";\nimport { Author } from \"./author\";\nexport class Media extends Model {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"createdAt\", void 0);\n\n    _defineProperty(this, \"updatedAt\", void 0);\n\n    _defineProperty(this, \"author_id\", void 0);\n\n    restoreSequelizeAttributesOnClass(new.target, this, []);\n  }\n\n}\nexport default function initMedia(sequelize) {\n  Media.init({\n    id: {\n      type: DataTypes.INTEGER,\n      autoIncrement: true,\n      primaryKey: true\n    },\n    name: {\n      type: DataTypes.STRING\n    },\n    url: {\n      type: DataTypes.STRING\n    },\n    width: {\n      type: DataTypes.INTEGER\n    },\n    height: {\n      type: DataTypes.INTEGER\n    },\n    description: {\n      type: DataTypes.STRING\n    },\n    updatedAt: {\n      type: DataTypes.DATE,\n\n      get() {\n        return getReadableDate(this.getDataValue(\"updatedAt\") || new Date());\n      }\n\n    },\n    createdAt: {\n      type: DataTypes.DATE,\n\n      get() {\n        return getReadableDate(this.getDataValue(\"createdAt\") || new Date());\n      }\n\n    }\n  }, {\n    tableName: \"media\",\n    name: {\n      singular: \"Media\",\n      plural: \"Media\"\n    },\n    sequelize // passing the `sequelize` instance is required\n\n  });\n  return Media;\n}\nexport function associateMedia() {\n  Media.belongsTo(Author, {\n    foreignKey: \"author_id\"\n  });\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/db/models/media.ts"],"names":["getReadableDate","DataTypes","Model","restoreSequelizeAttributesOnClass","Author","Media","constructor","args","new","target","initMedia","sequelize","init","id","type","INTEGER","autoIncrement","primaryKey","name","STRING","url","width","height","description","updatedAt","DATE","get","getDataValue","Date","createdAt","tableName","singular","plural","associateMedia","belongsTo","foreignKey"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,yBAAhC;AACA,SAASC,SAAT,EAAoBC,KAApB,QAA2C,WAA3C;AAEA,OAAOC,iCAAP,MAA8C,YAA9C;AACA,SAASC,MAAT,QAAuB,UAAvB;AAiBA,OAAO,MAAMC,KAAN,SACGH,KADH,CAGP;AAaEI,EAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;;AADmB;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAEnBJ,IAAAA,iCAAiC,CAACK,GAAG,CAACC,MAAL,EAAa,IAAb,EAAmB,EAAnB,CAAjC;AACD;;AAhBH;AAmBA,eAAe,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AAC3CN,EAAAA,KAAK,CAACO,IAAN,CACE;AACEC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAEb,SAAS,CAACc,OADd;AAEFC,MAAAA,aAAa,EAAE,IAFb;AAGFC,MAAAA,UAAU,EAAE;AAHV,KADN;AAMEC,IAAAA,IAAI,EAAE;AACJJ,MAAAA,IAAI,EAAEb,SAAS,CAACkB;AADZ,KANR;AASEC,IAAAA,GAAG,EAAE;AACHN,MAAAA,IAAI,EAAEb,SAAS,CAACkB;AADb,KATP;AAYEE,IAAAA,KAAK,EAAE;AACLP,MAAAA,IAAI,EAAEb,SAAS,CAACc;AADX,KAZT;AAeEO,IAAAA,MAAM,EAAE;AACNR,MAAAA,IAAI,EAAEb,SAAS,CAACc;AADV,KAfV;AAkBEQ,IAAAA,WAAW,EAAE;AACXT,MAAAA,IAAI,EAAEb,SAAS,CAACkB;AADL,KAlBf;AAqBEK,IAAAA,SAAS,EAAE;AACTV,MAAAA,IAAI,EAAEb,SAAS,CAACwB,IADP;;AAETC,MAAAA,GAAG,GAAG;AACJ,eAAO1B,eAAe,CAAC,KAAK2B,YAAL,CAAkB,WAAlB,KAAkC,IAAIC,IAAJ,EAAnC,CAAtB;AACD;;AAJQ,KArBb;AA2BEC,IAAAA,SAAS,EAAE;AACTf,MAAAA,IAAI,EAAEb,SAAS,CAACwB,IADP;;AAETC,MAAAA,GAAG,GAAG;AACJ,eAAO1B,eAAe,CAAC,KAAK2B,YAAL,CAAkB,WAAlB,KAAkC,IAAIC,IAAJ,EAAnC,CAAtB;AACD;;AAJQ;AA3Bb,GADF,EAmCE;AACEE,IAAAA,SAAS,EAAE,OADb;AAEEZ,IAAAA,IAAI,EAAE;AACJa,MAAAA,QAAQ,EAAE,OADN;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAFR;AAMErB,IAAAA,SANF,CAMa;;AANb,GAnCF;AA6CA,SAAON,KAAP;AACD;AAED,OAAO,SAAS4B,cAAT,GAA0B;AAC/B5B,EAAAA,KAAK,CAAC6B,SAAN,CAAgB9B,MAAhB,EAAwB;AACtB+B,IAAAA,UAAU,EAAE;AADU,GAAxB;AAGD","sourcesContent":["import { getReadableDate } from \"../../resolvers/helpers\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nimport restoreSequelizeAttributesOnClass from \"./_tooling\";\nimport { Author } from \"./author\";\n\nexport interface MediaAttributes {\n  id: number;\n  url: string;\n  name: string;\n  width: number;\n  height: number;\n  description: string;\n  updatedAt?: Date;\n  createdAt: Date;\n  author_id?: number;\n}\n\nexport interface MediaCreationAttributes\n  extends Optional<MediaAttributes, \"id\"> {}\n\nexport class Media\n  extends Model<MediaAttributes, MediaCreationAttributes>\n  implements MediaAttributes\n{\n  public id!: number;\n  public name!: string;\n  public url!: string;\n  public width!: number;\n  public height!: number;\n  public description!: string;\n\n  public readonly createdAt!: Date;\n  public readonly updatedAt!: Date;\n\n  public readonly author_id?: number;\n\n  constructor(...args) {\n    super(...args);\n    restoreSequelizeAttributesOnClass(new.target, this, []);\n  }\n}\n\nexport default function initMedia(sequelize) {\n  Media.init(\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n      },\n      url: {\n        type: DataTypes.STRING,\n      },\n      width: {\n        type: DataTypes.INTEGER,\n      },\n      height: {\n        type: DataTypes.INTEGER,\n      },\n      description: {\n        type: DataTypes.STRING,\n      },\n      updatedAt: {\n        type: DataTypes.DATE,\n        get() {\n          return getReadableDate(this.getDataValue(\"updatedAt\") || new Date());\n        },\n      },\n      createdAt: {\n        type: DataTypes.DATE,\n        get() {\n          return getReadableDate(this.getDataValue(\"createdAt\") || new Date());\n        },\n      },\n    },\n    {\n      tableName: \"media\",\n      name: {\n        singular: \"Media\",\n        plural: \"Media\",\n      },\n      sequelize, // passing the `sequelize` instance is required\n    },\n  );\n\n  return Media;\n}\n\nexport function associateMedia() {\n  Media.belongsTo(Author, {\n    foreignKey: \"author_id\",\n  });\n}\n"]},"metadata":{},"sourceType":"module"}