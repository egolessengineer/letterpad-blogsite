{"ast":null,"code":"import _regeneratorRuntime from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Internal.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport { MediaDocument } from \"@/__generated__/queries/queries.graphql\";\nimport InfiniteScrollList from \"../InfiniteScrollList\";\n\nvar InternalMedia = function InternalMedia(_ref) {\n  _s();\n\n  var renderer = _ref.renderer;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var _useState2 = useState([]),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(0),\n      totalCount = _useState3[0],\n      setTotalCount = _useState3[1];\n\n  var mounted = false;\n  useEffect(function () {\n    mounted = true;\n    fetchInternalMedia();\n    return function () {\n      mounted = false;\n    };\n  }, []);\n\n  var fetchInternalMedia = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var page,\n          client,\n          result,\n          images,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              page = _args.length > 0 && _args[0] !== undefined ? _args[0] : 1;\n              _context.next = 3;\n              return initializeApollo();\n\n            case 3:\n              client = _context.sent;\n              _context.next = 6;\n              return client.query({\n                query: MediaDocument,\n                variables: {\n                  filters: {\n                    page: page // authorId: 1,\n\n                  }\n                }\n              });\n\n            case 6:\n              result = _context.sent;\n              images = {\n                rows: result.data.media.rows,\n                count: result.data.media.count\n              };\n\n              if (mounted) {\n                setData([].concat(_toConsumableArray(data), _toConsumableArray(images.rows)));\n                setTotalCount(images.count);\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchInternalMedia() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var loadMore = function loadMore() {\n    var nextPage = page + 1;\n    setPage(nextPage);\n    fetchInternalMedia(nextPage);\n  };\n\n  if (data.length === 0) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 12\n      }\n    }, \"You do not have any images in your gallery.\");\n  }\n\n  var jsxElements = renderer(data);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(InfiniteScrollList, {\n    data: jsxElements,\n    count: totalCount,\n    loadMore: loadMore,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(InternalMedia, \"SuwFpPrWJHsBJkbJawfLyoR9fAY=\");\n\n_c = InternalMedia;\nexport default InternalMedia;\n\nvar _c;\n\n$RefreshReg$(_c, \"InternalMedia\");","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/components/file-explorer/providers/Internal.tsx"],"names":["React","useEffect","useState","initializeApollo","MediaDocument","InfiniteScrollList","InternalMedia","renderer","page","setPage","data","setData","totalCount","setTotalCount","mounted","fetchInternalMedia","client","query","variables","filters","result","images","rows","media","count","loadMore","nextPage","length","jsxElements"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAKA,SAASC,aAAT,QAA8B,yCAA9B;AAEA,OAAOC,kBAAP,MAA+B,uBAA/B;;AAMA,IAAMC,aAA+B,GAAG,SAAlCA,aAAkC,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAChCL,QAAQ,CAAC,CAAD,CADwB;AAAA,MACjDM,IADiD;AAAA,MAC3CC,OAD2C;;AAAA,mBAEhCP,QAAQ,CAAU,EAAV,CAFwB;AAAA,MAEjDQ,IAFiD;AAAA,MAE3CC,OAF2C;;AAAA,mBAGpBT,QAAQ,CAAC,CAAD,CAHY;AAAA,MAGjDU,UAHiD;AAAA,MAGrCC,aAHqC;;AAKxD,MAAIC,OAAO,GAAG,KAAd;AACAb,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,kBAAkB;AAElB,WAAO,YAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT;;AASA,MAAMC,kBAAkB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOP,cAAAA,IAAP,2DAAc,CAAd;AAAA;AAAA,qBACJL,gBAAgB,EADZ;;AAAA;AACnBa,cAAAA,MADmB;AAAA;AAAA,qBAEJA,MAAM,CAACC,KAAP,CAA8C;AACjEA,gBAAAA,KAAK,EAAEb,aAD0D;AAEjEc,gBAAAA,SAAS,EAAE;AACTC,kBAAAA,OAAO,EAAE;AACPX,oBAAAA,IAAI,EAAJA,IADO,CAEP;;AAFO;AADA;AAFsD,eAA9C,CAFI;;AAAA;AAEnBY,cAAAA,MAFmB;AAYnBC,cAAAA,MAZmB,GAYV;AACbC,gBAAAA,IAAI,EAAEF,MAAM,CAACV,IAAP,CAAYa,KAAZ,CAAkBD,IADX;AAEbE,gBAAAA,KAAK,EAAEJ,MAAM,CAACV,IAAP,CAAYa,KAAZ,CAAkBC;AAFZ,eAZU;;AAgBzB,kBAAIV,OAAJ,EAAa;AACXH,gBAAAA,OAAO,8BAAKD,IAAL,sBAAcW,MAAM,CAACC,IAArB,GAAP;AACAT,gBAAAA,aAAa,CAACQ,MAAM,CAACG,KAAR,CAAb;AACD;;AAnBwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBT,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAsBA,MAAMU,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,QAAMC,QAAQ,GAAGlB,IAAI,GAAG,CAAxB;AACAC,IAAAA,OAAO,CAACiB,QAAD,CAAP;AACAX,IAAAA,kBAAkB,CAACW,QAAD,CAAlB;AACD,GAJD;;AAMA,MAAIhB,IAAI,CAACiB,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAP;AACD;;AAED,MAAMC,WAAW,GAAGrB,QAAQ,CAACG,IAAD,CAA5B;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,kBAAD;AACE,IAAA,IAAI,EAAEkB,WADR;AAEE,IAAA,KAAK,EAAEhB,UAFT;AAGE,IAAA,QAAQ,EAAEa,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AASD,CA1DD;;GAAMnB,a;;KAAAA,a;AA4DN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { initializeApollo } from \"@/graphql/apollo\";\nimport {\n  MediaQuery,\n  MediaQueryVariables,\n} from \"@/graphql/queries/queries.graphql\";\nimport { MediaDocument } from \"@/__generated__/queries/queries.graphql\";\nimport { Media } from \"@/__generated__/type-defs.graphqls\";\nimport InfiniteScrollList from \"../InfiniteScrollList\";\n\ninterface IProps {\n  renderer: (items: Media[]) => JSX.Element[];\n}\n\nconst InternalMedia: React.FC<IProps> = ({ renderer }) => {\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState<Media[]>([]);\n  const [totalCount, setTotalCount] = useState(0);\n\n  let mounted = false;\n  useEffect(() => {\n    mounted = true;\n    fetchInternalMedia();\n\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const fetchInternalMedia = async (page = 1) => {\n    const client = await initializeApollo();\n    const result = await client.query<MediaQuery, MediaQueryVariables>({\n      query: MediaDocument,\n      variables: {\n        filters: {\n          page,\n          // authorId: 1,\n        },\n      },\n    });\n\n    const images = {\n      rows: result.data.media.rows,\n      count: result.data.media.count,\n    };\n    if (mounted) {\n      setData([...data, ...images.rows]);\n      setTotalCount(images.count);\n    }\n  };\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    setPage(nextPage);\n    fetchInternalMedia(nextPage);\n  };\n\n  if (data.length === 0) {\n    return <p>You do not have any images in your gallery.</p>;\n  }\n\n  const jsxElements = renderer(data);\n\n  return (\n    <div>\n      <InfiniteScrollList\n        data={jsxElements}\n        count={totalCount}\n        loadMore={loadMore}\n      />\n    </div>\n  );\n};\n\nexport default InternalMedia;\n"]},"metadata":{},"sourceType":"module"}