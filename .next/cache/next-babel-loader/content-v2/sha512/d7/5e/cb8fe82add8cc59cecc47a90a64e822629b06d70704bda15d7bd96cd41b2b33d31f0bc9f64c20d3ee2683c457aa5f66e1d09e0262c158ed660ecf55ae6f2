{"ast":null,"code":"import _defineProperty from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"/Users/abhi/www/letterpad-admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$();\n\nfunction _templateObject13() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ResetPassword($password: String!, $token: String!) {\\n  resetPassword(password: $password, token: $token) {\\n    ok\\n    message\\n  }\\n}\\n    \"]);\n\n  _templateObject13 = function _templateObject13() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation ForgotPassword($email: String!) {\\n  forgotPassword(email: $email) {\\n    ok\\n    message\\n  }\\n}\\n    \"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteMedia($ids: [Int!]!) {\\n  deleteMedia(ids: $ids) {\\n    ... on MediaDeleteResult {\\n      ok\\n    }\\n    ... on MediaError {\\n      message\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdateMedia($data: InputUpdateMedia!) {\\n  updateMedia(data: $data) {\\n    ... on MediaUpdateResult {\\n      ok\\n    }\\n    ... on MediaError {\\n      message\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation updatePost($data: InputUpdatePost) {\\n  updatePost(data: $data) {\\n    ... on Post {\\n      ...Partial\\n      author {\\n        id\\n        name\\n        avatar\\n        social {\\n          github\\n          twitter\\n          instagram\\n        }\\n        bio\\n      }\\n      tags {\\n        id\\n        name\\n        slug\\n      }\\n    }\\n    ... on PostError {\\n      message\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation createPost($data: InputCreatePost) {\\n  createPost(data: $data) {\\n    ... on Post {\\n      ...Partial\\n      author {\\n        name\\n      }\\n      tags {\\n        id\\n        name\\n        slug\\n      }\\n    }\\n    ... on PostError {\\n      message\\n    }\\n  }\\n}\\n    \", \"\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdateAuthor($author: InputAuthor!) {\\n  updateAuthor(author: $author) {\\n    ok\\n    errors {\\n      path\\n      message\\n    }\\n    data {\\n      name\\n      social {\\n        github\\n        twitter\\n        instagram\\n        facebook\\n      }\\n      bio\\n      avatar\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdateOptions($options: [OptionInputType!]!) {\\n  updateOptions(options: $options) {\\n    site_title\\n    site_tagline\\n    site_email\\n    site_url\\n    site_footer\\n    site_description\\n    subscribe_embed\\n    social_twitter\\n    social_facebook\\n    social_instagram\\n    social_github\\n    displayAuthorInfo\\n    cloudinary_key\\n    cloudinary_name\\n    cloudinary_secret\\n    menu {\\n      label\\n      original_name\\n      slug\\n      type\\n    }\\n    css\\n    google_analytics\\n    theme\\n    disqus_id\\n    banner {\\n      src\\n      width\\n      height\\n    }\\n    site_logo {\\n      src\\n      width\\n      height\\n    }\\n    site_favicon {\\n      src\\n      width\\n      height\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CreateAuthor($data: InputCreateAuthor!) {\\n  createAuthor(data: $data) {\\n    ... on Author {\\n      name\\n    }\\n    ... on CreateAuthorError {\\n      message\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation DeleteTags($id: Int!) {\\n  deleteTags(id: $id) {\\n    ... on DeleteTagsResult {\\n      ok\\n    }\\n    ... on TagsError {\\n      message\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UpdateTags($data: InputTags) {\\n  updateTags(data: $data) {\\n    ... on EditTaxResponse {\\n      ok\\n    }\\n    ... on TagsError {\\n      message\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation Login($data: LoginData) {\\n  login(data: $data) {\\n    ... on Author {\\n      id\\n      name\\n      email\\n      role\\n      avatar\\n      permissions\\n      bio\\n      username\\n    }\\n    ... on LoginError {\\n      message\\n    }\\n  }\\n}\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    fragment Partial on Post {\\n  id\\n  title\\n  html\\n  excerpt\\n  featured\\n  md\\n  md_draft\\n  type\\n  slug\\n  status\\n  createdAt\\n  publishedAt\\n  scheduledAt\\n  updatedAt\\n  reading_time\\n  cover_image {\\n    src\\n    width\\n    height\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/* 1d63ec5387065349bef873f4de8c4e1de9e66f52\n * This file is automatically generated by graphql-let. */\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nvar defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\nexport var PostStatusOptions;\n\n(function (PostStatusOptions) {\n  PostStatusOptions[\"Published\"] = \"published\";\n  PostStatusOptions[\"Draft\"] = \"draft\";\n  PostStatusOptions[\"Trashed\"] = \"trashed\";\n})(PostStatusOptions || (PostStatusOptions = {}));\n\nexport var PostTypes;\n\n(function (PostTypes) {\n  PostTypes[\"Post\"] = \"post\";\n  PostTypes[\"Page\"] = \"page\";\n})(PostTypes || (PostTypes = {}));\n\nexport var SortBy;\n\n(function (SortBy) {\n  SortBy[\"Asc\"] = \"ASC\";\n  SortBy[\"Desc\"] = \"DESC\";\n})(SortBy || (SortBy = {}));\n\nexport var NavigationType;\n\n(function (NavigationType) {\n  NavigationType[\"Tag\"] = \"tag\";\n  NavigationType[\"Page\"] = \"page\";\n  NavigationType[\"Custom\"] = \"custom\";\n})(NavigationType || (NavigationType = {}));\n\nexport var Role;\n\n(function (Role) {\n  Role[\"Admin\"] = \"ADMIN\";\n  Role[\"Reviewer\"] = \"REVIEWER\";\n  Role[\"Reader\"] = \"READER\";\n  Role[\"Author\"] = \"AUTHOR\";\n})(Role || (Role = {}));\n\nexport var Permissions;\n\n(function (Permissions) {\n  Permissions[\"ManageOwnPosts\"] = \"MANAGE_OWN_POSTS\";\n  Permissions[\"ReadOnlyPosts\"] = \"READ_ONLY_POSTS\";\n  Permissions[\"ManageAllPosts\"] = \"MANAGE_ALL_POSTS\";\n  Permissions[\"ManageUsers\"] = \"MANAGE_USERS\";\n  Permissions[\"ManageSettings\"] = \"MANAGE_SETTINGS\";\n})(Permissions || (Permissions = {}));\n\nexport var PartialFragmentDoc = gql(_templateObject());\nexport var LoginDocument = gql(_templateObject2());\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions) {\n  _s();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(LoginDocument, options);\n}\n\n_s(useLoginMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdateTagsDocument = gql(_templateObject3());\n\n/**\n * __useUpdateTagsMutation__\n *\n * To run a mutation, you first call `useUpdateTagsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTagsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTagsMutation, { data, loading, error }] = useUpdateTagsMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateTagsMutation(baseOptions) {\n  _s2();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateTagsDocument, options);\n}\n\n_s2(useUpdateTagsMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteTagsDocument = gql(_templateObject4());\n\n/**\n * __useDeleteTagsMutation__\n *\n * To run a mutation, you first call `useDeleteTagsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagsMutation, { data, loading, error }] = useDeleteTagsMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTagsMutation(baseOptions) {\n  _s3();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteTagsDocument, options);\n}\n\n_s3(useDeleteTagsMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreateAuthorDocument = gql(_templateObject5());\n\n/**\n * __useCreateAuthorMutation__\n *\n * To run a mutation, you first call `useCreateAuthorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAuthorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAuthorMutation, { data, loading, error }] = useCreateAuthorMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateAuthorMutation(baseOptions) {\n  _s4();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreateAuthorDocument, options);\n}\n\n_s4(useCreateAuthorMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdateOptionsDocument = gql(_templateObject6());\n\n/**\n * __useUpdateOptionsMutation__\n *\n * To run a mutation, you first call `useUpdateOptionsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateOptionsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateOptionsMutation, { data, loading, error }] = useUpdateOptionsMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useUpdateOptionsMutation(baseOptions) {\n  _s5();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateOptionsDocument, options);\n}\n\n_s5(useUpdateOptionsMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdateAuthorDocument = gql(_templateObject7());\n\n/**\n * __useUpdateAuthorMutation__\n *\n * To run a mutation, you first call `useUpdateAuthorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAuthorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAuthorMutation, { data, loading, error }] = useUpdateAuthorMutation({\n *   variables: {\n *      author: // value for 'author'\n *   },\n * });\n */\nexport function useUpdateAuthorMutation(baseOptions) {\n  _s6();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateAuthorDocument, options);\n}\n\n_s6(useUpdateAuthorMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var CreatePostDocument = gql(_templateObject8(), PartialFragmentDoc);\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions) {\n  _s7();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(CreatePostDocument, options);\n}\n\n_s7(useCreatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdatePostDocument = gql(_templateObject9(), PartialFragmentDoc);\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions) {\n  _s8();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdatePostDocument, options);\n}\n\n_s8(useUpdatePostMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var UpdateMediaDocument = gql(_templateObject10());\n\n/**\n * __useUpdateMediaMutation__\n *\n * To run a mutation, you first call `useUpdateMediaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMediaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMediaMutation, { data, loading, error }] = useUpdateMediaMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateMediaMutation(baseOptions) {\n  _s9();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(UpdateMediaDocument, options);\n}\n\n_s9(useUpdateMediaMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var DeleteMediaDocument = gql(_templateObject11());\n\n/**\n * __useDeleteMediaMutation__\n *\n * To run a mutation, you first call `useDeleteMediaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMediaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMediaMutation, { data, loading, error }] = useDeleteMediaMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useDeleteMediaMutation(baseOptions) {\n  _s10();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(DeleteMediaDocument, options);\n}\n\n_s10(useDeleteMediaMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var ForgotPasswordDocument = gql(_templateObject12());\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions) {\n  _s11();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(ForgotPasswordDocument, options);\n}\n\n_s11(useForgotPasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});\n\nexport var ResetPasswordDocument = gql(_templateObject13());\n\n/**\n * __useResetPasswordMutation__\n *\n * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useResetPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({\n *   variables: {\n *      password: // value for 'password'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useResetPasswordMutation(baseOptions) {\n  _s12();\n\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n\n  return Apollo.useMutation(ResetPasswordDocument, options);\n}\n\n_s12(useResetPasswordMutation, \"wwwtpB20p0aLiHIvSy5P98MwIUg=\", false, function () {\n  return [Apollo.useMutation];\n});","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/__generated__/src/graphql/queries/mutations.graphql.tsx"],"names":["gql","Apollo","defaultOptions","PostStatusOptions","PostTypes","SortBy","NavigationType","Role","Permissions","PartialFragmentDoc","LoginDocument","useLoginMutation","baseOptions","options","useMutation","UpdateTagsDocument","useUpdateTagsMutation","DeleteTagsDocument","useDeleteTagsMutation","CreateAuthorDocument","useCreateAuthorMutation","UpdateOptionsDocument","useUpdateOptionsMutation","UpdateAuthorDocument","useUpdateAuthorMutation","CreatePostDocument","useCreatePostMutation","UpdatePostDocument","useUpdatePostMutation","UpdateMediaDocument","useUpdateMediaMutation","DeleteMediaDocument","useDeleteMediaMutation","ForgotPasswordDocument","useForgotPasswordMutation","ResetPasswordDocument","useResetPasswordMutation"],"mappings":"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","sourcesContent":["/* 1d63ec5387065349bef873f4de8c4e1de9e66f52\n * This file is automatically generated by graphql-let. */\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport type Social = {\n  __typename?: 'Social';\n  twitter?: Maybe<Scalars['String']>;\n  facebook?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n};\n\nexport type Author = {\n  __typename?: 'Author';\n  id: Scalars['Int'];\n  email: Scalars['String'];\n  username: Scalars['String'];\n  name: Scalars['String'];\n  social?: Maybe<Social>;\n  bio: Scalars['String'];\n  role: Role;\n  permissions: Array<Permissions>;\n  avatar: Scalars['String'];\n  verified?: Maybe<Scalars['Boolean']>;\n  accessToken?: Maybe<Scalars['String']>;\n};\n\nexport type LoginData = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type InputSocial = {\n  twitter?: Maybe<Scalars['String']>;\n  facebook?: Maybe<Scalars['String']>;\n  github?: Maybe<Scalars['String']>;\n  instagram?: Maybe<Scalars['String']>;\n};\n\nexport type InputAuthor = {\n  id: Scalars['Int'];\n  email?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  bio?: Maybe<Scalars['String']>;\n  social?: Maybe<InputSocial>;\n  password?: Maybe<Scalars['String']>;\n  roleId?: Maybe<Scalars['Int']>;\n  avatar?: Maybe<Scalars['String']>;\n};\n\nexport type InputCreateAuthor = {\n  email: Scalars['String'];\n  site_title: Scalars['String'];\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\nexport type AuthorResponse = {\n  __typename?: 'AuthorResponse';\n  ok: Scalars['Boolean'];\n  errors?: Maybe<Array<Error>>;\n  data?: Maybe<Author>;\n};\n\nexport type AuthorNotFoundError = LetterpadError & {\n  __typename?: 'AuthorNotFoundError';\n  message: Scalars['String'];\n};\n\nexport type CreateAuthorError = LetterpadError & {\n  __typename?: 'CreateAuthorError';\n  message: Scalars['String'];\n};\n\nexport type LoginError = LetterpadError & {\n  __typename?: 'LoginError';\n  message: Scalars['String'];\n};\n\nexport type MeResponse = Author | AuthorNotFoundError;\n\nexport type CreateAuthorResponse = Author | CreateAuthorError;\n\nexport type LoginResponse = Author | LoginError;\n\nexport type ForgotPasswordResponse = {\n  __typename?: 'ForgotPasswordResponse';\n  ok: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  me?: Maybe<MeResponse>;\n  media: MediaNode;\n  post: PostResponse;\n  posts: PostsResponse;\n  settings: SettingResponse;\n  stats?: Maybe<StatsResponse>;\n  tag: TagResponse;\n  tags: TagsResponse;\n};\n\n\nexport type QueryMediaArgs = {\n  filters?: Maybe<MediaFilters>;\n};\n\n\nexport type QueryPostArgs = {\n  filters?: Maybe<PostFilters>;\n};\n\n\nexport type QueryPostsArgs = {\n  filters?: Maybe<PostsFilters>;\n};\n\n\nexport type QueryTagArgs = {\n  slug: Scalars['String'];\n};\n\n\nexport type QueryTagsArgs = {\n  filters?: Maybe<TagsFilters>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAuthor?: Maybe<CreateAuthorResponse>;\n  createPost: CreatePostResponse;\n  deleteMedia?: Maybe<MediaDeleteResponse>;\n  deleteTags: DeleteTagsResponse;\n  forgotPassword: ForgotPasswordResponse;\n  login?: Maybe<LoginResponse>;\n  resetPassword: ForgotPasswordResponse;\n  updateAuthor?: Maybe<AuthorResponse>;\n  updateMedia?: Maybe<MediaUpdateResponse>;\n  updateOptions?: Maybe<Setting>;\n  updatePost: UpdatePostResponse;\n  updateTags: UpdateTagsResponse;\n};\n\n\nexport type MutationCreateAuthorArgs = {\n  data: InputCreateAuthor;\n};\n\n\nexport type MutationCreatePostArgs = {\n  data?: Maybe<InputCreatePost>;\n};\n\n\nexport type MutationDeleteMediaArgs = {\n  ids: Array<Scalars['Int']>;\n};\n\n\nexport type MutationDeleteTagsArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type MutationForgotPasswordArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  data?: Maybe<LoginData>;\n};\n\n\nexport type MutationResetPasswordArgs = {\n  password: Scalars['String'];\n  token: Scalars['String'];\n};\n\n\nexport type MutationUpdateAuthorArgs = {\n  author: InputAuthor;\n};\n\n\nexport type MutationUpdateMediaArgs = {\n  data: InputUpdateMedia;\n};\n\n\nexport type MutationUpdateOptionsArgs = {\n  options: Array<OptionInputType>;\n};\n\n\nexport type MutationUpdatePostArgs = {\n  data?: Maybe<InputUpdatePost>;\n};\n\n\nexport type MutationUpdateTagsArgs = {\n  data?: Maybe<InputTags>;\n};\n\nexport type Media = {\n  __typename?: 'Media';\n  id: Scalars['Int'];\n  authorId?: Maybe<Scalars['Int']>;\n  url: Scalars['String'];\n  createdAt: Scalars['Date'];\n  name: Scalars['String'];\n  width: Scalars['Int'];\n  height: Scalars['Int'];\n  description: Scalars['String'];\n};\n\nexport type MediaNode = {\n  __typename?: 'MediaNode';\n  count: Scalars['Int'];\n  rows: Array<Media>;\n};\n\nexport type MediaDeleteResult = {\n  __typename?: 'MediaDeleteResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type MediaUpdateResult = {\n  __typename?: 'MediaUpdateResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type MediaFilters = {\n  id?: Maybe<Scalars['Int']>;\n  cursor?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  authorId?: Maybe<Scalars['Int']>;\n};\n\nexport type MediaError = LetterpadError & {\n  __typename?: 'MediaError';\n  message: Scalars['String'];\n};\n\nexport type InputUpdateMedia = {\n  id: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type MediaDeleteResponse = MediaDeleteResult | MediaError;\n\nexport type MediaUpdateResponse = MediaUpdateResult | MediaError;\n\nexport type Post = {\n  __typename?: 'Post';\n  id: Scalars['Int'];\n  title: Scalars['String'];\n  html: Scalars['String'];\n  md: Scalars['String'];\n  md_draft: Scalars['String'];\n  author: Author;\n  excerpt: Scalars['String'];\n  cover_image: Image;\n  type: PostTypes;\n  status: PostStatusOptions;\n  featured: Scalars['Boolean'];\n  slug: Scalars['String'];\n  createdAt: Scalars['Date'];\n  publishedAt: Scalars['Date'];\n  scheduledAt: Scalars['Date'];\n  updatedAt: Scalars['Date'];\n  reading_time: Scalars['String'];\n  tags: Array<Tags>;\n};\n\nexport enum PostStatusOptions {\n  Published = 'published',\n  Draft = 'draft',\n  Trashed = 'trashed'\n}\n\nexport type PostFilters = {\n  id?: Maybe<Scalars['Int']>;\n  slug?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  previewHash?: Maybe<Scalars['String']>;\n  status?: Maybe<PostStatusOptions>;\n  type?: Maybe<PostTypes>;\n};\n\nexport enum PostTypes {\n  Post = 'post',\n  Page = 'page'\n}\n\nexport enum SortBy {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\nexport type PostsFilters = {\n  id?: Maybe<Scalars['Int']>;\n  type?: Maybe<PostTypes>;\n  slug?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  previewHash?: Maybe<Scalars['String']>;\n  status?: Maybe<PostStatusOptions>;\n  author?: Maybe<Scalars['String']>;\n  tagSlug?: Maybe<Scalars['String']>;\n  tag?: Maybe<Scalars['String']>;\n  cursor?: Maybe<Scalars['Int']>;\n  page?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  sortBy?: Maybe<SortBy>;\n};\n\nexport type PostsNode = {\n  __typename?: 'PostsNode';\n  count: Scalars['Int'];\n  rows: Array<Post>;\n};\n\nexport type PostCountsByStatus = {\n  __typename?: 'PostCountsByStatus';\n  published: Scalars['Int'];\n  drafts: Scalars['Int'];\n};\n\nexport type Stats = {\n  __typename?: 'Stats';\n  posts: PostCountsByStatus;\n  pages: PostCountsByStatus;\n  tags: Scalars['Int'];\n  media: Scalars['Int'];\n};\n\nexport type InputImage = {\n  height?: Maybe<Scalars['Int']>;\n  src: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n};\n\nexport type TagsInputType = {\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  desc: Scalars['String'];\n};\n\nexport type InputCreatePost = {\n  title?: Maybe<Scalars['String']>;\n  html?: Maybe<Scalars['String']>;\n  md?: Maybe<Scalars['String']>;\n  excerpt?: Maybe<Scalars['String']>;\n  cover_image?: Maybe<InputImage>;\n  type?: Maybe<PostTypes>;\n  featured?: Maybe<Scalars['Boolean']>;\n  status?: Maybe<PostStatusOptions>;\n  slug?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Maybe<TagsInputType>>>;\n};\n\nexport type InputUpdatePost = {\n  id: Scalars['Int'];\n  title?: Maybe<Scalars['String']>;\n  html?: Maybe<Scalars['String']>;\n  md?: Maybe<Scalars['String']>;\n  md_draft?: Maybe<Scalars['String']>;\n  featured?: Maybe<Scalars['Boolean']>;\n  excerpt?: Maybe<Scalars['String']>;\n  cover_image?: Maybe<InputImage>;\n  publishedAt?: Maybe<Scalars['Date']>;\n  scheduledAt?: Maybe<Scalars['Date']>;\n  updatedAt?: Maybe<Scalars['Date']>;\n  type?: Maybe<PostTypes>;\n  status?: Maybe<PostStatusOptions>;\n  slug?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<TagsInputType>>;\n};\n\nexport type PostError = LetterpadError & {\n  __typename?: 'PostError';\n  message: Scalars['String'];\n};\n\nexport type StatsError = LetterpadError & {\n  __typename?: 'StatsError';\n  message: Scalars['String'];\n};\n\nexport type PostResponse = Post | PostError;\n\nexport type PostsResponse = PostsNode | PostError;\n\nexport type CreatePostResponse = Post | PostError;\n\nexport type UpdatePostResponse = Post | PostError;\n\nexport type StatsResponse = Stats | StatsError;\n\nexport enum NavigationType {\n  Tag = 'tag',\n  Page = 'page',\n  Custom = 'custom'\n}\n\nexport type Navigation = {\n  __typename?: 'Navigation';\n  type: NavigationType;\n  slug: Scalars['String'];\n  original_name: Scalars['String'];\n  label: Scalars['String'];\n};\n\nexport type Setting = {\n  __typename?: 'Setting';\n  site_title: Scalars['String'];\n  site_tagline: Scalars['String'];\n  site_email: Scalars['String'];\n  site_url: Scalars['String'];\n  site_footer: Scalars['String'];\n  site_description: Scalars['String'];\n  subscribe_embed: Scalars['String'];\n  social_twitter: Scalars['String'];\n  social_facebook: Scalars['String'];\n  social_instagram: Scalars['String'];\n  social_github: Scalars['String'];\n  displayAuthorInfo: Scalars['Boolean'];\n  cloudinary_key: Scalars['String'];\n  cloudinary_name: Scalars['String'];\n  cloudinary_secret: Scalars['String'];\n  menu: Array<Navigation>;\n  css: Scalars['String'];\n  google_analytics: Scalars['String'];\n  theme: Scalars['String'];\n  disqus_id?: Maybe<Scalars['String']>;\n  banner: Image;\n  site_logo: Image;\n  site_favicon: Image;\n  client_token: Scalars['String'];\n};\n\nexport type InputNavigation = {\n  type?: Maybe<NavigationType>;\n  slug?: Maybe<Scalars['String']>;\n  original_name?: Maybe<Scalars['String']>;\n  label?: Maybe<Scalars['String']>;\n};\n\nexport type OptionInputType = {\n  site_title?: Maybe<Scalars['String']>;\n  site_tagline?: Maybe<Scalars['String']>;\n  site_email?: Maybe<Scalars['String']>;\n  site_url?: Maybe<Scalars['String']>;\n  site_footer?: Maybe<Scalars['String']>;\n  site_description?: Maybe<Scalars['String']>;\n  subscribe_embed?: Maybe<Scalars['String']>;\n  social_twitter?: Maybe<Scalars['String']>;\n  social_facebook?: Maybe<Scalars['String']>;\n  social_instagram?: Maybe<Scalars['String']>;\n  social_github?: Maybe<Scalars['String']>;\n  displayAuthorInfo?: Maybe<Scalars['Boolean']>;\n  cloudinary_key?: Maybe<Scalars['String']>;\n  cloudinary_name?: Maybe<Scalars['String']>;\n  cloudinary_secret?: Maybe<Scalars['String']>;\n  menu?: Maybe<Array<InputNavigation>>;\n  css?: Maybe<Scalars['String']>;\n  google_analytics?: Maybe<Scalars['String']>;\n  theme?: Maybe<Scalars['String']>;\n  disqus_id?: Maybe<Scalars['String']>;\n  banner?: Maybe<InputImage>;\n  site_logo?: Maybe<InputImage>;\n  site_favicon?: Maybe<InputImage>;\n};\n\nexport type SettingError = LetterpadError & {\n  __typename?: 'SettingError';\n  message: Scalars['String'];\n};\n\nexport type SettingResponse = Setting | SettingError;\n\nexport type Tags = {\n  __typename?: 'Tags';\n  id: Scalars['Int'];\n  name: Scalars['String'];\n  desc?: Maybe<Scalars['String']>;\n  slug: Scalars['String'];\n  posts?: Maybe<PostsResponse>;\n};\n\nexport type TagsFilters = {\n  active?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type EditTaxResponse = {\n  __typename?: 'EditTaxResponse';\n  ok: Scalars['Boolean'];\n};\n\nexport type TagsError = LetterpadError & {\n  __typename?: 'TagsError';\n  message: Scalars['String'];\n};\n\nexport type DeleteTagsResult = {\n  __typename?: 'DeleteTagsResult';\n  ok: Scalars['Boolean'];\n};\n\nexport type TagResultError = LetterpadError & {\n  __typename?: 'TagResultError';\n  message: Scalars['String'];\n};\n\nexport type UpdateTagsResponse = EditTaxResponse | TagsError;\n\nexport type DeleteTagsResponse = DeleteTagsResult | TagsError;\n\nexport type InputTags = {\n  id: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  desc?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n};\n\nexport type TagsNode = {\n  __typename?: 'TagsNode';\n  rows: Array<Tags>;\n};\n\nexport type TagsResponse = TagsNode | TagsError;\n\nexport type TagResponse = TagResultError | Tags;\n\n\nexport type Error = {\n  __typename?: 'Error';\n  path: Scalars['String'];\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type Response = {\n  __typename?: 'Response';\n  ok: Scalars['Boolean'];\n  post?: Maybe<Post>;\n  errors?: Maybe<Array<Error>>;\n};\n\nexport type Image = {\n  __typename?: 'Image';\n  src: Scalars['String'];\n  width?: Maybe<Scalars['Int']>;\n  height?: Maybe<Scalars['Int']>;\n};\n\nexport enum Role {\n  Admin = 'ADMIN',\n  Reviewer = 'REVIEWER',\n  Reader = 'READER',\n  Author = 'AUTHOR'\n}\n\nexport enum Permissions {\n  ManageOwnPosts = 'MANAGE_OWN_POSTS',\n  ReadOnlyPosts = 'READ_ONLY_POSTS',\n  ManageAllPosts = 'MANAGE_ALL_POSTS',\n  ManageUsers = 'MANAGE_USERS',\n  ManageSettings = 'MANAGE_SETTINGS'\n}\n\nexport type LetterpadError = {\n  message: Scalars['String'];\n};\n\nexport type LoginMutationVariables = Exact<{\n  data?: Maybe<LoginData>;\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login?: Maybe<(\n    { __typename?: 'Author' }\n    & Pick<Author, 'id' | 'name' | 'email' | 'role' | 'avatar' | 'permissions' | 'bio' | 'username'>\n  ) | (\n    { __typename?: 'LoginError' }\n    & Pick<LoginError, 'message'>\n  )> }\n);\n\nexport type UpdateTagsMutationVariables = Exact<{\n  data?: Maybe<InputTags>;\n}>;\n\n\nexport type UpdateTagsMutation = (\n  { __typename?: 'Mutation' }\n  & { updateTags: (\n    { __typename?: 'EditTaxResponse' }\n    & Pick<EditTaxResponse, 'ok'>\n  ) | (\n    { __typename?: 'TagsError' }\n    & Pick<TagsError, 'message'>\n  ) }\n);\n\nexport type DeleteTagsMutationVariables = Exact<{\n  id: Scalars['Int'];\n}>;\n\n\nexport type DeleteTagsMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteTags: (\n    { __typename?: 'DeleteTagsResult' }\n    & Pick<DeleteTagsResult, 'ok'>\n  ) | (\n    { __typename?: 'TagsError' }\n    & Pick<TagsError, 'message'>\n  ) }\n);\n\nexport type CreateAuthorMutationVariables = Exact<{\n  data: InputCreateAuthor;\n}>;\n\n\nexport type CreateAuthorMutation = (\n  { __typename?: 'Mutation' }\n  & { createAuthor?: Maybe<(\n    { __typename?: 'Author' }\n    & Pick<Author, 'name'>\n  ) | (\n    { __typename?: 'CreateAuthorError' }\n    & Pick<CreateAuthorError, 'message'>\n  )> }\n);\n\nexport type UpdateOptionsMutationVariables = Exact<{\n  options: Array<OptionInputType> | OptionInputType;\n}>;\n\n\nexport type UpdateOptionsMutation = (\n  { __typename?: 'Mutation' }\n  & { updateOptions?: Maybe<(\n    { __typename?: 'Setting' }\n    & Pick<Setting, 'site_title' | 'site_tagline' | 'site_email' | 'site_url' | 'site_footer' | 'site_description' | 'subscribe_embed' | 'social_twitter' | 'social_facebook' | 'social_instagram' | 'social_github' | 'displayAuthorInfo' | 'cloudinary_key' | 'cloudinary_name' | 'cloudinary_secret' | 'css' | 'google_analytics' | 'theme' | 'disqus_id'>\n    & { menu: Array<(\n      { __typename?: 'Navigation' }\n      & Pick<Navigation, 'label' | 'original_name' | 'slug' | 'type'>\n    )>, banner: (\n      { __typename?: 'Image' }\n      & Pick<Image, 'src' | 'width' | 'height'>\n    ), site_logo: (\n      { __typename?: 'Image' }\n      & Pick<Image, 'src' | 'width' | 'height'>\n    ), site_favicon: (\n      { __typename?: 'Image' }\n      & Pick<Image, 'src' | 'width' | 'height'>\n    ) }\n  )> }\n);\n\nexport type UpdateAuthorMutationVariables = Exact<{\n  author: InputAuthor;\n}>;\n\n\nexport type UpdateAuthorMutation = (\n  { __typename?: 'Mutation' }\n  & { updateAuthor?: Maybe<(\n    { __typename?: 'AuthorResponse' }\n    & Pick<AuthorResponse, 'ok'>\n    & { errors?: Maybe<Array<(\n      { __typename?: 'Error' }\n      & Pick<Error, 'path' | 'message'>\n    )>>, data?: Maybe<(\n      { __typename?: 'Author' }\n      & Pick<Author, 'name' | 'bio' | 'avatar'>\n      & { social?: Maybe<(\n        { __typename?: 'Social' }\n        & Pick<Social, 'github' | 'twitter' | 'instagram' | 'facebook'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type CreatePostMutationVariables = Exact<{\n  data?: Maybe<InputCreatePost>;\n}>;\n\n\nexport type CreatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { createPost: (\n    { __typename?: 'Post' }\n    & { author: (\n      { __typename?: 'Author' }\n      & Pick<Author, 'name'>\n    ), tags: Array<(\n      { __typename?: 'Tags' }\n      & Pick<Tags, 'id' | 'name' | 'slug'>\n    )> }\n    & PartialFragment\n  ) | (\n    { __typename?: 'PostError' }\n    & Pick<PostError, 'message'>\n  ) }\n);\n\nexport type PartialFragment = (\n  { __typename?: 'Post' }\n  & Pick<Post, 'id' | 'title' | 'html' | 'excerpt' | 'featured' | 'md' | 'md_draft' | 'type' | 'slug' | 'status' | 'createdAt' | 'publishedAt' | 'scheduledAt' | 'updatedAt' | 'reading_time'>\n  & { cover_image: (\n    { __typename?: 'Image' }\n    & Pick<Image, 'src' | 'width' | 'height'>\n  ) }\n);\n\nexport type UpdatePostMutationVariables = Exact<{\n  data?: Maybe<InputUpdatePost>;\n}>;\n\n\nexport type UpdatePostMutation = (\n  { __typename?: 'Mutation' }\n  & { updatePost: (\n    { __typename?: 'Post' }\n    & { author: (\n      { __typename?: 'Author' }\n      & Pick<Author, 'id' | 'name' | 'avatar' | 'bio'>\n      & { social?: Maybe<(\n        { __typename?: 'Social' }\n        & Pick<Social, 'github' | 'twitter' | 'instagram'>\n      )> }\n    ), tags: Array<(\n      { __typename?: 'Tags' }\n      & Pick<Tags, 'id' | 'name' | 'slug'>\n    )> }\n    & PartialFragment\n  ) | (\n    { __typename?: 'PostError' }\n    & Pick<PostError, 'message'>\n  ) }\n);\n\nexport type UpdateMediaMutationVariables = Exact<{\n  data: InputUpdateMedia;\n}>;\n\n\nexport type UpdateMediaMutation = (\n  { __typename?: 'Mutation' }\n  & { updateMedia?: Maybe<(\n    { __typename?: 'MediaUpdateResult' }\n    & Pick<MediaUpdateResult, 'ok'>\n  ) | (\n    { __typename?: 'MediaError' }\n    & Pick<MediaError, 'message'>\n  )> }\n);\n\nexport type DeleteMediaMutationVariables = Exact<{\n  ids: Array<Scalars['Int']> | Scalars['Int'];\n}>;\n\n\nexport type DeleteMediaMutation = (\n  { __typename?: 'Mutation' }\n  & { deleteMedia?: Maybe<(\n    { __typename?: 'MediaDeleteResult' }\n    & Pick<MediaDeleteResult, 'ok'>\n  ) | (\n    { __typename?: 'MediaError' }\n    & Pick<MediaError, 'message'>\n  )> }\n);\n\nexport type ForgotPasswordMutationVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type ForgotPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { forgotPassword: (\n    { __typename?: 'ForgotPasswordResponse' }\n    & Pick<ForgotPasswordResponse, 'ok' | 'message'>\n  ) }\n);\n\nexport type ResetPasswordMutationVariables = Exact<{\n  password: Scalars['String'];\n  token: Scalars['String'];\n}>;\n\n\nexport type ResetPasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { resetPassword: (\n    { __typename?: 'ForgotPasswordResponse' }\n    & Pick<ForgotPasswordResponse, 'ok' | 'message'>\n  ) }\n);\n\nexport const PartialFragmentDoc = gql`\n    fragment Partial on Post {\n  id\n  title\n  html\n  excerpt\n  featured\n  md\n  md_draft\n  type\n  slug\n  status\n  createdAt\n  publishedAt\n  scheduledAt\n  updatedAt\n  reading_time\n  cover_image {\n    src\n    width\n    height\n  }\n}\n    `;\nexport const LoginDocument = gql`\n    mutation Login($data: LoginData) {\n  login(data: $data) {\n    ... on Author {\n      id\n      name\n      email\n      role\n      avatar\n      permissions\n      bio\n      username\n    }\n    ... on LoginError {\n      message\n    }\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const UpdateTagsDocument = gql`\n    mutation UpdateTags($data: InputTags) {\n  updateTags(data: $data) {\n    ... on EditTaxResponse {\n      ok\n    }\n    ... on TagsError {\n      message\n    }\n  }\n}\n    `;\nexport type UpdateTagsMutationFn = Apollo.MutationFunction<UpdateTagsMutation, UpdateTagsMutationVariables>;\n\n/**\n * __useUpdateTagsMutation__\n *\n * To run a mutation, you first call `useUpdateTagsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTagsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTagsMutation, { data, loading, error }] = useUpdateTagsMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateTagsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateTagsMutation, UpdateTagsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateTagsMutation, UpdateTagsMutationVariables>(UpdateTagsDocument, options);\n      }\nexport type UpdateTagsMutationHookResult = ReturnType<typeof useUpdateTagsMutation>;\nexport type UpdateTagsMutationResult = Apollo.MutationResult<UpdateTagsMutation>;\nexport type UpdateTagsMutationOptions = Apollo.BaseMutationOptions<UpdateTagsMutation, UpdateTagsMutationVariables>;\nexport const DeleteTagsDocument = gql`\n    mutation DeleteTags($id: Int!) {\n  deleteTags(id: $id) {\n    ... on DeleteTagsResult {\n      ok\n    }\n    ... on TagsError {\n      message\n    }\n  }\n}\n    `;\nexport type DeleteTagsMutationFn = Apollo.MutationFunction<DeleteTagsMutation, DeleteTagsMutationVariables>;\n\n/**\n * __useDeleteTagsMutation__\n *\n * To run a mutation, you first call `useDeleteTagsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteTagsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteTagsMutation, { data, loading, error }] = useDeleteTagsMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteTagsMutation(baseOptions?: Apollo.MutationHookOptions<DeleteTagsMutation, DeleteTagsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteTagsMutation, DeleteTagsMutationVariables>(DeleteTagsDocument, options);\n      }\nexport type DeleteTagsMutationHookResult = ReturnType<typeof useDeleteTagsMutation>;\nexport type DeleteTagsMutationResult = Apollo.MutationResult<DeleteTagsMutation>;\nexport type DeleteTagsMutationOptions = Apollo.BaseMutationOptions<DeleteTagsMutation, DeleteTagsMutationVariables>;\nexport const CreateAuthorDocument = gql`\n    mutation CreateAuthor($data: InputCreateAuthor!) {\n  createAuthor(data: $data) {\n    ... on Author {\n      name\n    }\n    ... on CreateAuthorError {\n      message\n    }\n  }\n}\n    `;\nexport type CreateAuthorMutationFn = Apollo.MutationFunction<CreateAuthorMutation, CreateAuthorMutationVariables>;\n\n/**\n * __useCreateAuthorMutation__\n *\n * To run a mutation, you first call `useCreateAuthorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAuthorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAuthorMutation, { data, loading, error }] = useCreateAuthorMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateAuthorMutation(baseOptions?: Apollo.MutationHookOptions<CreateAuthorMutation, CreateAuthorMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateAuthorMutation, CreateAuthorMutationVariables>(CreateAuthorDocument, options);\n      }\nexport type CreateAuthorMutationHookResult = ReturnType<typeof useCreateAuthorMutation>;\nexport type CreateAuthorMutationResult = Apollo.MutationResult<CreateAuthorMutation>;\nexport type CreateAuthorMutationOptions = Apollo.BaseMutationOptions<CreateAuthorMutation, CreateAuthorMutationVariables>;\nexport const UpdateOptionsDocument = gql`\n    mutation UpdateOptions($options: [OptionInputType!]!) {\n  updateOptions(options: $options) {\n    site_title\n    site_tagline\n    site_email\n    site_url\n    site_footer\n    site_description\n    subscribe_embed\n    social_twitter\n    social_facebook\n    social_instagram\n    social_github\n    displayAuthorInfo\n    cloudinary_key\n    cloudinary_name\n    cloudinary_secret\n    menu {\n      label\n      original_name\n      slug\n      type\n    }\n    css\n    google_analytics\n    theme\n    disqus_id\n    banner {\n      src\n      width\n      height\n    }\n    site_logo {\n      src\n      width\n      height\n    }\n    site_favicon {\n      src\n      width\n      height\n    }\n  }\n}\n    `;\nexport type UpdateOptionsMutationFn = Apollo.MutationFunction<UpdateOptionsMutation, UpdateOptionsMutationVariables>;\n\n/**\n * __useUpdateOptionsMutation__\n *\n * To run a mutation, you first call `useUpdateOptionsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateOptionsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateOptionsMutation, { data, loading, error }] = useUpdateOptionsMutation({\n *   variables: {\n *      options: // value for 'options'\n *   },\n * });\n */\nexport function useUpdateOptionsMutation(baseOptions?: Apollo.MutationHookOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateOptionsMutation, UpdateOptionsMutationVariables>(UpdateOptionsDocument, options);\n      }\nexport type UpdateOptionsMutationHookResult = ReturnType<typeof useUpdateOptionsMutation>;\nexport type UpdateOptionsMutationResult = Apollo.MutationResult<UpdateOptionsMutation>;\nexport type UpdateOptionsMutationOptions = Apollo.BaseMutationOptions<UpdateOptionsMutation, UpdateOptionsMutationVariables>;\nexport const UpdateAuthorDocument = gql`\n    mutation UpdateAuthor($author: InputAuthor!) {\n  updateAuthor(author: $author) {\n    ok\n    errors {\n      path\n      message\n    }\n    data {\n      name\n      social {\n        github\n        twitter\n        instagram\n        facebook\n      }\n      bio\n      avatar\n    }\n  }\n}\n    `;\nexport type UpdateAuthorMutationFn = Apollo.MutationFunction<UpdateAuthorMutation, UpdateAuthorMutationVariables>;\n\n/**\n * __useUpdateAuthorMutation__\n *\n * To run a mutation, you first call `useUpdateAuthorMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAuthorMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAuthorMutation, { data, loading, error }] = useUpdateAuthorMutation({\n *   variables: {\n *      author: // value for 'author'\n *   },\n * });\n */\nexport function useUpdateAuthorMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAuthorMutation, UpdateAuthorMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateAuthorMutation, UpdateAuthorMutationVariables>(UpdateAuthorDocument, options);\n      }\nexport type UpdateAuthorMutationHookResult = ReturnType<typeof useUpdateAuthorMutation>;\nexport type UpdateAuthorMutationResult = Apollo.MutationResult<UpdateAuthorMutation>;\nexport type UpdateAuthorMutationOptions = Apollo.BaseMutationOptions<UpdateAuthorMutation, UpdateAuthorMutationVariables>;\nexport const CreatePostDocument = gql`\n    mutation createPost($data: InputCreatePost) {\n  createPost(data: $data) {\n    ... on Post {\n      ...Partial\n      author {\n        name\n      }\n      tags {\n        id\n        name\n        slug\n      }\n    }\n    ... on PostError {\n      message\n    }\n  }\n}\n    ${PartialFragmentDoc}`;\nexport type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;\n\n/**\n * __useCreatePostMutation__\n *\n * To run a mutation, you first call `useCreatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, options);\n      }\nexport type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;\nexport type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;\nexport type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;\nexport const UpdatePostDocument = gql`\n    mutation updatePost($data: InputUpdatePost) {\n  updatePost(data: $data) {\n    ... on Post {\n      ...Partial\n      author {\n        id\n        name\n        avatar\n        social {\n          github\n          twitter\n          instagram\n        }\n        bio\n      }\n      tags {\n        id\n        name\n        slug\n      }\n    }\n    ... on PostError {\n      message\n    }\n  }\n}\n    ${PartialFragmentDoc}`;\nexport type UpdatePostMutationFn = Apollo.MutationFunction<UpdatePostMutation, UpdatePostMutationVariables>;\n\n/**\n * __useUpdatePostMutation__\n *\n * To run a mutation, you first call `useUpdatePostMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePostMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePostMutation, { data, loading, error }] = useUpdatePostMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdatePostMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePostMutation, UpdatePostMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdatePostMutation, UpdatePostMutationVariables>(UpdatePostDocument, options);\n      }\nexport type UpdatePostMutationHookResult = ReturnType<typeof useUpdatePostMutation>;\nexport type UpdatePostMutationResult = Apollo.MutationResult<UpdatePostMutation>;\nexport type UpdatePostMutationOptions = Apollo.BaseMutationOptions<UpdatePostMutation, UpdatePostMutationVariables>;\nexport const UpdateMediaDocument = gql`\n    mutation UpdateMedia($data: InputUpdateMedia!) {\n  updateMedia(data: $data) {\n    ... on MediaUpdateResult {\n      ok\n    }\n    ... on MediaError {\n      message\n    }\n  }\n}\n    `;\nexport type UpdateMediaMutationFn = Apollo.MutationFunction<UpdateMediaMutation, UpdateMediaMutationVariables>;\n\n/**\n * __useUpdateMediaMutation__\n *\n * To run a mutation, you first call `useUpdateMediaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMediaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMediaMutation, { data, loading, error }] = useUpdateMediaMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateMediaMutation(baseOptions?: Apollo.MutationHookOptions<UpdateMediaMutation, UpdateMediaMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateMediaMutation, UpdateMediaMutationVariables>(UpdateMediaDocument, options);\n      }\nexport type UpdateMediaMutationHookResult = ReturnType<typeof useUpdateMediaMutation>;\nexport type UpdateMediaMutationResult = Apollo.MutationResult<UpdateMediaMutation>;\nexport type UpdateMediaMutationOptions = Apollo.BaseMutationOptions<UpdateMediaMutation, UpdateMediaMutationVariables>;\nexport const DeleteMediaDocument = gql`\n    mutation DeleteMedia($ids: [Int!]!) {\n  deleteMedia(ids: $ids) {\n    ... on MediaDeleteResult {\n      ok\n    }\n    ... on MediaError {\n      message\n    }\n  }\n}\n    `;\nexport type DeleteMediaMutationFn = Apollo.MutationFunction<DeleteMediaMutation, DeleteMediaMutationVariables>;\n\n/**\n * __useDeleteMediaMutation__\n *\n * To run a mutation, you first call `useDeleteMediaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteMediaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteMediaMutation, { data, loading, error }] = useDeleteMediaMutation({\n *   variables: {\n *      ids: // value for 'ids'\n *   },\n * });\n */\nexport function useDeleteMediaMutation(baseOptions?: Apollo.MutationHookOptions<DeleteMediaMutation, DeleteMediaMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteMediaMutation, DeleteMediaMutationVariables>(DeleteMediaDocument, options);\n      }\nexport type DeleteMediaMutationHookResult = ReturnType<typeof useDeleteMediaMutation>;\nexport type DeleteMediaMutationResult = Apollo.MutationResult<DeleteMediaMutation>;\nexport type DeleteMediaMutationOptions = Apollo.BaseMutationOptions<DeleteMediaMutation, DeleteMediaMutationVariables>;\nexport const ForgotPasswordDocument = gql`\n    mutation ForgotPassword($email: String!) {\n  forgotPassword(email: $email) {\n    ok\n    message\n  }\n}\n    `;\nexport type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\n\n/**\n * __useForgotPasswordMutation__\n *\n * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({\n *   variables: {\n *      email: // value for 'email'\n *   },\n * });\n */\nexport function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, options);\n      }\nexport type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>;\nexport type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>;\nexport type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>;\nexport const ResetPasswordDocument = gql`\n    mutation ResetPassword($password: String!, $token: String!) {\n  resetPassword(password: $password, token: $token) {\n    ok\n    message\n  }\n}\n    `;\nexport type ResetPasswordMutationFn = Apollo.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>;\n\n/**\n * __useResetPasswordMutation__\n *\n * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useResetPasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({\n *   variables: {\n *      password: // value for 'password'\n *      token: // value for 'token'\n *   },\n * });\n */\nexport function useResetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, options);\n      }\nexport type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>;\nexport type ResetPasswordMutationResult = Apollo.MutationResult<ResetPasswordMutation>;\nexport type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>;"]},"metadata":{},"sourceType":"module"}