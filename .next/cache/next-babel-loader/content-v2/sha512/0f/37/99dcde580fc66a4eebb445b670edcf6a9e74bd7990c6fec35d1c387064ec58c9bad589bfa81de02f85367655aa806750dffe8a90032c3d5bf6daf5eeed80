{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport models from \"../db/models\";\nimport { settingsData } from \"../db/models/setting\";\nconst SECURE_SETTINGS = [\"cloudinary_key\", \"cloudinary_name\", \"cloudinary_secret\"];\nconst cssPath = path.join(process.cwd(), \"public/css/custom.css\");\nconst Setting = {\n  menu: ({\n    menu\n  }) => {\n    return getMenuWithSanitizedSlug(menu);\n  },\n  banner: ({\n    banner\n  }) => {\n    if (banner.src && !banner.src.startsWith(\"http\")) {\n      banner.src = process.env.ROOT_URL + banner.src;\n    }\n\n    return banner;\n  },\n  site_logo: ({\n    site_logo\n  }) => {\n    if (site_logo.src && !site_logo.src.startsWith(\"http\")) {\n      site_logo.src = process.env.ROOT_URL + site_logo.src;\n    }\n\n    return site_logo;\n  },\n  site_favicon: ({\n    site_favicon\n  }) => {\n    if (site_favicon.src && !site_favicon.src.startsWith(\"http\")) {\n      site_favicon.src = process.env.ROOT_URL + site_favicon.src;\n    }\n\n    return site_favicon;\n  }\n};\nconst Query = {\n  settings: async (_root, _args = {}, {\n    session,\n    author_id\n  }) => {\n    const authorId = (session === null || session === void 0 ? void 0 : session.user.id) || author_id;\n\n    if (!authorId) {\n      return {\n        __typename: \"SettingError\",\n        message: \"Setting related to author:null not found\"\n      };\n    }\n\n    const author = await models.Author.findOne({\n      where: {\n        id: authorId\n      }\n    });\n    const setting = await (author === null || author === void 0 ? void 0 : author.getSetting());\n    if (!setting) return {\n      __typename: \"SettingError\",\n      message: \"Setting related to author:null not found\"\n    };\n    SECURE_SETTINGS.forEach(securedKey => {\n      if (!(session !== null && session !== void 0 && session.user.id)) {\n        //@ts-ignore\n        setting.setDataValue(securedKey, \"\");\n      }\n    });\n    return _objectSpread({\n      __typename: \"Setting\"\n    }, setting);\n  }\n};\nconst Mutation = {\n  updateOptions: async (_root, args, {\n    session\n  }) => {\n    if (!(session !== null && session !== void 0 && session.user.id)) return settingsData;\n    const author = await models.Author.findOne({\n      where: {\n        id: session.user.id\n      }\n    });\n    if (!author) return settingsData;\n\n    const _setting = await author.getSetting();\n\n    let promises = args.options.map(setting => {\n      const option = Object.keys(setting)[0];\n      let value = Object.values(setting)[0];\n\n      if (setting.css) {\n        fs.writeFileSync(cssPath, setting.css);\n      }\n\n      if (setting.banner || setting.site_logo || setting.site_favicon) {\n        value = value;\n\n        if (value && !value.src.startsWith(process.env.ROOT_URL)) {\n          value.src = value.src.replace(process.env.ROOT_URL, \"\");\n        }\n      }\n\n      return models.Setting.update({\n        [option]: value\n      }, {\n        where: {\n          id: _setting.id\n        },\n        logging: true\n      });\n    });\n\n    try {\n      await Promise.all(promises);\n    } catch (e) {\n      console.log(\"e :>> \", e);\n    }\n\n    const setting = await models.Setting.findOne({\n      where: {\n        id: session.user.id\n      }\n    });\n\n    if (!setting) {\n      return settingsData;\n    }\n\n    return setting.get();\n  }\n};\nexport default {\n  Query,\n  Mutation,\n  Setting\n};\n\nfunction getMenuWithSanitizedSlug(menu) {\n  return menu.map(item => {\n    switch (item.type) {\n      case \"tag\":\n      case \"page\":\n        item.slug = \"/\" + item.type + \"/\" + item.slug;\n        break;\n    }\n\n    return item;\n  });\n}","map":{"version":3,"sources":["/Users/abhi/www/letterpad-admin/src/graphql/resolvers/setting.ts"],"names":["fs","path","models","settingsData","SECURE_SETTINGS","cssPath","join","process","cwd","Setting","menu","getMenuWithSanitizedSlug","banner","src","startsWith","env","ROOT_URL","site_logo","site_favicon","Query","settings","_root","_args","session","author_id","authorId","user","id","__typename","message","author","Author","findOne","where","setting","getSetting","forEach","securedKey","setDataValue","Mutation","updateOptions","args","_setting","promises","options","map","option","Object","keys","value","values","css","writeFileSync","replace","update","logging","Promise","all","e","console","log","get","item","type","slug"],"mappings":"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","sourcesContent":["import { ResolverContext } from \"../apollo\";\nimport type {\n  QueryResolvers,\n  MutationResolvers,\n  Setting as SettingType,\n  InputImage,\n  Navigation,\n} from \"@/__generated__/type-defs.graphqls\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport models from \"../db/models\";\nimport { settingsData } from \"../db/models/setting\";\n\ntype ValueOf<T> = T[keyof T];\nconst SECURE_SETTINGS = [\n  \"cloudinary_key\",\n  \"cloudinary_name\",\n  \"cloudinary_secret\",\n];\n\nconst cssPath = path.join(process.cwd(), \"public/css/custom.css\");\n\nconst Setting = {\n  menu: ({ menu }) => {\n    return getMenuWithSanitizedSlug(menu);\n  },\n\n  banner: ({ banner }) => {\n    if (banner.src && !banner.src.startsWith(\"http\")) {\n      banner.src = process.env.ROOT_URL + banner.src;\n    }\n    return banner;\n  },\n\n  site_logo: ({ site_logo }) => {\n    if (site_logo.src && !site_logo.src.startsWith(\"http\")) {\n      site_logo.src = process.env.ROOT_URL + site_logo.src;\n    }\n    return site_logo;\n  },\n\n  site_favicon: ({ site_favicon }) => {\n    if (site_favicon.src && !site_favicon.src.startsWith(\"http\")) {\n      site_favicon.src = process.env.ROOT_URL + site_favicon.src;\n    }\n    return site_favicon;\n  },\n};\n\nconst Query: QueryResolvers<ResolverContext> = {\n  settings: async (_root, _args = {}, { session, author_id }) => {\n    const authorId = session?.user.id || author_id;\n    if (!authorId) {\n      return {\n        __typename: \"SettingError\",\n        message: \"Setting related to author:null not found\",\n      };\n    }\n    const author = await models.Author.findOne({\n      where: { id: authorId },\n    });\n\n    const setting = await author?.getSetting();\n\n    if (!setting)\n      return {\n        __typename: \"SettingError\",\n        message: \"Setting related to author:null not found\",\n      };\n\n    SECURE_SETTINGS.forEach(securedKey => {\n      if (!session?.user.id) {\n        //@ts-ignore\n        setting.setDataValue(securedKey, \"\");\n      }\n    });\n\n    return {\n      __typename: \"Setting\",\n      ...(setting as unknown as SettingType),\n    };\n  },\n};\nconst Mutation: MutationResolvers<ResolverContext> = {\n  updateOptions: async (_root, args, { session }) => {\n    if (!session?.user.id) return settingsData;\n\n    const author = await models.Author.findOne({\n      where: { id: session.user.id },\n    });\n\n    if (!author) return settingsData;\n    const _setting = await author.getSetting();\n\n    let promises = args.options.map(setting => {\n      const option = Object.keys(setting)[0] as keyof Omit<\n        SettingType,\n        \"__typename\"\n      >;\n      let value = Object.values(setting)[0] as ValueOf<SettingType>;\n\n      if (setting.css) {\n        fs.writeFileSync(cssPath, setting.css);\n      }\n\n      if (setting.banner || setting.site_logo || setting.site_favicon) {\n        value = value as InputImage;\n        if (value && !value.src.startsWith(process.env.ROOT_URL)) {\n          value.src = value.src.replace(process.env.ROOT_URL, \"\");\n        }\n      }\n      return models.Setting.update(\n        { [option]: value },\n        { where: { id: _setting.id }, logging: true },\n      );\n    });\n\n    try {\n      await Promise.all(promises);\n    } catch (e) {\n      console.log(\"e :>> \", e);\n    }\n\n    const setting = await models.Setting.findOne({\n      where: { id: session.user.id },\n    });\n    if (!setting) {\n      return settingsData;\n    }\n    return setting.get() as unknown as SettingType;\n  },\n};\n\nexport default { Query, Mutation, Setting };\n\nfunction getMenuWithSanitizedSlug(menu: Navigation[]) {\n  return menu.map(item => {\n    switch (item.type) {\n      case \"tag\":\n      case \"page\":\n        item.slug = \"/\" + item.type + \"/\" + item.slug;\n        break;\n    }\n    return item;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}